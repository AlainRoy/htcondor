all_target(procd_client.a condor_procd procd_test_controller procd_test_drone)

CFLAGS = $(STD_C_FLAGS) -DPROCD_DEBUG=1
C_PLUS_FLAGS = $(STD_C_PLUS_FLAGS) -DPROCD_DEBUG=1

IMPORT_LINKS=../../config/import_links
import(../condor_util_lib,condor_full_io.o)
import(../condor_util_lib,condor_blkng_full_disk_io.o)
import(../condor_util_lib,condor_pidenvid.o)
IMPORT_OBJ=condor_full_io.o condor_blkng_full_disk_io.o condor_pidenvid.o

PROCD_OBJ=procd_main.o procd_common.o \
          proc_family_server.o local_server.UNIX.o \
          named_pipe_reader.o named_pipe_writer.o named_pipe_util.o \
          proc_family_monitor.o proc_family.o \
          procd_instantiate.o \
          dprintf_lite.o \
          $(IMPORT_OBJ)
template_inst(procd_instantiate.C,procd_instantiate.o)
public_c_plus_nowrap_target(condor_procd,sbin,$(PROCD_OBJ),$(PROCAPI_LIB))

LIB_OBJ=proc_family_client.o local_client.UNIX.o \
        named_pipe_reader.o named_pipe_writer.o named_pipe_util.o
library_target(procd_client.a,$(LIB_OBJ))

COMMON_TEST_OBJ=network_util.o process_util.o dprintf_lite.o $(IMPORT_OBJ)
	
CONTROLLER_OBJ=controller.o drone_tree.o \
               proc_reference_tree.o \
               controller_instantiate.o \
               $(COMMON_TEST_OBJ)
template_inst(controller_instantiate.C,controller_instantiate.o)
c_plus_nowrap_target(procd_test_controller,$(CONTROLLER_OBJ),$(PROCAPI_LIB) procd_client.a)

DRONE_OBJ=drone.o $(COMMON_TEST_OBJ)
c_plus_nowrap_target(procd_test_drone,$(DRONE_OBJ),)

c_plus_nowrap_target(procd_dump,procd_dump.o,procd_client.a $(STD_LIBS))
c_plus_nowrap_target(procd_quit,procd_quit.o,procd_client.a $(STD_LIBS))

html:
release:: all
stripped:: all
static:: all
clean::
