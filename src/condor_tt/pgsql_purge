
--quill_purgehistory for PostgresSQL database.
--
--quill_purgehistory does the following:
--1. purge resource history data (e.g. machine history) that are older than 
--   resourceHistoryDuration days
--
--2. purge job run history data (e.g. runs, matchs, ...) that are older than 
--   runHistoryDuration days
--
--3. purge job history data that are older than 
--   jobHistoryDuration days
--
--4. check total size of all tables and see if it's bigger than 
--   75% of quillDBSpaceLimit and if so, update the flag spaceShortageWarning
--   to true and set the exact percentage of usage.

-- resource history data: no need to keep them for long
--   machine_history, machine_classad_history, 
--   daemon_horizontal_history, daemon_vertical_history, 

-- job run history data: purge when they are very old
--   transfers, fileusages, files, runs, events, rejects, matches

-- important job history data should be kept as long as possible
--   history_vertical, history_horizontal, thrown (log thrown events)

-- never purge current "operational data": 
--   machine, machine_classad, clusterads_horizontal, procads_horizontal, 
--   clusterads_vertical, procads_vertical, thrown, daemon_horizontal
--   daemon_vertical

-- resourceHistoryDuration, runHistoryDuration, jobHistoryDuration 
-- parameters are all in number of days
-- quillDBSpaceLimit parameter is in number of gigabytes


-- dbsize is in unit of megabytes
TABLE quilldbmonitor
dbsize    integer
END TABLE

DELETE quilldbmonitor

INSERT quilldbmonitor (dbsize)
0
END INSERT


TABLE history_jobs_to_purge
scheddname   varchar(4000)
scheddbirthdate integer
cluster_id   integer
proc_id         integer
globaljobid  varchar(4000)
Primary key (scheddname, scheddbirthdate, cluster_id, proc_id)
END TABLE


#IF CREATE

# CREATE ################################################################

#NOPARSE

CREATE OR REPLACE FUNCTION
quill_purgehistory(
resourceHistoryDuration integer,
runHistoryDuration integer,
jobHistoryDuration integer) RETURNS  int AS $$
DECLARE
totalUsedMB NUMERIC;
start_time timestamp with time zone;
end_time timestamp with time zone;
	
BEGIN

-- start timer
select into start_time timeofday();

/* first purge resource history data */

-- purge maintenance log older than resourceHistoryDuration days
DELETE FROM maintenance_log 
WHERE eventts < 
      (current_timestamp - 
       cast (resourceHistoryDuration || ' day' as interval));

-- purge machine vertical attributes older than resourceHistoryDuration days
DELETE FROM machines_vertical_history
WHERE start_time < 
      (current_timestamp - 
       cast (resourceHistoryDuration || ' day' as interval));

-- purge machine classads older than resourceHistoryDuration days
DELETE FROM machines_horizontal_history
WHERE lastreportedtime < 
      (current_timestamp - 
       cast (resourceHistoryDuration || ' day' as interval));

-- purge daemon vertical attributes older than certain days
DELETE FROM daemons_vertical_history
WHERE lastreportedtime < 
      (current_timestamp - 
       cast (resourceHistoryDuration || ' day' as interval));

-- purge daemon classads older than certain days
DELETE FROM daemons_horizontal_history
WHERE lastreportedtime < 
      (current_timestamp - 
       cast (resourceHistoryDuration || ' day' as interval));

-- purge submitters classads older than certain days
DELETE FROM submitters_horizontal_history
WHERE lastreportedtime < 
      (current_timestamp - 
       cast (resourceHistoryDuration || ' day' as interval));

/* second purge job run history data */

-- find the set of jobs for which the run history are going to be purged
INSERT INTO history_jobs_to_purge 
SELECT scheddname, scheddbirthdate, cluster_id, proc_id, globaljobid
FROM jobs_horizontal_history
WHERE enteredhistorytable < 
      (current_timestamp - 
       cast (runHistoryDuration || ' day' as interval));

-- purge transfers data related to jobs older than certain days
DELETE FROM transfers 
WHERE globaljobid IN (SELECT globaljobid 
                      FROM history_jobs_to_purge);

-- purge fileusages related to jobs older than certain days
DELETE FROM fileusages
WHERE globaljobid IN (SELECT globaljobid 
                      FROM history_jobs_to_purge);

-- purge files that are not referenced any more
DELETE FROM files
WHERE file_id IN (SELECT distinct(file_id) 
		FROM files 
		EXCEPT 
		SELECT f.file_id FROM files f, fileusages fu WHERE f.file_id = fu.file_id);

-- purge run data for jobs older than certain days
DELETE FROM runs 
WHERE run_id IN (SELECT distinct run_id 
		FROM runs R, history_jobs_to_purge H
		WHERE 	h.scheddname = r.scheddname AND 
			h.cluster_id = r.cluster_id AND 
			h.proc_id = r.proc_id);

-- purge rejects data for jobs older than certain days
DELETE FROM rejects
WHERE exists (SELECT * 
              FROM history_jobs_to_purge AS H
              WHERE H.scheddname = Rejects.scheddname AND
                    H.cluster_id = Rejects.cluster_id AND
                    H.proc_id = Rejects.proc_id);

-- purge matches data for jobs older than certain days
DELETE FROM matches
WHERE exists (SELECT * 
              FROM history_jobs_to_purge AS H
              WHERE H.scheddname = Matches.scheddname AND
                    H.cluster_id = Matches.cluster_id AND
                    H.proc_id = Matches.proc_id);

-- purge events data for jobs older than certain days
DELETE FROM events
WHERE exists (SELECT * 
              FROM history_jobs_to_purge AS H
              WHERE H.scheddname = Events.scheddname AND
                    H.cluster_id = Events.cluster_id AND
                    H.proc_id = Events.proc_id);

TRUNCATE TABLE history_jobs_to_purge;

/* third purge job history data */

-- find the set of jobs for which history data are to be purged
INSERT INTO history_jobs_to_purge 
SELECT scheddname, scheddbirthdate, cluster_id, proc_id, globaljobid
FROM jobs_horizontal_history
WHERE enteredhistorytable < 
      (current_timestamp - 
       cast (jobHistoryDuration || ' day' as interval));

-- purge vertical attributes for jobs older than certain days
DELETE FROM jobs_vertical_history 
WHERE exists (SELECT * 
              FROM history_jobs_to_purge AS H
              WHERE H.scheddname = jobs_vertical_history.scheddname AND
	    	    H.scheddbirthdate = jobs_vertical_history.scheddbirthdate AND
                    H.cluster_id = jobs_vertical_history.cluster_id AND
                    H.proc_id = jobs_vertical_history.proc_id);

-- purge classads for jobs older than certain days
DELETE FROM jobs_horizontal_history 
WHERE exists (SELECT * 
              FROM history_jobs_to_purge AS H2
              WHERE jobs_horizontal_history.scheddname = H2.scheddname AND
		    jobs_horizontal_history.scheddbirthdate = H2.scheddbirthdate AND
                    jobs_horizontal_history.cluster_id = H2.cluster_id AND
                    jobs_horizontal_history.proc_id = H2.proc_id);


-- purge log thrown events older than jobHistoryDuration
-- The thrown table doesn't fall precisely into any of the categories 
-- but we don't want the table to grow unbounded either.
DELETE FROM throwns
WHERE throwns.throwtime < 
     (current_timestamp - 
       cast (jobHistoryDuration || ' day' as interval));

-- purge sql error events older than jobHistoryDuration
-- The error_sqllogs table doesn't fall precisely into any of the categories, 
-- it may contain information about job history log that causes a sql error.
-- We don't want the table to grow unbounded either.
DELETE FROM error_sqllogs 
WHERE error_sqllogs.lastmodified < 
     (current_timestamp - 
       cast (jobHistoryDuration || ' day' as interval));

TRUNCATE TABLE history_jobs_to_purge;

/* lastly check if db size is above 75 percentage of specified limit */
-- one caveat: index size is not counted in the usage calculation
-- analyze tables first to have correct statistics 

-- without any parameters, meaning, analyze all tables in database
ANALYZE;

SELECT ROUND(SUM(relpages)*8192/(1024*1024)) INTO totalUsedMB
FROM pg_class
WHERE relname IN ('procads_vertical', 'jobs_vertical_history', 'clusterads_vertical', 'procads_horizontal', 'clusterads_horizontal', 'jobs_horizontal_history', 'files', 'fileusages', 'submitters_horizontal', 'runs', 'machines_vertical', 'machines_horizontal', 'daemons_vertical', 'daemons_horizontal', 'transfers', 'submitters_horizontal_history', 'rejects', 'matches', 'machines_vertical_history', 'machines_horizontal_history', 'events', 'daemons_vertical_history', 'daemons_horizontal_history');

RAISE NOTICE 'totalUsedMB=% MegaBytes', totalUsedMB;

UPDATE quilldbmonitor SET dbsize = totalUsedMB;

-- end timer
select into end_time timeofday();


-- finally record this in the maintenance_log table 
INSERT INTO maintenance_log(eventid,eventts,eventdur) 
VALUES(1, timestamp with time zone 'now', end_time-start_time);

return 1;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION quill_reindextables() RETURNS  int AS $$
DECLARE
start_time timestamp with time zone;
end_time timestamp with time zone;
BEGIN

-- start timer
select into start_time timeofday();

reindex table error_sqllogs;
reindex table jobqueuepollinginfo;
reindex table currencies;
reindex table daemons_horizontal;
reindex table daemons_vertical;
reindex table submitters_horizontal;
reindex table machines_horizontal;
reindex table machines_vertical;
reindex table clusterads_horizontal;
reindex table clusterads_vertical;
reindex table procads_horizontal;
reindex table procads_vertical;
reindex table jobs_horizontal_history;
reindex table runs;
-- end timer
select into end_time timeofday();

-- finally record this in the maintenance_log table 
INSERT INTO maintenance_log(eventid,eventts,eventdur) 
VALUES(2, timestamp with time zone 'now', end_time-start_time);

return 1;
END;
$$ LANGUAGE plpgsql;


-- grant read access on relevant tables to quillreader
grant select on cdb_users to quillreader;
grant select on transfers to quillreader;
grant select on files to quillreader;
grant select on fileusages to quillreader;
grant select on machines_vertical to quillreader;
grant select on machines_vertical_history to quillreader;
grant select on machines_horizontal_history to quillreader;
grant select on machines_horizontal to quillreader;
grant select on clusterads_horizontal to quillreader;
grant select on procads_horizontal to quillreader;
grant select on clusterads_vertical to quillreader;
grant select on procads_vertical to quillreader;
grant select on jobs_vertical_history to quillreader;
grant select on jobs_horizontal_history to quillreader;
grant select on runs to quillreader;
grant select on rejects to quillreader;
grant select on matches to quillreader;
grant select on agg_user_jobs_waiting to quillreader;
grant select on agg_user_jobs_held to quillreader;
grant select on agg_user_jobs_running to quillreader;
grant select on l_jobstatus to quillreader;
grant select on throwns to quillreader;
grant select on events to quillreader;
grant select on l_eventtype to quillreader;
grant select on generic_messages to quillreader;
grant select on jobqueuepollinginfo to quillreader;
grant select on currencies to quillreader;
grant select on daemons_horizontal to quillreader;
grant select on daemons_vertical to quillreader;
grant select on daemons_horizontal_history to quillreader;
grant select on daemons_vertical_history to quillreader;
grant select on submitters_horizontal to quillreader;
grant select on submitters_horizontal_history to quillreader;
grant select on error_sqllogs to quillreader;
grant select on agg_user_jobs_fin_last_day to quillreader;
grant select on history_jobs_flocked_in to quillreader;
grant select on current_jobs_flocked_in to quillreader;
grant select on history_jobs_flocked_out to quillreader;
grant select on current_jobs_flocked_out to quillreader;
grant select on quilldbmonitor to quillreader;
grant select on maintenance_log to quillreader;

#END NOPARSE

#END IF

#IF DROP

# DROP ############################################################

#NOPARSE

DROP FUNCTION quill_purgehistory(resourceHistoryDuration integer, runHistoryDuration integer, jobHistoryDuration integer);

#END NOPARSE

#END IF
