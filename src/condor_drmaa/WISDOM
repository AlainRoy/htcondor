Last Update: 2/12/2004
This document contains some wisdom regarding the DRMAA library development.

SPECIFICATIONS:
  The work so far was developed by the following two specifications:
 Distributed Resource Management Application API Specification 1.0 January 2004
 DRMAA C Bindings v0.9, September 2003
Both are available at www.drmaa.org.

FILES:
  The library is organized into 4 files: libDrmaa.c and its corresponding header
file and auxDrmaa.c and its header.  
  libDrmaa.h - contains the DRMAA API as specified in C Bindings v0.9	
  libDrmaa.c - main implementation of libDrmaa.h
  auxDrmaa.h - contains global constants, #defines, etc. for library
  auxDrmaa.c - contains auxiliary methods of libDrmaa.c
In addition, all the tests and the files those tests rely on are included
in the /tests directory.

DESIGN IN A NUTSHELL:
  Aside from the complexity required by the individual API functions, there
are only a few extras in the library.  The library maintains one lock that
guards its initialization status and two linked lists of job information.
These two lists are both guarded by individual locks.  The job_info_list
holds all those jobs submitted during this "session" (see API for definition)
that are known to be still active.  The reserved_job_list holds those jobs
that are currently being operated on (e.g. wait()ed).  These lists provide
finer grained locking, which allows more thread concurrency, while 
guaranteeing mutual exclusion of the threads.

DESIGN DECISIONS:
  -Multiple "return"s.  This code has many cases, many of which require immediate
exit, ie. no further processing of function's parameters.  Disadvantage: not
the most straightforward to read.
  -Use of log files.  Jobs are run by popen()ing condor_submit with a certain
submit file.  _wait(), _synchronize() and other functions rely heavily on 
Condor's log files.  (Alternatives include asking Condor via condor_q, etc.)

JOB LISTS:
  The two job lists, job_info_list and job_reserved_list, are used to provide
fine grained concurrent access to the jobs the library knows about.
  drmaa_run_job() adds a job to the job_info_list.  dmraa_synchronize() and
drmaa_control(TERMINATE) move jobs from the job_info_list to the 
reserved_jobs_list, since the operations they perform are potentially very
slow.  The same two methods may either move the jobs back or remove them
entirely.   drmaa_wait() accesses only the job_info_list and only to remove
wait()ed jobs.  drmaa_control(HOLD or SUSPEND) accesses only the job_info_list
too.  It updates the status of an individual job depending upon the control
operation being performed.

TODO:
  See STATUS document.

RUNNING TESTS:
 - copy files for test401, test402
 - remove /tmp/drmaa directory

STATUS CODE of drmaa_wait():
  |-- (-1) -- 0 -- 1 ---------------------- 100 ---|
     abort  unkown signal                   normal
  case 1: normal exit - add 100 to exit value, ensuring result is >= 100
  case 2: exit via signal - 1 <= stat <= 99; conatains no exit() result info 
  case 3: unknown - 0; contains no exit() result info 
  case 4: aborted - -1; contains no exit() result info 
