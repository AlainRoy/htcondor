Hawkeye v0.1 Release Notes

1. Hawkeye Installation instructions

1.1 By Hand
Enclosed in this tarball there is a Hawkeye tarball.  To install
this, you can create a 'hawkeye' user, or run as a normal user.
Do the following:
 $ mkdir /home/hawkeye
 $ cd /home/hawkeye
-or-
 $ mkdir ~/hawkeye
 $ cd ~/hawkeye

Then:
 $ tar xfz hawkeye-linux-0.1.tar.gz
 $ mkdir log execute spool
 
In this directory, you'll find the following created:
 bin
 sbin
 etc
 modules
 hawkeye_config

1.2 Using hawkeye_install
Run the ./hawkeye_install perl script.  You can specify the target
directory on the command line; if not, it will prompt you for the
directory.

hawkeye_install will ask you questions as to which Hawkeye modules to
configure, and will generate a hawkeye_config file that matches your
answers.  You should verify that the generated hawkeye_config matches
your requirements.


2. Hawkeye Configuration

The hawkeye_config file should be editted to suit your needs.  You
should have only one collector running in your pool.  Because Hawkeye
is based on Condor, it's configuarion language is the same as
Condor's.  Read the Condor manual for general configuration
information.  Note that there's no negotiator or schedd in Hawkeye.

The bottom of the config file contains a section like:
STARTD_CRONJOBS = \
	df:df_:$(CRON)/df:5m:nokill		\
	top:top_:$(CRON)/top:0:continuous	\
	uptime:uptime_:$(CRON)/uptime:5m	\
	who:who_:$(CRON)/who:5m

These define the collection modules.  In the above example 4 are
defined (df, top, uptime, and who).  The general format is:
  module:prefix:path:period:options

module - Defines the logical name of the module.  These must be
unique.

prefix - This is prepended to the attributes that the module creates
for it's ClassAd.  For example, if the prefix is "xxx_", and the
attribute is abc = "xyzzy", the attribute published to the ClassAd
will be "xxx_abc = xyzzy".  These should be unique, as well.

path - This specifies the path to run the module itself.

period - This defines the frequency with which to run the module.  0
implies "continuous mode", in which the module runs constantly
outputing data periodically (look at top for an example).  The
modifiers "s", "m", and "h" for seconds, minutes, and hours
(respectively) are recognized.  Thus 5m means run every five minutes.

options - Several options are currently defined:
  continuous - Specifies continuous mode (implied by period = 0).  If
a non-zero period is specified, then the next run will start period
time after the previous run ends.
  nokill - If, when it's time to run the module the next time (in
non-continuous mode), the job is still running, this will cause the
startd to not kill the job, and to let it continue running, instead.
By default, or with a "kill" option, the job will be killed and the
next run will start when the current run dies.


Set the HAWKEYE_CONFIG environment variable to point at the config:
 $ export HAWKEYE_CONFIG=/home/hawkeye/hawkeye_config
-or-
 $ export HAWKEYE_CONFIG=$HOME/hawkeye/hawkeye_config

You may want to add hawkeye/bin and hawkeye/sbin to your path.

Then, start the hawkeye master process:
  $ ./sbin/hawkeye_master

Verify that it's running:
  $ ps axuww|grep hawkeye
  user   11525  0.0  0.2  3592 1460 ?   S    22:55   0:00 ./sbin/hawkeye_master
  user   11526  0.0  0.3  4500 1780 ?   S    22:55   0:00 hawkeye_startd -f

Check the status:
  $ ./bin/hawkeye_status
Name          OpSys       Arch   State      Activity   LoadAv Mem   ActvtyTime

myhost        LINUX       INTEL  Owner      Idle       0.000   511  0+00:01:36

                  Machines Owner Claimed Unclaimed Matched Preempting
  INTEL/LINUX        1     1       0         0       0       0
        Total        1     1       0         0       0       0

To add more systems to your poll, set them up in a similar manner,
setting their HAWKEYE_HOST to the master machine.  Make sure that you
don't start a collector on these machines; while it won't cause any
harm, it can lead to confusion.


3. Current modules

Currently the following modules are available:
  df - Used to monitor free disk space (based on the "df" program)
  Memory Used - Monitors system memory usage
  Network Errors - Monitors the network status
  Open Files - Monitors the number of open file descriptors
  top - Monitors the top processes on the system, based on a number
     of attributes (based on the "top" program)
  uptime - Monitors the uptime and load averages of the system
     (based on the "uptime" program)
  w - Monitors the users, uptime, and load averages of the system
     (based on the "w" program)
  who - Monitors uses logged on the system (based on the "who"
      program)
  gdmphb - Monitors the status of GDMP for the US/CMS test bed


4. Creating modules

All current Hawkeye modules are either shell or perl scripts, although
there is no reason that they need to be scripts.  All scripts need to
output one or more "attribute / value" pairs, one line at a time.

At the end of each ClassAd, a line starting with a "-" should
be generated.  While optional for "periodic" modules, This line is
required for continuous modules (to separate the ClassAds).  In
general, for periodic modules, it should be the last output:

  attr1 = value1
  attr2 = value2
  -

For string (non-numeric) values, the string must be enclosed in double
quotes:
  stringattr = "string"

Modules that produce an array of like values should (by convention)
also produce an INDEX attribute:
  list_1 = value1
  list_2 = value2
  list_3 = value3
  INDEX = "1 2 3"
  -

If multiple attributes are produced for each of these, then a (again,
by convention), a FIELDS attribute should be produced:
  list_1_a = value1a
  list_1_b = "value1b"
  list_1_c = value1c
  list_2_a = value2a
  list_2_b = "value2b"
  list_2_c = value2c
  list_3_a = value3a
  list_3_b = "value3b"
  list_3_c = value3c
  INDEX = "1 2 3"
  FIELDS = "a b c"
  -

The 'top' and 'df' modules produce these both, and are good (although
complex) examples.  It may be easier to look at their outputs than the
code that actually produces it.

  list_1_a = value1a
  list_1_b = "value1b"
  list_1_c = value1c
  list_2_a = value2a
  list_2_b = "value2b"
  list_2_c = value2c
  list_3_a = value3a
  list_3_b = "value3b"
  list_3_c = value3c
  INDEX = "1 2 3"
  FIELDS = "a b c"
  -

Note that the "prefix" is prepended to the start of each attribte, so
if the prefix is "mymod_", the above will translate to the following
startd classad attribtes:

  mymod_list_1_a = value1a
  mymod_list_1_b = "value1b"
  mymod_list_1_c = value1c
  mymod_list_2_a = value2a
  mymod_list_2_b = "value2b"
  mymod_list_2_c = value2c
  mymod_list_3_a = value3a
  mymod_list_3_b = "value3b"
  mymod_list_3_c = value3c
  mymod_INDEX = "1 2 3"
  mymod_FIELDS = "a b c"

Note that the "-" is *not* inserted into the ClassAd.
