Condor daemons managed by Cluster Suite
-----------------------------------------

Overview
========
This contrib provides tools necessary to provide high availability
of condor daemons with Cluster Suite.  This replaces condor's
native High Availability mechanism for the schedd and provides High
Availability for other daemons condor does not support in a High Availability
configuration.  However, this will not replace condor's High Availability
of the Central Manager.  These tools are built on top of wallaby and
Cluster Suite tools, so working Cluster Suite and wallaby configurations
are required.

There are 2 parts to the tools that work to together to achieve High
Availability with Cluster Suite.  First, there is the condor Resource Agent
which is used like other Cluster Suite Resource Agents.  Once installed with
the other Resource Agents, the Cluster Suite tools can be used to configure
and manage cluster based configuration for condor daemons.  It is worth
noting that Cluster Suite manages the daemon not condor_master, which means
any daemon that Cluster Suite is to manage should NOT be listed in condor's
DAEMON_LIST.

The second part of the tools are the wasllby shell commands.  These are
commands that wrap wallaby and Cluster Suite tools, ensuring that a cluster
configuration is appropriately represented in wallaby and nodes in the
cluster have the proper condor configuration.  Currently, only the schedd,
job_server, and query_server are supported with these tools.

Dependencies
============
wallaby shell
ccs

Files
=====
cmd_cluster.rb - Wallaby shell commands for managing HA Schedd configurations
condor.sh      - Cluster Suite Resource Agent for condor daemons

Cluster Suite versus condor_master
==================================
Cluster Suite is an alternative to condor_master for managing high
availability configurations of condor daemons.  The key differences are:
  * Cluster Suite's rgmanager uses a Resource Agent to manage a daemon
    instance whereas the condor_master manages the daemon instance.
  * A daemon run by Cluster Suite does not rely on a lock file to
    ensure only 1 daemon instance per configuration is running whereas
    the condor_master depends on a lock file on a shared file system.
  * Cluster Suite can monitor and keep running just about any daemon in
    a High Availability configuration, whereas the condor_master only
    supports a few.
  * The wallaby shell commands configure NFS and ensure the exported directory
    is only mounted on the node running the daemon instance whereas
    the condor_master requires the shared resource be mounted on all nodes
    that could run the daemon instance.
  * The NFS mount point is managed (mounted/unmounted) by Cluster Suite
    and the daemon will only run if the NFS file system mounts
    sucessfully whereas the condor_master has no control over the shared file
    system.
  * Cluster Suite provides an optional graphical interface for managing
    numerous daemon configurations whereas condor_master is only
    configured through configuration files.

Installation
============
RPM
---
Install the condor-cluster package for Red Hat Enterprise Linux/Fedora.  This
will install the required software dependencies and the condor Cluster Suite
integration files in the correct locations.

Source
------
The Resource Agent (condor.sh) should be installed in the directory
containing other Resource Agents used by Cluster Suite
(usually /usr/share/cluster).

The wallaby shell command (cmd_cluster.rb) should be installed in the
directory containing other wallaby shell commands
(usually /usr/lib/ruby/site_ruby/<ver>/mrg/grid/config/shell).

Usage
=====
The cluster related wallaby shell commands wrap the commandline Cluter Suite
configuration tool (ccs) and interaction with wallaby to simplify configuring
High Availabilitly schedd, job_server, or query_server in Cluster Suite and
wallaby.

Common options
--------------
Almost all cluster related wallaby shell commands take the following arguments:
      --riccipassword : The ricci user password
  -n, --no-store      : Only configure the cluster, don't update the store
  -s, --store-only    : Don't configure the cluster, just update the store

cluster-add-node-to-<type>
--------------------------
This command adds a node to an existing HA daemon cluster configuration.  It
takes the common options and requires the name of the daemon configuration
and a list of nodes to add.

example: wallaby cluster-add-node-to-schedd name=schedd1 node1 node2 node3
example: wallaby cluster-add-node-to-jobserver name=js node4 node5 node6


cluster-create-<type>
---------------------
This command creates an HA daemon cluster configuration.  It takes the common
options and requires the following information about the configuration in
addition to a list of nodes:
NAME   : The unique name of the daemon configuration.  This is used to
         identify configuration parameters for the daemon instance in
         wallaby, and to tell Cluster Suite the name that should be passed to
         the condor daemon on startup.
SPOOL  : The spool directory for the daemon.  This is also the mount
         point of the NFS export.
SERVER : The server offering the NFS export.
EXPORT : The directory on the SERVER that is exported over NFS.

example: wallaby cluster-create-schedd name=schedd1 spool=/path/to/mountpoint server=NFSserver export=/path/on/NFSServer node1 node2 node3


cluster-delete-<type>
---------------------
This command deletes an HA daemon cluster configuration.  It takes the common
options and requires the name of the daemon configuration to delete.

example: cluster-delete-schedd name=schedd1


cluster-remove-node-from-<type>
-------------------------------
This command removes a node from an existing HA daemon cluster configuration.
It takes the common options and requires the name of the daemon configuration
and a list of nodes to remove.

example: wallaby cluster-remove-node-from-schedd name=schedd1 node1 node2 node3


cluster-sync-to-store
---------------------
This command replaces HA daemon configuration(s) in wallaby with the cluster
configuration.  It takes no options and requires no arguments.

example: wallaby cluster-sync-to-store
