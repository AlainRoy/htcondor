SRC_DIR = $(SRC_TREE)/classad

/* select required features */

#define COLLECTIONS

VENDOR_C_FLAGS = -D$(ARCH_FLAG)=$(ARCH_FLAG) -D$(OS_FLAG)=$(OS_FLAG) -DHAVE_CONFIG_H -I. -I..
STD_LIBS =
WRAP_LDFLAGS =

LOCAL_FLAGS = \
	-DWANT_CLASSAD_NAMESPACE -DDISABLE_DLOPEN_CHECK $(CONFIGURE_PCRE_CFLAGS) -O2
C_PLUS_FLAGS 	= -Wall $(STD_C_PLUS_FLAGS) $(LOCAL_FLAGS)
CFLAGS 		= -Wall $(STD_C_FLAGS) $(LOCAL_FLAGS)


/* The basic classad source and object files */
CLASSAD_SRC_0 	= new_classad_debug.cpp lexer.cpp lexerSource.cpp \
	source.cpp new_classad_operators.cpp attrrefs.cpp fnCall.cpp   \
	literals.cpp exprTree.cpp new_classad.cpp exprList.cpp \
	new_classad_value.cpp \
	sink.cpp matchClassad.cpp      \
	new_classad_util.cpp xmlLexer.cpp xmlSink.cpp xmlSource.cpp \
	cclassad.cpp
CLASSAD_OBJ_0 	= new_classad_debug.o lexer.o lexerSource.o source.o \
	new_classad_operators.o attrrefs.o fnCall.o   \
	literals.o exprTree.o new_classad.o exprList.o new_classad_value.o \
	sink.o  matchClassad.o     \
	new_classad_util.o xmlLexer.o xmlSink.o xmlSource.o cclassad.o


/* Are collections required? */
#if defined(COLLECTIONS)
CLASSAD_SRC_1	= $(CLASSAD_SRC_0) view.cpp collection.cpp \
	collectionBase.cpp   \
	transaction.cpp     \
	query.cpp \
	indexfile.cpp
CLASSAD_OBJ_1	= $(CLASSAD_OBJ_0) view.o collection.o collectionBase.o   \
	transaction.o     \
	query.o \
	indexfile.o
#else
CLASSAD_SRC_1		= $(CLASSAD_SRC_0)
CLASSAD_OBJ_1		= $(CLASSAD_OBJ_0)
#endif


/* Are experimental features required? */
#if defined(EXPERIMENTAL)
CLASSAD_SRC_2	= $(CLASSAD_SRC_1) rectangle.cpp intervalTree.cpp compress.cpp\
					queryProcessor.cpp exp-inst.cpp
CLASSAD_OBJ_2	= $(CLASSAD_OBJ_1) rectangle.o intervalTree.o compress.o\
					queryProcessor.o exp-inst.o
#else
CLASSAD_SRC_2	= $(CLASSAD_SRC_1)
CLASSAD_OBJ_2	= $(CLASSAD_OBJ_1)
#endif

SRC = $(CLASSAD_SRC_2)
OBJ = $(CLASSAD_OBJ_2)

LIB_BASE =  ./libclassad_ns.a $(STLPORT_LIB)

LIB = $(LIB_BASE) $(CONFIGURE_PCRE_LDFLAGS) $(PCRE_LIB)

/* the main condor library target */
all_target(libclassad_ns.a classad_functional_tester classad_unit_tester classad_version test_xml extra_tests)
library_target(libclassad_ns.a,$(OBJ))

release:: all
stripped:: all
static:: all
testbin:: all

/* template instantiations go in here */

/* Standalone distribution of classads/collections */
DIST_VERSION = 1.0.4
DISTRIBUTION_DIR = classads-$(DIST_VERSION)

DIST_FILES = 								\
	attrrefs.cpp new_classad.cpp classad_functional_tester.cpp	\
	classad_unit_tester.cpp classad_version.cpp collection.cpp	\
	collectionBase.cpp cxi.cpp new_classad_debug.cpp exprList.cpp	\
	exprTree.cpp extra_tests.cpp fnCall.cpp indexfile.cpp 		\
	instantiations.cpp lexer.cpp lexerSource.cpp literals.cpp	\
	matchClassad.cpp new_classad_operators.cpp query.cpp sample.cpp	\
	shared.cpp sink.cpp source.cpp test_instantiations.cpp		\
	test_xml.cpp tests.txt transaction.cpp new_classad_util.cpp 	\
	new_classad_value.cpp view.cpp xmlLexer.cpp xmlSink.cpp 	\
	xmlSource.cpp cclassad.cpp README CHANGELOG configure.ac 	\
	Makefile.am.m4 functional_tests.txt ClassAd.swg classads.spec	\
	classad_functional_tester.h NOTICE.txt LICENSE-2.0.txt

H_FILES = 								\
	classad/attrrefs.h classad/cclassad.h				\
	classad/classad_distribution.h classad/classadErrno.h		\
	classad/classad.h classad/classadItor.h classad/classad_stl.h	\
	classad/collectionBase.h classad/collection.h classad/common.h	\
	classad/debug.h classad/exprList.h classad/exprTree.h		\
	classad/fnCall.h classad/indexfile.h classad/lexer.h		\
	classad/lexerSource.h classad/literals.h			\
	classad/matchClassad.h classad/operators.h classad/query.h	\
	classad/sink.h classad/source.h classad/transaction.h		\
	classad/util.h classad/value.h classad/view.h			\
	classad/xmlLexer.h classad/xmlSink.h classad/xmlSource.h

WIN32_FILES =						\
	win32/classad_dist.sln				\
	win32/classad_functional_tester.vcproj		\
	win32/classad_lib.vcproj			\
	win32/classad_unit_tester.vcproj

dist: $(DIST_FILES)
	chmod 664 $(DIST_FILES)
	chmod 664 $(WIN32_FILES)
	rm -rf $(DISTRIBUTION_DIR) *.gz
	mkdir $(DISTRIBUTION_DIR)
	mkdir $(DISTRIBUTION_DIR)/win32
	mkdir -p $(DISTRIBUTION_DIR)/perl/lib/ClassAd
	mkdir $(DISTRIBUTION_DIR)/perl/t
	mkdir $(DISTRIBUTION_DIR)/classad
	cp build_external $(DISTRIBUTION_DIR)/build_classads-$(DIST_VERSION)
	chmod 755 $(DISTRIBUTION_DIR)/build_classads-$(DIST_VERSION)
	cp $(DIST_FILES) $(DISTRIBUTION_DIR)
	cp $(H_FILES) $(DISTRIBUTION_DIR)/classad
	cp $(WIN32_FILES) $(DISTRIBUTION_DIR)/win32
# Originally this line was simpler, but it ended in an asterisk,
# and that caused condor_imake problems.
	find $(DISTRIBUTION_DIR)/win32/ -type f | xargs unix2dos
	cp perl/Simple.pm $(DISTRIBUTION_DIR)/perl/lib/ClassAd
	cp perl/basic.t $(DISTRIBUTION_DIR)/perl/t
	(cd $(DISTRIBUTION_DIR) ; m4 Makefile.am.m4 > Makefile.am)
	(cd $(DISTRIBUTION_DIR) ; chmod a-w Makefile.am)
	(cd $(DISTRIBUTION_DIR) ; autoreconf --install)
	(cd $(DISTRIBUTION_DIR) ; rm -rf autom4te.cache)
	tar cf $(DISTRIBUTION_DIR).tar $(DISTRIBUTION_DIR)
	gzip $(DISTRIBUTION_DIR).tar
	chmod 664 $(DISTRIBUTION_DIR).tar.gz

/* Rule to make documentation */
doc: html

#ifdef ENABLE_SHARED_LIBRARY_FUNCTIONS
shared:
	g++ -fPIC -shared -o libshared.so shared.cpp
#endif

/* Also depends on several header files, but I am ignoring that for now */
html_target( documentation )

clean::
	rm -f -r *.o *.gz html

/* The Classad eXpression Interpreter */
#ifdef ENABLE_SHARED_LIBRARY_FUNCTIONS
LDFLAGS =  -Xlinker --export-dynamic -ldl
#endif

c_plus_target (cxi, cxi.o, $(LIB))
c_plus_target (test_classads, test_classads.o, $(LIB))
c_plus_target (classad_functional_tester, classad_functional_tester.o, $(LIB))
c_plus_target (classad_unit_tester, classad_unit_tester.o, $(LIB))
c_plus_target (classad_version, classad_version.o, $(LIB))
c_plus_target (test_xml, test_xml.o, $(LIB))
c_plus_target (extra_tests, extra_tests.o, $(LIB))
c_plus_target (sample, sample.o, $(LIB))
c_plus_target (man_cache_test, man_cache_test.o, $(LIB))
