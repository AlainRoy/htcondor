/* soap_masterServer.cpp
   Generated by gSOAP 2.3 rev 7 from gsoap_master.h
   Copyright (C) 2001-2003 Genivia inc.
   All Rights Reserved.
*/
#include "soap_masterH.h"

SOAP_BEGIN_NAMESPACE(soap_master)

SOAP_SOURCE_STAMP("@(#) soap_masterServer.cpp ver 2.3 rev 7 2003-11-04 15:27:25 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
	unsigned int n = SOAP_MAXKEEPALIVE;
	do
	{	soap_begin(soap);
		if (!--n)
			soap->keep_alive = 0;
		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
				return soap_send_fault(soap);
			else
				continue;
		}
		if (soap_envelope_begin_in(soap) || soap_recv_header(soap) || soap_body_begin_in(soap))
			return soap_send_fault(soap);
		soap->error = soap_serve_condorCore__getInfoAd(soap);
		if (soap->error == SOAP_NO_METHOD)
			soap_serve_condorCore__getVersionString(soap);
		if (soap->error == SOAP_NO_METHOD)
			soap_serve_condorCore__getPlatformString(soap);
		if (soap->error)
			return soap_send_fault(soap);
	} while (soap->keep_alive);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorCore__getInfoAd(struct soap *soap)
{	struct condorCore__getInfoAd soap_tmp_condorCore__getInfoAd;
	struct condorCore__getInfoAdResponse soap_tmp_condorCore__getInfoAdResponse;
	soap_default_condorCore__getInfoAdResponse(soap, &soap_tmp_condorCore__getInfoAdResponse);
	soap_default_condorCore__getInfoAd(soap, &soap_tmp_condorCore__getInfoAd);
	soap_get_condorCore__getInfoAd(soap, &soap_tmp_condorCore__getInfoAd, "condorCore:getInfoAd", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorCore__getInfoAd(soap, soap_tmp_condorCore__getInfoAd._, soap_tmp_condorCore__getInfoAdResponse.ad);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorCore__getInfoAdResponse(soap, &soap_tmp_condorCore__getInfoAdResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorCore__getInfoAdResponse(soap, &soap_tmp_condorCore__getInfoAdResponse, "condorCore:getInfoAdResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorCore__getInfoAdResponse(soap, &soap_tmp_condorCore__getInfoAdResponse, "condorCore:getInfoAdResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorCore__getVersionString(struct soap *soap)
{	struct condorCore__getVersionString soap_tmp_condorCore__getVersionString;
	struct condorCore__getVersionStringResponse soap_tmp_condorCore__getVersionStringResponse;
	soap_default_condorCore__getVersionStringResponse(soap, &soap_tmp_condorCore__getVersionStringResponse);
	soap_default_condorCore__getVersionString(soap, &soap_tmp_condorCore__getVersionString);
	soap_get_condorCore__getVersionString(soap, &soap_tmp_condorCore__getVersionString, "condorCore:getVersionString", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorCore__getVersionString(soap, soap_tmp_condorCore__getVersionString._, soap_tmp_condorCore__getVersionStringResponse.verstring);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorCore__getVersionStringResponse(soap, &soap_tmp_condorCore__getVersionStringResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorCore__getVersionStringResponse(soap, &soap_tmp_condorCore__getVersionStringResponse, "condorCore:getVersionStringResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorCore__getVersionStringResponse(soap, &soap_tmp_condorCore__getVersionStringResponse, "condorCore:getVersionStringResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorCore__getPlatformString(struct soap *soap)
{	struct condorCore__getPlatformString soap_tmp_condorCore__getPlatformString;
	struct condorCore__getPlatformStringResponse soap_tmp_condorCore__getPlatformStringResponse;
	soap_default_condorCore__getPlatformStringResponse(soap, &soap_tmp_condorCore__getPlatformStringResponse);
	soap_default_condorCore__getPlatformString(soap, &soap_tmp_condorCore__getPlatformString);
	soap_get_condorCore__getPlatformString(soap, &soap_tmp_condorCore__getPlatformString, "condorCore:getPlatformString", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorCore__getPlatformString(soap, soap_tmp_condorCore__getPlatformString._, soap_tmp_condorCore__getPlatformStringResponse.verstring);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorCore__getPlatformStringResponse(soap, &soap_tmp_condorCore__getPlatformStringResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorCore__getPlatformStringResponse(soap, &soap_tmp_condorCore__getPlatformStringResponse, "condorCore:getPlatformStringResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorCore__getPlatformStringResponse(soap, &soap_tmp_condorCore__getPlatformStringResponse, "condorCore:getPlatformStringResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_END_NAMESPACE(soap_master)

/* end of soap_masterServer.cpp */
