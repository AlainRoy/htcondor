/* soap_masterC.cpp
   Generated by gSOAP 2.3 rev 7 from gsoap_master.h
   Copyright (C) 2001-2003 Genivia inc.
   All Rights Reserved.
*/
#include "soap_masterH.h"

SOAP_BEGIN_NAMESPACE(soap_master)

SOAP_SOURCE_STAMP("@(#) soap_masterC.cpp ver 2.3 rev 7 2003-11-04 15:27:25 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL);
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = (struct SOAP_ENV__Fault*)soap_malloc(soap, sizeof(struct SOAP_ENV__Fault));
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	return soap_out_SOAP_ENV__Fault(soap, "SOAP-ENV:Fault", 0, soap->fault, NULL);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_in_SOAP_ENV__Fault(soap, "SOAP-ENV:Fault", NULL, NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Detail;
	return (const char**)&soap->fault->detail;
}

#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}

SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_long:
		return soap_in_long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__float:
		return soap_in_xsd__float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__positiveInteger:
		return soap_in_xsd__positiveInteger(soap, NULL, NULL, "xsd:positiveInteger");
	case SOAP_TYPE_unsignedLONG64:
		return soap_in_unsignedLONG64(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__boolean:
		return soap_in_xsd__boolean(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_condorCore__getPlatformString:
		return soap_in_condorCore__getPlatformString(soap, NULL, NULL, "condorCore:getPlatformString");
	case SOAP_TYPE_condorCore__getPlatformStringResponse:
		return soap_in_condorCore__getPlatformStringResponse(soap, NULL, NULL, "condorCore:getPlatformStringResponse");
	case SOAP_TYPE_condorCore__getVersionString:
		return soap_in_condorCore__getVersionString(soap, NULL, NULL, "condorCore:getVersionString");
	case SOAP_TYPE_condorCore__getVersionStringResponse:
		return soap_in_condorCore__getVersionStringResponse(soap, NULL, NULL, "condorCore:getVersionStringResponse");
	case SOAP_TYPE_condorCore__getInfoAd:
		return soap_in_condorCore__getInfoAd(soap, NULL, NULL, "condorCore:getInfoAd");
	case SOAP_TYPE_condorCore__getInfoAdResponse:
		return soap_in_condorCore__getInfoAdResponse(soap, NULL, NULL, "condorCore:getInfoAdResponse");
	case SOAP_TYPE_ClassAdStructArray:
		return soap_in_ClassAdStructArray(soap, NULL, NULL, "condorCore:ClassAdStructAttr[]");
	case SOAP_TYPE_ClassAdStruct:
		return soap_in_ClassAdStruct(soap, NULL, NULL, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_condorCore__ClassAdStructAttr:
		return soap_in_condorCore__ClassAdStructAttr(soap, NULL, NULL, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_PointerToClassAdStruct:
		return soap_in_PointerToClassAdStruct(soap, NULL, NULL, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr:
		return soap_in_PointerTocondorCore__ClassAdStructAttr(soap, NULL, NULL, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_PointerTobool:
		return soap_in_PointerTobool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_PointerTofloat:
		return soap_in_PointerTofloat(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__anyURI:
	{	char **s;
		s = soap_in_xsd__anyURI(soap, NULL, NULL, "xsd:anyURI");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_xsd__string:
	{	char **s;
		s = soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
		if (!*soap->type)
			return NULL;
		if (!soap_match_tag(soap, soap->type, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:long"))
		{	*type = SOAP_TYPE_long;
			return soap_in_long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:float"))
		{	*type = SOAP_TYPE_xsd__float;
			return soap_in_xsd__float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:positiveInteger"))
		{	*type = SOAP_TYPE_xsd__positiveInteger;
			return soap_in_xsd__positiveInteger(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_unsignedLONG64;
			return soap_in_unsignedLONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:boolean"))
		{	*type = SOAP_TYPE_xsd__boolean;
			return soap_in_xsd__boolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorCore:getPlatformString"))
		{	*type = SOAP_TYPE_condorCore__getPlatformString;
			return soap_in_condorCore__getPlatformString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorCore:getPlatformStringResponse"))
		{	*type = SOAP_TYPE_condorCore__getPlatformStringResponse;
			return soap_in_condorCore__getPlatformStringResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorCore:getVersionString"))
		{	*type = SOAP_TYPE_condorCore__getVersionString;
			return soap_in_condorCore__getVersionString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorCore:getVersionStringResponse"))
		{	*type = SOAP_TYPE_condorCore__getVersionStringResponse;
			return soap_in_condorCore__getVersionStringResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorCore:getInfoAd"))
		{	*type = SOAP_TYPE_condorCore__getInfoAd;
			return soap_in_condorCore__getInfoAd(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorCore:getInfoAdResponse"))
		{	*type = SOAP_TYPE_condorCore__getInfoAdResponse;
			return soap_in_condorCore__getInfoAdResponse(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "condorCore:ClassAdStructAttr[]"))
		{	*type = SOAP_TYPE_ClassAdStructArray;
			return soap_in_ClassAdStructArray(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "condorCore:ClassAdStructAttr"))
		{	*type = SOAP_TYPE_ClassAdStruct;
			return soap_in_ClassAdStruct(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorCore:ClassAdStructAttr"))
		{	*type = SOAP_TYPE_condorCore__ClassAdStructAttr;
			return soap_in_condorCore__ClassAdStructAttr(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, soap->type, "xsd:anyURI"))
		{	char **s;
			*type = SOAP_TYPE_xsd__anyURI;
			s = soap_in_xsd__anyURI(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, soap->type, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_xsd__string;
			s = soap_in_xsd__string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, soap->type, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	return NULL;
	}
}

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{	if (soap->mode & SOAP_XML_STRICT)
		return SOAP_TAG_MISMATCH;
	if (!soap_peek_element(soap))
	{	int t;
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unknown element '%s' (level=%u, %d)\n", soap->tag, soap->level, soap->body));
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if ((soap->mode & SOAP_IO_LENGTH) ? pp->mark1 == 2 : pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_xsd__int:
		return soap_out_xsd__int(soap, tag, id, (const long *)ptr, "xsd:int");
	case SOAP_TYPE_long:
		return soap_out_long(soap, tag, id, (const long *)ptr, "xsd:long");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_xsd__float:
		return soap_out_xsd__float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__positiveInteger:
		return soap_out_xsd__positiveInteger(soap, tag, id, (const ULONG64 *)ptr, "xsd:positiveInteger");
	case SOAP_TYPE_unsignedLONG64:
		return soap_out_unsignedLONG64(soap, tag, id, (const ULONG64 *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__boolean:
		return soap_out_xsd__boolean(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_condorCore__getPlatformString:
		return soap_out_condorCore__getPlatformString(soap, tag, id, (const struct condorCore__getPlatformString *)ptr, "condorCore:getPlatformString");
	case SOAP_TYPE_condorCore__getPlatformStringResponse:
		return soap_out_condorCore__getPlatformStringResponse(soap, tag, id, (const struct condorCore__getPlatformStringResponse *)ptr, "condorCore:getPlatformStringResponse");
	case SOAP_TYPE_condorCore__getVersionString:
		return soap_out_condorCore__getVersionString(soap, tag, id, (const struct condorCore__getVersionString *)ptr, "condorCore:getVersionString");
	case SOAP_TYPE_condorCore__getVersionStringResponse:
		return soap_out_condorCore__getVersionStringResponse(soap, tag, id, (const struct condorCore__getVersionStringResponse *)ptr, "condorCore:getVersionStringResponse");
	case SOAP_TYPE_condorCore__getInfoAd:
		return soap_out_condorCore__getInfoAd(soap, tag, id, (const struct condorCore__getInfoAd *)ptr, "condorCore:getInfoAd");
	case SOAP_TYPE_condorCore__getInfoAdResponse:
		return soap_out_condorCore__getInfoAdResponse(soap, tag, id, (const struct condorCore__getInfoAdResponse *)ptr, "condorCore:getInfoAdResponse");
	case SOAP_TYPE_ClassAdStructArray:
		return soap_out_ClassAdStructArray(soap, tag, id, (const struct ClassAdStructArray *)ptr, "condorCore:ClassAdStructAttr[]");
	case SOAP_TYPE_ClassAdStruct:
		return soap_out_ClassAdStruct(soap, tag, id, (const struct ClassAdStruct *)ptr, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_condorCore__ClassAdStructAttr:
		return soap_out_condorCore__ClassAdStructAttr(soap, tag, id, (const struct condorCore__ClassAdStructAttr *)ptr, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char**)&ptr, "QName");
	case SOAP_TYPE_PointerToClassAdStruct:
		return soap_out_PointerToClassAdStruct(soap, tag, id, (struct ClassAdStruct *const*)ptr, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr:
		return soap_out_PointerTocondorCore__ClassAdStructAttr(soap, tag, id, (struct condorCore__ClassAdStructAttr *const*)ptr, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_PointerTobool:
		return soap_out_PointerTobool(soap, tag, id, (bool *const*)ptr, "xsd:boolean");
	case SOAP_TYPE_PointerTofloat:
		return soap_out_PointerTofloat(soap, tag, id, (float *const*)ptr, "xsd:float");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_xsd__anyURI:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:anyURI");
	case SOAP_TYPE_xsd__string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifndef WITH_LEANER
SOAP_FMAC3 int SOAP_FMAC4 soap_getattachments(struct soap *soap)
{
	if (!(soap->mode & SOAP_ENC_DIME))
		return SOAP_OK;
	while (soap->dime_flags & SOAP_DIME_CF)
	{	if (soap_getdimehdr(soap))
			return soap->error;
		if (soap_move(soap, soap->dime_size))
			return soap->error = SOAP_EOF;
	}
	if (soap_move(soap, ((soap->dime_size+3)&(~3))-soap_tell(soap)))
		return soap->error = SOAP_EOF;
	for (;;)
	{	if (soap_getdime(soap) || !soap->dime_id)
			break;
		switch (soap_lookup_type(soap, soap->dime_id))
		{
		case SOAP_TYPE__QName:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE__QName, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		case SOAP_TYPE_xsd__anyURI:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE_xsd__anyURI, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		case SOAP_TYPE_xsd__string:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE_xsd__string, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		case SOAP_TYPE_string:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE_string, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		default:
			soap->error = SOAP_DIME_ERROR;
		}
		if (soap->error)
			break;
	}
	if (soap->error == SOAP_EOD)
		soap->error = SOAP_OK;
	return soap->error;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putattachments(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (!(soap->mode & SOAP_ENC_DIME))
		return SOAP_OK;
	for (i = 0; i < SOAP_PTRHASH; i++)
		for (pp = soap->pht[i]; pp; pp = pp->next)
			if (pp->mark2 == 3)
				switch (pp->type)
				{
				}
		
	return SOAP_OK;
}
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_byte(struct soap *soap, char const*a)
{
	soap_reference(soap, a, SOAP_TYPE_byte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, char *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_byte);
	soap_out_byte(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_int(struct soap *soap, int const*a)
{
	soap_reference(soap, a, SOAP_TYPE_int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, int *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_int);
	soap_out_int(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__int(struct soap *soap, long *a)
{
#ifdef SOAP_DEFAULT_xsd__int
	*a = SOAP_DEFAULT_xsd__int;
#else
	*a = (long)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__int(struct soap *soap, long const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap *soap, long *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__int);
	soap_out_xsd__int(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, long *a, const char *type)
{
	return soap_inlong(soap, tag, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_long(struct soap *soap, long *a)
{
#ifdef SOAP_DEFAULT_long
	*a = SOAP_DEFAULT_long;
#else
	*a = (long)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_long(struct soap *soap, long const*a)
{
	soap_reference(soap, a, SOAP_TYPE_long);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap *soap, long *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_long);
	soap_out_long(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_long);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_long(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap *soap, const char *tag, long *a, const char *type)
{
	return soap_inlong(soap, tag, a, type, SOAP_TYPE_long);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_LONG64(struct soap *soap, LONG64 const*a)
{
	soap_reference(soap, a, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, LONG64 *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_LONG64);
	soap_out_LONG64(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	return soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__float(struct soap *soap, float *a)
{
#ifdef SOAP_DEFAULT_xsd__float
	*a = SOAP_DEFAULT_xsd__float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__float(struct soap *soap, float const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__float(struct soap *soap, float *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__float);
	soap_out_xsd__float(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_xsd__float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__float(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_xsd__float(struct soap *soap, const char *tag, float *a, const char *type)
{
	return soap_infloat(soap, tag, a, type, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_float(struct soap *soap, float const*a)
{
	soap_reference(soap, a, SOAP_TYPE_float);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, float *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_float);
	soap_out_float(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{
	return soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_unsignedInt(struct soap *soap, unsigned int const*a)
{
	soap_reference(soap, a, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, unsigned int *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_unsignedInt);
	soap_out_unsignedInt(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	return soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__positiveInteger(struct soap *soap, ULONG64 *a)
{
#ifdef SOAP_DEFAULT_xsd__positiveInteger
	*a = SOAP_DEFAULT_xsd__positiveInteger;
#else
	*a = (ULONG64)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__positiveInteger(struct soap *soap, ULONG64 const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__positiveInteger);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__positiveInteger(struct soap *soap, ULONG64 *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__positiveInteger);
	soap_out_xsd__positiveInteger(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__positiveInteger(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_xsd__positiveInteger);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_xsd__positiveInteger(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__positiveInteger(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_xsd__positiveInteger(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{
	return soap_inULONG64(soap, tag, a, type, SOAP_TYPE_xsd__positiveInteger);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap *soap, ULONG64 *a)
{
#ifdef SOAP_DEFAULT_unsignedLONG64
	*a = SOAP_DEFAULT_unsignedLONG64;
#else
	*a = (ULONG64)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_unsignedLONG64(struct soap *soap, ULONG64 const*a)
{
	soap_reference(soap, a, SOAP_TYPE_unsignedLONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap *soap, ULONG64 *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_unsignedLONG64);
	soap_out_unsignedLONG64(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_unsignedLONG64);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedLONG64(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{
	return soap_inULONG64(soap, tag, a, type, SOAP_TYPE_unsignedLONG64);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__boolean(struct soap *soap, bool *a)
{
#ifdef SOAP_DEFAULT_xsd__boolean
	*a = SOAP_DEFAULT_xsd__boolean;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__boolean(struct soap *soap, bool const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__boolean);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__boolean(struct soap *soap, bool *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__boolean);
	soap_out_xsd__boolean(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 const char* SOAP_FMAC4 soap_xsd__boolean2s(struct soap *soap, bool n)
{	switch (n)
	{
		case false: return "false";
		case true: return "true";
	}

	sprintf(soap->tmpbuf, SOAP_LONG_FORMAT, (LONG64)n);
	return soap->tmpbuf;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xsd__boolean), type);
	soap_send(soap, soap_xsd__boolean2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_xsd__boolean(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__boolean(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_s2xsd__boolean(struct soap *soap, const char *s, bool *a)
{
	if (!s)
	return SOAP_OK;
	if (!strcmp(s, "false"))
		*a = false;
	else if (!strcmp(s, "true"))
		*a = true;
	else 
	{	char *r;
		*a = (bool)strtol(s, &r, 10);
		if (*r)
			return soap->error = SOAP_TYPE_MISMATCH;
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_xsd__boolean(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
	soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (soap->body && !*soap->href)
	{	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(bool), 0);
		if (!a || soap_s2xsd__boolean(soap, soap_value(soap), a))
			return NULL;
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(bool), 0), SOAP_TYPE_xsd__boolean, sizeof(bool));
		if (soap->alloced)
			soap_default_xsd__boolean(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_bool(struct soap *soap, bool const*a)
{
	soap_reference(soap, a, SOAP_TYPE_bool);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, bool *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_bool);
	soap_out_bool(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 const char* SOAP_FMAC4 soap_bool2s(struct soap *soap, bool n)
{	switch (n)
	{
		case false: return "false";
		case true: return "true";
	}

	sprintf(soap->tmpbuf, SOAP_LONG_FORMAT, (LONG64)n);
	return soap->tmpbuf;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type);
	soap_send(soap, soap_bool2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	if (!s)
	return SOAP_OK;
	if (!strcmp(s, "false"))
		*a = false;
	else if (!strcmp(s, "true"))
		*a = true;
	else 
	{	char *r;
		*a = (bool)strtol(s, &r, 10);
		if (*r)
			return soap->error = SOAP_TYPE_MISMATCH;
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
	soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (soap->body && !*soap->href)
	{	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0);
		if (!a || soap_s2bool(soap, soap_value(soap), a))
			return NULL;
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0), SOAP_TYPE_bool, sizeof(bool));
		if (soap->alloced)
			soap_default_bool(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_SOAP_ENV__Fault))
		soap_mark_SOAP_ENV__Fault(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	soap_embedded(soap, &a->faultcode, SOAP_TYPE__QName);
	soap_mark__QName(soap, &a->faultcode);
	soap_embedded(soap, &a->faultstring, SOAP_TYPE_string);
	soap_mark_string(soap, &a->faultstring);
	soap_embedded(soap, &a->faultactor, SOAP_TYPE_string);
	soap_mark_string(soap, &a->faultactor);
	soap_embedded(soap, &a->detail, SOAP_TYPE_string);
	soap_mark_string(soap, &a->detail);
	soap_embedded(soap, &a->SOAP_ENV__Code, SOAP_TYPE_PointerToSOAP_ENV__Code);
	soap_mark_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_embedded(soap, &a->SOAP_ENV__Reason, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Reason);
	soap_embedded(soap, &a->SOAP_ENV__Detail, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	soap_default_string(soap, &a->detail);
	soap_default_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_default_string(soap, &a->SOAP_ENV__Reason);
	soap_default_string(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_SOAP_ENV__Fault);
	soap_out_SOAP_ENV__Fault(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type);
	soap_out__QName(soap, "faultcode", -1, &a->faultcode, "");
	soap_out_string(soap, "faultstring", -1, &a->faultstring, "");
	soap_out_string(soap, "faultactor", -1, &a->faultactor, "");
	soap_out_string(soap, "detail", -1, &a->detail, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, "");
	soap_out_string(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, "");
	soap_out_string(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_SOAP_ENV__Fault(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode = 0;
					continue;
				}
			if (soap_flag_faultstring && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "faultstring", &a->faultstring, ""))
				{	soap_flag_faultstring = 0;
					continue;
				}
			if (soap_flag_faultactor && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "faultactor", &a->faultactor, ""))
				{	soap_flag_faultactor = 0;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "detail", &a->detail, ""))
				{	soap_flag_detail = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0), SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault));
		if (soap->alloced)
			soap_default_SOAP_ENV__Fault(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_SOAP_ENV__Code))
		soap_mark_SOAP_ENV__Code(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	soap_embedded(soap, &a->SOAP_ENV__Value, SOAP_TYPE__QName);
	soap_mark__QName(soap, &a->SOAP_ENV__Value);
	soap_embedded(soap, &a->SOAP_ENV__Node, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Node);
	soap_embedded(soap, &a->SOAP_ENV__Role, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Role);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_SOAP_ENV__Code);
	soap_out_SOAP_ENV__Code(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type);
	soap_out__QName(soap, "SOAP-ENV:Value", -1, &a->SOAP_ENV__Value, "");
	soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, "");
	soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_SOAP_ENV__Code(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, ""))
				{	soap_flag_SOAP_ENV__Node = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, ""))
				{	soap_flag_SOAP_ENV__Role = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0), SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code));
		if (soap->alloced)
			soap_default_SOAP_ENV__Code(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_SOAP_ENV__Header))
		soap_mark_SOAP_ENV__Header(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	/* transient dummy skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	/* transient dummy skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_SOAP_ENV__Header);
	soap_out_SOAP_ENV__Header(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type);
	/* transient dummy skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_SOAP_ENV__Header(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
		/* transient dummy skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0), SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header));
		if (soap->alloced)
			soap_default_SOAP_ENV__Header(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__getPlatformString(struct soap *soap, struct condorCore__getPlatformString const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorCore__getPlatformString))
		soap_mark_condorCore__getPlatformString(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorCore__getPlatformString(struct soap *soap, const struct condorCore__getPlatformString *a)
{
	/* transient _ skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__getPlatformString(struct soap *soap, struct condorCore__getPlatformString *a)
{
	/* transient _ skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__getPlatformString(struct soap *soap, struct condorCore__getPlatformString *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__getPlatformString);
	soap_out_condorCore__getPlatformString(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__getPlatformString(struct soap *soap, const char *tag, int id, const struct condorCore__getPlatformString *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__getPlatformString), type);
	/* transient _ skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorCore__getPlatformString * SOAP_FMAC4 soap_get_condorCore__getPlatformString(struct soap *soap, struct condorCore__getPlatformString *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__getPlatformString(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__getPlatformString * SOAP_FMAC4 soap_in_condorCore__getPlatformString(struct soap *soap, const char *tag, struct condorCore__getPlatformString *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorCore__getPlatformString *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getPlatformString, sizeof(struct condorCore__getPlatformString), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorCore__getPlatformString(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _ skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorCore__getPlatformString *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getPlatformString, sizeof(struct condorCore__getPlatformString), 0), SOAP_TYPE_condorCore__getPlatformString, sizeof(struct condorCore__getPlatformString));
		if (soap->alloced)
			soap_default_condorCore__getPlatformString(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__getPlatformStringResponse(struct soap *soap, struct condorCore__getPlatformStringResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorCore__getPlatformStringResponse))
		soap_mark_condorCore__getPlatformStringResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorCore__getPlatformStringResponse(struct soap *soap, const struct condorCore__getPlatformStringResponse *a)
{
	soap_embedded(soap, &a->verstring, SOAP_TYPE_string);
	soap_mark_string(soap, &a->verstring);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__getPlatformStringResponse(struct soap *soap, struct condorCore__getPlatformStringResponse *a)
{
	soap_default_string(soap, &a->verstring);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__getPlatformStringResponse(struct soap *soap, struct condorCore__getPlatformStringResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__getPlatformStringResponse);
	soap_out_condorCore__getPlatformStringResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__getPlatformStringResponse(struct soap *soap, const char *tag, int id, const struct condorCore__getPlatformStringResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__getPlatformStringResponse), type);
	if (a->verstring)
		soap_element_result(soap, "verstring");
	soap_out_string(soap, "verstring", -1, &a->verstring, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorCore__getPlatformStringResponse * SOAP_FMAC4 soap_get_condorCore__getPlatformStringResponse(struct soap *soap, struct condorCore__getPlatformStringResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__getPlatformStringResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__getPlatformStringResponse * SOAP_FMAC4 soap_in_condorCore__getPlatformStringResponse(struct soap *soap, const char *tag, struct condorCore__getPlatformStringResponse *a, const char *type)
{
	short soap_flag_verstring = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorCore__getPlatformStringResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getPlatformStringResponse, sizeof(struct condorCore__getPlatformStringResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorCore__getPlatformStringResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_verstring && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "verstring", &a->verstring, ""))
				{	soap_flag_verstring = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorCore__getPlatformStringResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getPlatformStringResponse, sizeof(struct condorCore__getPlatformStringResponse), 0), SOAP_TYPE_condorCore__getPlatformStringResponse, sizeof(struct condorCore__getPlatformStringResponse));
		if (soap->alloced)
			soap_default_condorCore__getPlatformStringResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__getVersionString(struct soap *soap, struct condorCore__getVersionString const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorCore__getVersionString))
		soap_mark_condorCore__getVersionString(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorCore__getVersionString(struct soap *soap, const struct condorCore__getVersionString *a)
{
	/* transient _ skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__getVersionString(struct soap *soap, struct condorCore__getVersionString *a)
{
	/* transient _ skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__getVersionString(struct soap *soap, struct condorCore__getVersionString *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__getVersionString);
	soap_out_condorCore__getVersionString(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__getVersionString(struct soap *soap, const char *tag, int id, const struct condorCore__getVersionString *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__getVersionString), type);
	/* transient _ skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorCore__getVersionString * SOAP_FMAC4 soap_get_condorCore__getVersionString(struct soap *soap, struct condorCore__getVersionString *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__getVersionString(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__getVersionString * SOAP_FMAC4 soap_in_condorCore__getVersionString(struct soap *soap, const char *tag, struct condorCore__getVersionString *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorCore__getVersionString *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getVersionString, sizeof(struct condorCore__getVersionString), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorCore__getVersionString(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _ skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorCore__getVersionString *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getVersionString, sizeof(struct condorCore__getVersionString), 0), SOAP_TYPE_condorCore__getVersionString, sizeof(struct condorCore__getVersionString));
		if (soap->alloced)
			soap_default_condorCore__getVersionString(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__getVersionStringResponse(struct soap *soap, struct condorCore__getVersionStringResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorCore__getVersionStringResponse))
		soap_mark_condorCore__getVersionStringResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorCore__getVersionStringResponse(struct soap *soap, const struct condorCore__getVersionStringResponse *a)
{
	soap_embedded(soap, &a->verstring, SOAP_TYPE_string);
	soap_mark_string(soap, &a->verstring);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__getVersionStringResponse(struct soap *soap, struct condorCore__getVersionStringResponse *a)
{
	soap_default_string(soap, &a->verstring);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__getVersionStringResponse(struct soap *soap, struct condorCore__getVersionStringResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__getVersionStringResponse);
	soap_out_condorCore__getVersionStringResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__getVersionStringResponse(struct soap *soap, const char *tag, int id, const struct condorCore__getVersionStringResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__getVersionStringResponse), type);
	if (a->verstring)
		soap_element_result(soap, "verstring");
	soap_out_string(soap, "verstring", -1, &a->verstring, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorCore__getVersionStringResponse * SOAP_FMAC4 soap_get_condorCore__getVersionStringResponse(struct soap *soap, struct condorCore__getVersionStringResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__getVersionStringResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__getVersionStringResponse * SOAP_FMAC4 soap_in_condorCore__getVersionStringResponse(struct soap *soap, const char *tag, struct condorCore__getVersionStringResponse *a, const char *type)
{
	short soap_flag_verstring = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorCore__getVersionStringResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getVersionStringResponse, sizeof(struct condorCore__getVersionStringResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorCore__getVersionStringResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_verstring && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "verstring", &a->verstring, ""))
				{	soap_flag_verstring = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorCore__getVersionStringResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getVersionStringResponse, sizeof(struct condorCore__getVersionStringResponse), 0), SOAP_TYPE_condorCore__getVersionStringResponse, sizeof(struct condorCore__getVersionStringResponse));
		if (soap->alloced)
			soap_default_condorCore__getVersionStringResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__getInfoAd(struct soap *soap, struct condorCore__getInfoAd const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorCore__getInfoAd))
		soap_mark_condorCore__getInfoAd(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorCore__getInfoAd(struct soap *soap, const struct condorCore__getInfoAd *a)
{
	/* transient _ skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__getInfoAd(struct soap *soap, struct condorCore__getInfoAd *a)
{
	/* transient _ skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__getInfoAd(struct soap *soap, struct condorCore__getInfoAd *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__getInfoAd);
	soap_out_condorCore__getInfoAd(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__getInfoAd(struct soap *soap, const char *tag, int id, const struct condorCore__getInfoAd *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__getInfoAd), type);
	/* transient _ skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorCore__getInfoAd * SOAP_FMAC4 soap_get_condorCore__getInfoAd(struct soap *soap, struct condorCore__getInfoAd *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__getInfoAd(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__getInfoAd * SOAP_FMAC4 soap_in_condorCore__getInfoAd(struct soap *soap, const char *tag, struct condorCore__getInfoAd *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorCore__getInfoAd *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getInfoAd, sizeof(struct condorCore__getInfoAd), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorCore__getInfoAd(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _ skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorCore__getInfoAd *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getInfoAd, sizeof(struct condorCore__getInfoAd), 0), SOAP_TYPE_condorCore__getInfoAd, sizeof(struct condorCore__getInfoAd));
		if (soap->alloced)
			soap_default_condorCore__getInfoAd(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__getInfoAdResponse(struct soap *soap, struct condorCore__getInfoAdResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorCore__getInfoAdResponse))
		soap_mark_condorCore__getInfoAdResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorCore__getInfoAdResponse(struct soap *soap, const struct condorCore__getInfoAdResponse *a)
{
	soap_embedded(soap, &a->ad, SOAP_TYPE_ClassAdStruct);
	soap_mark_ClassAdStruct(soap, &a->ad);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__getInfoAdResponse(struct soap *soap, struct condorCore__getInfoAdResponse *a)
{
	soap_default_ClassAdStruct(soap, &a->ad);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__getInfoAdResponse(struct soap *soap, struct condorCore__getInfoAdResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__getInfoAdResponse);
	soap_out_condorCore__getInfoAdResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__getInfoAdResponse(struct soap *soap, const char *tag, int id, const struct condorCore__getInfoAdResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__getInfoAdResponse), type);
	soap_element_result(soap, "ad");
	soap_out_ClassAdStruct(soap, "ad", -1, &a->ad, "condorCore:ClassAdStructAttr");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorCore__getInfoAdResponse * SOAP_FMAC4 soap_get_condorCore__getInfoAdResponse(struct soap *soap, struct condorCore__getInfoAdResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__getInfoAdResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__getInfoAdResponse * SOAP_FMAC4 soap_in_condorCore__getInfoAdResponse(struct soap *soap, const char *tag, struct condorCore__getInfoAdResponse *a, const char *type)
{
	short soap_flag_ad = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorCore__getInfoAdResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getInfoAdResponse, sizeof(struct condorCore__getInfoAdResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorCore__getInfoAdResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ad && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ClassAdStruct(soap, "ad", &a->ad, "condorCore:ClassAdStructAttr"))
				{	soap_flag_ad = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorCore__getInfoAdResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getInfoAdResponse, sizeof(struct condorCore__getInfoAdResponse), 0), SOAP_TYPE_condorCore__getInfoAdResponse, sizeof(struct condorCore__getInfoAdResponse));
		if (soap->alloced)
			soap_default_condorCore__getInfoAdResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ClassAdStructArray(struct soap *soap, struct ClassAdStructArray const*a)
{
	soap_mark_ClassAdStructArray(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_ClassAdStructArray(struct soap *soap, struct ClassAdStructArray const*a)
{
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, a->__size, SOAP_TYPE_ClassAdStructArray))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_ClassAdStruct);
			soap_mark_ClassAdStruct(soap, a->__ptr + i);
		}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ClassAdStructArray(struct soap *soap, struct ClassAdStructArray *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ClassAdStructArray(struct soap *soap, struct ClassAdStructArray *a, const char *tag, const char *type)
{
	int i = soap_embed_array(soap, (void*)a, (struct soap_array*)&a->__ptr, a->__size, tag, SOAP_TYPE_ClassAdStructArray);
	soap_out_ClassAdStructArray(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ClassAdStructArray(struct soap *soap, const char *tag, int id, const struct ClassAdStructArray *a, const char *type)
{
	int i;
	struct soap_plist *pp;
	int n = a->__size;
	char *t = soap_putsize(soap, type, a->__size);
	i = soap_array_pointer_lookup(soap, a, (struct soap_array*)&a->__ptr, n, SOAP_TYPE_ClassAdStructArray, &pp);
	if (!a->__ptr)
	{	soap_element_null(soap, tag, i, t);
		return SOAP_OK;
	}
	if (id <= 0 && i)
	{	if (soap_is_embedded(soap, pp))
		{	soap_element_ref(soap, tag, 0, i);
			return SOAP_OK;
		}
		if (soap_is_single(soap, pp))
			i = 0;
	}
	else if (id > 0)
		i = id;
	soap_array_begin_out(soap, tag, i, t, NULL);
	if (i)
		soap_set_embedded(soap, pp);
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_ClassAdStruct(soap, "item", 0, &a->__ptr[i], "condorCore:ClassAdStructAttr");
	}
	soap->position = 0;
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ClassAdStructArray * SOAP_FMAC4 soap_get_ClassAdStructArray(struct soap *soap, struct ClassAdStructArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_ClassAdStructArray(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ClassAdStructArray * SOAP_FMAC4 soap_in_ClassAdStructArray(struct soap *soap, const char *tag, struct ClassAdStructArray *a, const char *type)
{	int i, j;
	struct ClassAdStruct *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if ((a = (struct ClassAdStructArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStructArray, sizeof(struct ClassAdStructArray), 0)))
			soap_default_ClassAdStructArray(soap, a);
			if (soap->body && soap_element_end_in(soap, tag))
				return NULL;
	}
	else if (!*soap->href)
	{	if (!(a = (struct ClassAdStructArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStructArray, sizeof(struct ClassAdStructArray), 0)))
			return NULL;
		if (soap->alloced)
			soap_default_ClassAdStructArray(soap, a);
		if (soap->body)
		{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (struct ClassAdStruct *)soap_malloc(soap, sizeof(struct ClassAdStruct) * a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_ClassAdStruct(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
					return NULL;
					}
				}
				if (!soap_in_ClassAdStruct(soap, NULL, a->__ptr + i, "condorCore:ClassAdStructAttr"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (struct ClassAdStruct *)soap_push_block(soap, sizeof(struct ClassAdStruct));
				if (!p)
					return NULL;
				soap_default_ClassAdStruct(soap, p);
				if (!soap_in_ClassAdStruct(soap, NULL, p, "condorCore:ClassAdStructAttr"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
			soap_pop_block(soap);
			a->__ptr = (struct ClassAdStruct *)soap_malloc(soap, soap->blist->size);
			soap_store_block(soap, (char*)a->__ptr);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct ClassAdStructArray *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStructArray, sizeof(struct ClassAdStructArray), 0), SOAP_TYPE_ClassAdStructArray, sizeof(struct ClassAdStructArray));
		if (soap->alloced)
			soap_default_ClassAdStructArray(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ClassAdStruct(struct soap *soap, struct ClassAdStruct const*a)
{
	soap_mark_ClassAdStruct(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_ClassAdStruct(struct soap *soap, struct ClassAdStruct const*a)
{
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, a->__size, SOAP_TYPE_ClassAdStruct))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_condorCore__ClassAdStructAttr);
			soap_mark_condorCore__ClassAdStructAttr(soap, a->__ptr + i);
		}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ClassAdStruct(struct soap *soap, struct ClassAdStruct *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ClassAdStruct(struct soap *soap, struct ClassAdStruct *a, const char *tag, const char *type)
{
	int i = soap_embed_array(soap, (void*)a, (struct soap_array*)&a->__ptr, a->__size, tag, SOAP_TYPE_ClassAdStruct);
	soap_out_ClassAdStruct(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ClassAdStruct(struct soap *soap, const char *tag, int id, const struct ClassAdStruct *a, const char *type)
{
	int i;
	struct soap_plist *pp;
	int n = a->__size;
	char *t = soap_putsize(soap, type, a->__size);
	i = soap_array_pointer_lookup(soap, a, (struct soap_array*)&a->__ptr, n, SOAP_TYPE_ClassAdStruct, &pp);
	if (!a->__ptr)
	{	soap_element_null(soap, tag, i, t);
		return SOAP_OK;
	}
	if (id <= 0 && i)
	{	if (soap_is_embedded(soap, pp))
		{	soap_element_ref(soap, tag, 0, i);
			return SOAP_OK;
		}
		if (soap_is_single(soap, pp))
			i = 0;
	}
	else if (id > 0)
		i = id;
	soap_array_begin_out(soap, tag, i, t, NULL);
	if (i)
		soap_set_embedded(soap, pp);
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_condorCore__ClassAdStructAttr(soap, "item", 0, &a->__ptr[i], "condorCore:ClassAdStructAttr");
	}
	soap->position = 0;
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ClassAdStruct * SOAP_FMAC4 soap_get_ClassAdStruct(struct soap *soap, struct ClassAdStruct *p, const char *tag, const char *type)
{
	if ((p = soap_in_ClassAdStruct(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ClassAdStruct * SOAP_FMAC4 soap_in_ClassAdStruct(struct soap *soap, const char *tag, struct ClassAdStruct *a, const char *type)
{	int i, j;
	struct condorCore__ClassAdStructAttr *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if ((a = (struct ClassAdStruct *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct), 0)))
			soap_default_ClassAdStruct(soap, a);
			if (soap->body && soap_element_end_in(soap, tag))
				return NULL;
	}
	else if (!*soap->href)
	{	if (!(a = (struct ClassAdStruct *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct), 0)))
			return NULL;
		if (soap->alloced)
			soap_default_ClassAdStruct(soap, a);
		if (soap->body)
		{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (struct condorCore__ClassAdStructAttr *)soap_malloc(soap, sizeof(struct condorCore__ClassAdStructAttr) * a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_condorCore__ClassAdStructAttr(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
					return NULL;
					}
				}
				if (!soap_in_condorCore__ClassAdStructAttr(soap, NULL, a->__ptr + i, "condorCore:ClassAdStructAttr"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (struct condorCore__ClassAdStructAttr *)soap_push_block(soap, sizeof(struct condorCore__ClassAdStructAttr));
				if (!p)
					return NULL;
				soap_default_condorCore__ClassAdStructAttr(soap, p);
				if (!soap_in_condorCore__ClassAdStructAttr(soap, NULL, p, "condorCore:ClassAdStructAttr"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
			soap_pop_block(soap);
			a->__ptr = (struct condorCore__ClassAdStructAttr *)soap_malloc(soap, soap->blist->size);
			soap_store_block(soap, (char*)a->__ptr);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct ClassAdStruct *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct), 0), SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct));
		if (soap->alloced)
			soap_default_ClassAdStruct(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorCore__ClassAdStructAttr))
		soap_mark_condorCore__ClassAdStructAttr(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorCore__ClassAdStructAttr(struct soap *soap, const struct condorCore__ClassAdStructAttr *a)
{
	soap_embedded(soap, &a->name, SOAP_TYPE_string);
	soap_mark_string(soap, &a->name);
	soap_embedded(soap, &a->type, SOAP_TYPE_byte);
	soap_embedded(soap, &a->value, SOAP_TYPE_string);
	soap_mark_string(soap, &a->value);
	soap_embedded(soap, &a->valueInt, SOAP_TYPE_PointerToint);
	soap_mark_PointerToint(soap, &a->valueInt);
	soap_embedded(soap, &a->valueFloat, SOAP_TYPE_PointerTofloat);
	soap_mark_PointerTofloat(soap, &a->valueFloat);
	soap_embedded(soap, &a->valueBool, SOAP_TYPE_PointerTobool);
	soap_mark_PointerTobool(soap, &a->valueBool);
	soap_embedded(soap, &a->valueExpr, SOAP_TYPE_string);
	soap_mark_string(soap, &a->valueExpr);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr *a)
{
	soap_default_string(soap, &a->name);
	soap_default_byte(soap, &a->type);
	soap_default_string(soap, &a->value);
	soap_default_PointerToint(soap, &a->valueInt);
	soap_default_PointerTofloat(soap, &a->valueFloat);
	soap_default_PointerTobool(soap, &a->valueBool);
	soap_default_string(soap, &a->valueExpr);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__ClassAdStructAttr);
	soap_out_condorCore__ClassAdStructAttr(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__ClassAdStructAttr(struct soap *soap, const char *tag, int id, const struct condorCore__ClassAdStructAttr *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__ClassAdStructAttr), type);
	soap_out_string(soap, "name", -1, &a->name, "");
	soap_out_byte(soap, "type", -1, &a->type, "");
	soap_out_string(soap, "value", -1, &a->value, "");
	soap_out_PointerToint(soap, "valueInt", -1, &a->valueInt, "");
	soap_out_PointerTofloat(soap, "valueFloat", -1, &a->valueFloat, "");
	soap_out_PointerTobool(soap, "valueBool", -1, &a->valueBool, "");
	soap_out_string(soap, "valueExpr", -1, &a->valueExpr, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorCore__ClassAdStructAttr * SOAP_FMAC4 soap_get_condorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__ClassAdStructAttr(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__ClassAdStructAttr * SOAP_FMAC4 soap_in_condorCore__ClassAdStructAttr(struct soap *soap, const char *tag, struct condorCore__ClassAdStructAttr *a, const char *type)
{
	short soap_flag_name = 1, soap_flag_type = 1, soap_flag_value = 1, soap_flag_valueInt = 1, soap_flag_valueFloat = 1, soap_flag_valueBool = 1, soap_flag_valueExpr = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorCore__ClassAdStructAttr *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorCore__ClassAdStructAttr(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "name", &a->name, ""))
				{	soap_flag_name = 0;
					continue;
				}
			if (soap_flag_type && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_byte(soap, "type", &a->type, ""))
				{	soap_flag_type = 0;
					continue;
				}
			if (soap_flag_value && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "value", &a->value, ""))
				{	soap_flag_value = 0;
					continue;
				}
			if (soap_flag_valueInt && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "valueInt", &a->valueInt, ""))
				{	soap_flag_valueInt = 0;
					continue;
				}
			if (soap_flag_valueFloat && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofloat(soap, "valueFloat", &a->valueFloat, ""))
				{	soap_flag_valueFloat = 0;
					continue;
				}
			if (soap_flag_valueBool && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTobool(soap, "valueBool", &a->valueBool, ""))
				{	soap_flag_valueBool = 0;
					continue;
				}
			if (soap_flag_valueExpr && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "valueExpr", &a->valueExpr, ""))
				{	soap_flag_valueExpr = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorCore__ClassAdStructAttr *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr), 0), SOAP_TYPE_condorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr));
		if (soap->alloced)
			soap_default_condorCore__ClassAdStructAttr(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToSOAP_ENV__Code))
		soap_mark_PointerToSOAP_ENV__Code(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_mark_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	soap_out_PointerToSOAP_ENV__Code(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_SOAP_ENV__Code, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_SOAP_ENV__Code(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_SOAP_ENV__Code(soap, tag, i, *a, type);
	}
	return soap_out_SOAP_ENV__Code(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_SOAP_ENV__Code, &pp), *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	struct SOAP_ENV__Code *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct SOAP_ENV__Code **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToSOAP_ENV__Code, sizeof(struct SOAP_ENV__Code *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_SOAP_ENV__Code(soap, tag, NULL, type)))
		{	a = (struct SOAP_ENV__Code **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToSOAP_ENV__Code, sizeof(struct SOAP_ENV__Code *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToSOAP_ENV__Code, sizeof(struct SOAP_ENV__Code *), 1), SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE__QName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark__QName(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE__QName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE__QName);
	soap_out__QName(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToClassAdStruct))
		soap_mark_PointerToClassAdStruct(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct *const*a)
{
	if (*a && !soap_array_reference(soap, *a, (struct soap_array*)&(*a)->__ptr, (*a)->__size, SOAP_TYPE_ClassAdStruct))
		soap_mark_ClassAdStruct(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToClassAdStruct);
	soap_out_PointerToClassAdStruct(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToClassAdStruct(struct soap *soap, const char *tag, int id, struct ClassAdStruct *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToClassAdStruct);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_array_pointer_lookup(soap, *a, (struct soap_array*)&(*a)->__ptr, (*a)->__size, SOAP_TYPE_ClassAdStruct, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_ClassAdStruct(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_ClassAdStruct(soap, tag, i, *a, type);
	}
	return soap_out_ClassAdStruct(soap, tag, soap_array_pointer_enter(soap, *a, (struct soap_array*)&(*a)->__ptr, SOAP_TYPE_ClassAdStruct, &pp), *a, type);
}

SOAP_FMAC3 struct ClassAdStruct ** SOAP_FMAC4 soap_get_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToClassAdStruct(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ClassAdStruct ** SOAP_FMAC4 soap_in_PointerToClassAdStruct(struct soap *soap, const char *tag, struct ClassAdStruct **a, const char *type)
{
	struct ClassAdStruct *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct ClassAdStruct **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToClassAdStruct, sizeof(struct ClassAdStruct *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_ClassAdStruct(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_ClassAdStruct(soap, tag, NULL, type)))
		{	a = (struct ClassAdStruct **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToClassAdStruct, sizeof(struct ClassAdStruct *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct ClassAdStruct **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToClassAdStruct, sizeof(struct ClassAdStruct *), 1), SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr))
		soap_mark_PointerTocondorCore__ClassAdStructAttr(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_condorCore__ClassAdStructAttr))
		soap_mark_condorCore__ClassAdStructAttr(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr);
	soap_out_PointerTocondorCore__ClassAdStructAttr(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, const char *tag, int id, struct condorCore__ClassAdStructAttr *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_condorCore__ClassAdStructAttr, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_condorCore__ClassAdStructAttr(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_condorCore__ClassAdStructAttr(soap, tag, i, *a, type);
	}
	return soap_out_condorCore__ClassAdStructAttr(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_condorCore__ClassAdStructAttr, &pp), *a, type);
}

SOAP_FMAC3 struct condorCore__ClassAdStructAttr ** SOAP_FMAC4 soap_get_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocondorCore__ClassAdStructAttr(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__ClassAdStructAttr ** SOAP_FMAC4 soap_in_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, const char *tag, struct condorCore__ClassAdStructAttr **a, const char *type)
{
	struct condorCore__ClassAdStructAttr *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct condorCore__ClassAdStructAttr **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_condorCore__ClassAdStructAttr(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_condorCore__ClassAdStructAttr(soap, tag, NULL, type)))
		{	a = (struct condorCore__ClassAdStructAttr **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct condorCore__ClassAdStructAttr **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr *), 1), SOAP_TYPE_condorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap *soap, bool *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerTobool))
		soap_mark_PointerTobool(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerTobool(struct soap *soap, bool *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_bool);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerTobool(struct soap *soap, bool **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap *soap, bool **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerTobool);
	soap_out_PointerTobool(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap *soap, const char *tag, int id, bool *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerTobool);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_bool, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_bool(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_bool(soap, tag, i, *a, type);
	}
	return soap_out_bool(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_bool, &pp), *a, type);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap *soap, bool **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTobool(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap *soap, const char *tag, bool **a, const char *type)
{
	bool *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (bool **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTobool, sizeof(bool *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_bool(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_bool(soap, tag, NULL, type)))
		{	a = (bool **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerTobool, sizeof(bool *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (bool **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTobool, sizeof(bool *), 1), SOAP_TYPE_bool, sizeof(bool), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofloat(struct soap *soap, float *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerTofloat))
		soap_mark_PointerTofloat(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerTofloat(struct soap *soap, float *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerTofloat(struct soap *soap, float **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofloat(struct soap *soap, float **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerTofloat);
	soap_out_PointerTofloat(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofloat(struct soap *soap, const char *tag, int id, float *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerTofloat);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_float, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_float(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_float(soap, tag, i, *a, type);
	}
	return soap_out_float(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_float, &pp), *a, type);
}

SOAP_FMAC3 float ** SOAP_FMAC4 soap_get_PointerTofloat(struct soap *soap, float **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofloat(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 float ** SOAP_FMAC4 soap_in_PointerTofloat(struct soap *soap, const char *tag, float **a, const char *type)
{
	float *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (float **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTofloat, sizeof(float *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_float(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_float(soap, tag, NULL, type)))
		{	a = (float **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerTofloat, sizeof(float *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (float **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTofloat, sizeof(float *), 1), SOAP_TYPE_float, sizeof(float), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToint))
		soap_mark_PointerToint(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToint(struct soap *soap, int *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToint(struct soap *soap, int **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToint);
	soap_out_PointerToint(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToint);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_int, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_int(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_int(soap, tag, i, *a, type);
	}
	return soap_out_int(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_int, &pp), *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	int *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (int **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToint, sizeof(int *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_int(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_int(soap, tag, NULL, type)))
		{	a = (int **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToint, sizeof(int *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToint, sizeof(int *), 1), SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__anyURI(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT_xsd__anyURI
	*a = SOAP_DEFAULT_xsd__anyURI;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__anyURI);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_xsd__anyURI(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__anyURI);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, char **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__anyURI);
	soap_out_xsd__anyURI(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__anyURI);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__anyURI, 1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__string(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT_xsd__string
	*a = SOAP_DEFAULT_xsd__string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_xsd__string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap *soap, char **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__string);
	soap_out_xsd__string(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__string, 1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_string);
	soap_out_string(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1);
}

SOAP_END_NAMESPACE(soap_master)

/* end of soap_masterC.cpp */
