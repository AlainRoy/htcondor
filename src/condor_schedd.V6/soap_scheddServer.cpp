/* soap_scheddServer.cpp
   Generated by gSOAP 2.5.2 from gsoap_schedd.h
   Copyright (C) 2001-2004 Genivia, Inc. All Rights Reserved.
   This software is released under the gSOAP public license and GPL.
   See README.txt for further details.
*/
#include "soap_scheddH.h"

SOAP_BEGIN_NAMESPACE(soap_schedd)

SOAP_SOURCE_STAMP("@(#) soap_scheddServer.cpp ver 2.5.2 2004-05-20 21:09:39 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
	unsigned int n = SOAP_MAXKEEPALIVE;
	do
	{	soap_begin(soap);
		if (!--n)
			soap->keep_alive = 0;
		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
				return soap_send_fault(soap);
			soap_closesock(soap);
			continue;
		}
		if (soap_envelope_begin_in(soap)
		 || soap_recv_header(soap)
		 || soap_body_begin_in(soap)
		 || soap_peek_element(soap))
			return soap_send_fault(soap);
		if (!soap_match_tag(soap, soap->tag, "condorSchedd:beginTransaction"))
			soap_serve_condorSchedd__beginTransaction(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorSchedd:commitTransaction"))
			soap_serve_condorSchedd__commitTransaction(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorSchedd:abortTransaction"))
			soap_serve_condorSchedd__abortTransaction(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorSchedd:extendTransaction"))
			soap_serve_condorSchedd__extendTransaction(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorSchedd:newCluster"))
			soap_serve_condorSchedd__newCluster(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorSchedd:removeCluster"))
			soap_serve_condorSchedd__removeCluster(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorSchedd:newJob"))
			soap_serve_condorSchedd__newJob(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorSchedd:removeJob"))
			soap_serve_condorSchedd__removeJob(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorSchedd:holdJob"))
			soap_serve_condorSchedd__holdJob(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorSchedd:releaseJob"))
			soap_serve_condorSchedd__releaseJob(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorSchedd:submit"))
			soap_serve_condorSchedd__submit(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorSchedd:getJobAds"))
			soap_serve_condorSchedd__getJobAds(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorSchedd:getJobAd"))
			soap_serve_condorSchedd__getJobAd(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorSchedd:declareFile"))
			soap_serve_condorSchedd__declareFile(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorSchedd:sendFile"))
			soap_serve_condorSchedd__sendFile(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorSchedd:getFile"))
			soap_serve_condorSchedd__getFile(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorSchedd:closeSpool"))
			soap_serve_condorSchedd__closeSpool(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorSchedd:listSpool"))
			soap_serve_condorSchedd__listSpool(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorSchedd:discoverJobRequirements"))
			soap_serve_condorSchedd__discoverJobRequirements(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorSchedd:createJobTemplate"))
			soap_serve_condorSchedd__createJobTemplate(soap);
		else 
			soap->error = SOAP_NO_METHOD;
		if (soap->error)
			return soap_send_fault(soap);
	} while (soap->keep_alive);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__beginTransaction(struct soap *soap)
{	struct condorSchedd__beginTransaction soap_tmp_condorSchedd__beginTransaction;
	struct condorSchedd__TransactionAndStatusResponse result;
	soap_default_condorSchedd__TransactionAndStatusResponse(soap, &result);
	soap_default_condorSchedd__beginTransaction(soap, &soap_tmp_condorSchedd__beginTransaction);
	soap->encodingStyle = "";
	soap_get_condorSchedd__beginTransaction(soap, &soap_tmp_condorSchedd__beginTransaction, "condorSchedd:beginTransaction", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__beginTransaction(soap, soap_tmp_condorSchedd__beginTransaction.duration, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__TransactionAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__TransactionAndStatusResponse(soap, &result, "condorSchedd:TransactionAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__TransactionAndStatusResponse(soap, &result, "condorSchedd:TransactionAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__commitTransaction(struct soap *soap)
{	struct condorSchedd__commitTransaction soap_tmp_condorSchedd__commitTransaction;
	struct condorSchedd__StatusResponse result;
	soap_default_condorSchedd__StatusResponse(soap, &result);
	soap_default_condorSchedd__commitTransaction(soap, &soap_tmp_condorSchedd__commitTransaction);
	soap->encodingStyle = "";
	soap_get_condorSchedd__commitTransaction(soap, &soap_tmp_condorSchedd__commitTransaction, "condorSchedd:commitTransaction", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__commitTransaction(soap, soap_tmp_condorSchedd__commitTransaction.transaction, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__StatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__StatusResponse(soap, &result, "condorSchedd:StatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__StatusResponse(soap, &result, "condorSchedd:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__abortTransaction(struct soap *soap)
{	struct condorSchedd__abortTransaction soap_tmp_condorSchedd__abortTransaction;
	struct condorSchedd__StatusResponse result;
	soap_default_condorSchedd__StatusResponse(soap, &result);
	soap_default_condorSchedd__abortTransaction(soap, &soap_tmp_condorSchedd__abortTransaction);
	soap->encodingStyle = "";
	soap_get_condorSchedd__abortTransaction(soap, &soap_tmp_condorSchedd__abortTransaction, "condorSchedd:abortTransaction", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__abortTransaction(soap, soap_tmp_condorSchedd__abortTransaction.transaction, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__StatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__StatusResponse(soap, &result, "condorSchedd:StatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__StatusResponse(soap, &result, "condorSchedd:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__extendTransaction(struct soap *soap)
{	struct condorSchedd__extendTransaction soap_tmp_condorSchedd__extendTransaction;
	struct condorSchedd__TransactionAndStatusResponse result;
	soap_default_condorSchedd__TransactionAndStatusResponse(soap, &result);
	soap_default_condorSchedd__extendTransaction(soap, &soap_tmp_condorSchedd__extendTransaction);
	soap->encodingStyle = "";
	soap_get_condorSchedd__extendTransaction(soap, &soap_tmp_condorSchedd__extendTransaction, "condorSchedd:extendTransaction", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__extendTransaction(soap, soap_tmp_condorSchedd__extendTransaction.transaction, soap_tmp_condorSchedd__extendTransaction.duration, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__TransactionAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__TransactionAndStatusResponse(soap, &result, "condorSchedd:TransactionAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__TransactionAndStatusResponse(soap, &result, "condorSchedd:TransactionAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__newCluster(struct soap *soap)
{	struct condorSchedd__newCluster soap_tmp_condorSchedd__newCluster;
	struct condorSchedd__IntAndStatusResponse result;
	soap_default_condorSchedd__IntAndStatusResponse(soap, &result);
	soap_default_condorSchedd__newCluster(soap, &soap_tmp_condorSchedd__newCluster);
	soap->encodingStyle = "";
	soap_get_condorSchedd__newCluster(soap, &soap_tmp_condorSchedd__newCluster, "condorSchedd:newCluster", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__newCluster(soap, soap_tmp_condorSchedd__newCluster.transaction, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__IntAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__IntAndStatusResponse(soap, &result, "condorSchedd:IntAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__IntAndStatusResponse(soap, &result, "condorSchedd:IntAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__removeCluster(struct soap *soap)
{	struct condorSchedd__removeCluster soap_tmp_condorSchedd__removeCluster;
	struct condorSchedd__StatusResponse result;
	soap_default_condorSchedd__StatusResponse(soap, &result);
	soap_default_condorSchedd__removeCluster(soap, &soap_tmp_condorSchedd__removeCluster);
	soap->encodingStyle = "";
	soap_get_condorSchedd__removeCluster(soap, &soap_tmp_condorSchedd__removeCluster, "condorSchedd:removeCluster", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__removeCluster(soap, soap_tmp_condorSchedd__removeCluster.transaction, soap_tmp_condorSchedd__removeCluster.clusterId, soap_tmp_condorSchedd__removeCluster.reason, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__StatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__StatusResponse(soap, &result, "condorSchedd:StatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__StatusResponse(soap, &result, "condorSchedd:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__newJob(struct soap *soap)
{	struct condorSchedd__newJob soap_tmp_condorSchedd__newJob;
	struct condorSchedd__IntAndStatusResponse result;
	soap_default_condorSchedd__IntAndStatusResponse(soap, &result);
	soap_default_condorSchedd__newJob(soap, &soap_tmp_condorSchedd__newJob);
	soap->encodingStyle = "";
	soap_get_condorSchedd__newJob(soap, &soap_tmp_condorSchedd__newJob, "condorSchedd:newJob", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__newJob(soap, soap_tmp_condorSchedd__newJob.transaction, soap_tmp_condorSchedd__newJob.clusterId, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__IntAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__IntAndStatusResponse(soap, &result, "condorSchedd:IntAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__IntAndStatusResponse(soap, &result, "condorSchedd:IntAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__removeJob(struct soap *soap)
{	struct condorSchedd__removeJob soap_tmp_condorSchedd__removeJob;
	struct condorSchedd__StatusResponse result;
	soap_default_condorSchedd__StatusResponse(soap, &result);
	soap_default_condorSchedd__removeJob(soap, &soap_tmp_condorSchedd__removeJob);
	soap->encodingStyle = "";
	soap_get_condorSchedd__removeJob(soap, &soap_tmp_condorSchedd__removeJob, "condorSchedd:removeJob", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__removeJob(soap, soap_tmp_condorSchedd__removeJob.transaction, soap_tmp_condorSchedd__removeJob.clusterId, soap_tmp_condorSchedd__removeJob.jobId, soap_tmp_condorSchedd__removeJob.reason, soap_tmp_condorSchedd__removeJob.force_removal, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__StatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__StatusResponse(soap, &result, "condorSchedd:StatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__StatusResponse(soap, &result, "condorSchedd:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__holdJob(struct soap *soap)
{	struct condorSchedd__holdJob soap_tmp_condorSchedd__holdJob;
	struct condorSchedd__StatusResponse result;
	soap_default_condorSchedd__StatusResponse(soap, &result);
	soap_default_condorSchedd__holdJob(soap, &soap_tmp_condorSchedd__holdJob);
	soap->encodingStyle = "";
	soap_get_condorSchedd__holdJob(soap, &soap_tmp_condorSchedd__holdJob, "condorSchedd:holdJob", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__holdJob(soap, soap_tmp_condorSchedd__holdJob.transaction, soap_tmp_condorSchedd__holdJob.clusterId, soap_tmp_condorSchedd__holdJob.jobId, soap_tmp_condorSchedd__holdJob.reason, soap_tmp_condorSchedd__holdJob.email_user, soap_tmp_condorSchedd__holdJob.email_admin, soap_tmp_condorSchedd__holdJob.system_hold, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__StatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__StatusResponse(soap, &result, "condorSchedd:StatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__StatusResponse(soap, &result, "condorSchedd:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__releaseJob(struct soap *soap)
{	struct condorSchedd__releaseJob soap_tmp_condorSchedd__releaseJob;
	struct condorSchedd__StatusResponse result;
	soap_default_condorSchedd__StatusResponse(soap, &result);
	soap_default_condorSchedd__releaseJob(soap, &soap_tmp_condorSchedd__releaseJob);
	soap->encodingStyle = "";
	soap_get_condorSchedd__releaseJob(soap, &soap_tmp_condorSchedd__releaseJob, "condorSchedd:releaseJob", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__releaseJob(soap, soap_tmp_condorSchedd__releaseJob.transaction, soap_tmp_condorSchedd__releaseJob.clusterId, soap_tmp_condorSchedd__releaseJob.jobId, soap_tmp_condorSchedd__releaseJob.reason, soap_tmp_condorSchedd__releaseJob.email_user, soap_tmp_condorSchedd__releaseJob.email_admin, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__StatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__StatusResponse(soap, &result, "condorSchedd:StatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__StatusResponse(soap, &result, "condorSchedd:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__submit(struct soap *soap)
{	struct condorSchedd__submit soap_tmp_condorSchedd__submit;
	struct condorSchedd__RequirementsAndStatusResponse result;
	soap_default_condorSchedd__RequirementsAndStatusResponse(soap, &result);
	soap_default_condorSchedd__submit(soap, &soap_tmp_condorSchedd__submit);
	soap->encodingStyle = "";
	soap_get_condorSchedd__submit(soap, &soap_tmp_condorSchedd__submit, "condorSchedd:submit", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__submit(soap, soap_tmp_condorSchedd__submit.transaction, soap_tmp_condorSchedd__submit.clusterId, soap_tmp_condorSchedd__submit.jobId, soap_tmp_condorSchedd__submit.jobAd, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__RequirementsAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__RequirementsAndStatusResponse(soap, &result, "condorSchedd:RequirementsAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__RequirementsAndStatusResponse(soap, &result, "condorSchedd:RequirementsAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__getJobAds(struct soap *soap)
{	struct condorSchedd__getJobAds soap_tmp_condorSchedd__getJobAds;
	struct condorSchedd__ClassAdStructArrayAndStatusResponse result;
	soap_default_condorSchedd__ClassAdStructArrayAndStatusResponse(soap, &result);
	soap_default_condorSchedd__getJobAds(soap, &soap_tmp_condorSchedd__getJobAds);
	soap->encodingStyle = "";
	soap_get_condorSchedd__getJobAds(soap, &soap_tmp_condorSchedd__getJobAds, "condorSchedd:getJobAds", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__getJobAds(soap, soap_tmp_condorSchedd__getJobAds.transaction, soap_tmp_condorSchedd__getJobAds.constraint, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__ClassAdStructArrayAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__ClassAdStructArrayAndStatusResponse(soap, &result, "condorSchedd:ClassAdStructArrayAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__ClassAdStructArrayAndStatusResponse(soap, &result, "condorSchedd:ClassAdStructArrayAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__getJobAd(struct soap *soap)
{	struct condorSchedd__getJobAd soap_tmp_condorSchedd__getJobAd;
	struct condorSchedd__ClassAdStructAndStatusResponse result;
	soap_default_condorSchedd__ClassAdStructAndStatusResponse(soap, &result);
	soap_default_condorSchedd__getJobAd(soap, &soap_tmp_condorSchedd__getJobAd);
	soap->encodingStyle = "";
	soap_get_condorSchedd__getJobAd(soap, &soap_tmp_condorSchedd__getJobAd, "condorSchedd:getJobAd", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__getJobAd(soap, soap_tmp_condorSchedd__getJobAd.transaction, soap_tmp_condorSchedd__getJobAd.clusterId, soap_tmp_condorSchedd__getJobAd.jobId, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__ClassAdStructAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__ClassAdStructAndStatusResponse(soap, &result, "condorSchedd:ClassAdStructAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__ClassAdStructAndStatusResponse(soap, &result, "condorSchedd:ClassAdStructAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__declareFile(struct soap *soap)
{	struct condorSchedd__declareFile soap_tmp_condorSchedd__declareFile;
	struct condorSchedd__StatusResponse result;
	soap_default_condorSchedd__StatusResponse(soap, &result);
	soap_default_condorSchedd__declareFile(soap, &soap_tmp_condorSchedd__declareFile);
	soap->encodingStyle = "";
	soap_get_condorSchedd__declareFile(soap, &soap_tmp_condorSchedd__declareFile, "condorSchedd:declareFile", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__declareFile(soap, soap_tmp_condorSchedd__declareFile.transaction, soap_tmp_condorSchedd__declareFile.clusterId, soap_tmp_condorSchedd__declareFile.jobId, soap_tmp_condorSchedd__declareFile.name, soap_tmp_condorSchedd__declareFile.size, soap_tmp_condorSchedd__declareFile.hashType, soap_tmp_condorSchedd__declareFile.hash, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__StatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__StatusResponse(soap, &result, "condorSchedd:StatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__StatusResponse(soap, &result, "condorSchedd:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__sendFile(struct soap *soap)
{	struct condorSchedd__sendFile soap_tmp_condorSchedd__sendFile;
	struct condorSchedd__StatusResponse result;
	soap_default_condorSchedd__StatusResponse(soap, &result);
	soap_default_condorSchedd__sendFile(soap, &soap_tmp_condorSchedd__sendFile);
	soap->encodingStyle = "";
	soap_get_condorSchedd__sendFile(soap, &soap_tmp_condorSchedd__sendFile, "condorSchedd:sendFile", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__sendFile(soap, soap_tmp_condorSchedd__sendFile.transaction, soap_tmp_condorSchedd__sendFile.clusterId, soap_tmp_condorSchedd__sendFile.jobId, soap_tmp_condorSchedd__sendFile.name, soap_tmp_condorSchedd__sendFile.offset, soap_tmp_condorSchedd__sendFile.data, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__StatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__StatusResponse(soap, &result, "condorSchedd:StatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__StatusResponse(soap, &result, "condorSchedd:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__getFile(struct soap *soap)
{	struct condorSchedd__getFile soap_tmp_condorSchedd__getFile;
	struct condorSchedd__Base64DataAndStatusResponse result;
	soap_default_condorSchedd__Base64DataAndStatusResponse(soap, &result);
	soap_default_condorSchedd__getFile(soap, &soap_tmp_condorSchedd__getFile);
	soap->encodingStyle = "";
	soap_get_condorSchedd__getFile(soap, &soap_tmp_condorSchedd__getFile, "condorSchedd:getFile", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__getFile(soap, soap_tmp_condorSchedd__getFile.transaction, soap_tmp_condorSchedd__getFile.clusterId, soap_tmp_condorSchedd__getFile.jobId, soap_tmp_condorSchedd__getFile.name, soap_tmp_condorSchedd__getFile.offset, soap_tmp_condorSchedd__getFile.length, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__Base64DataAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__Base64DataAndStatusResponse(soap, &result, "condorSchedd:Base64DataAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__Base64DataAndStatusResponse(soap, &result, "condorSchedd:Base64DataAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__closeSpool(struct soap *soap)
{	struct condorSchedd__closeSpool soap_tmp_condorSchedd__closeSpool;
	struct condorSchedd__StatusResponse result;
	soap_default_condorSchedd__StatusResponse(soap, &result);
	soap_default_condorSchedd__closeSpool(soap, &soap_tmp_condorSchedd__closeSpool);
	soap->encodingStyle = "";
	soap_get_condorSchedd__closeSpool(soap, &soap_tmp_condorSchedd__closeSpool, "condorSchedd:closeSpool", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__closeSpool(soap, soap_tmp_condorSchedd__closeSpool.transaction, soap_tmp_condorSchedd__closeSpool.clusterId, soap_tmp_condorSchedd__closeSpool.jobId, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__StatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__StatusResponse(soap, &result, "condorSchedd:StatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__StatusResponse(soap, &result, "condorSchedd:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__listSpool(struct soap *soap)
{	struct condorSchedd__listSpool soap_tmp_condorSchedd__listSpool;
	struct condorSchedd__FileInfoArrayAndStatusResponse result;
	soap_default_condorSchedd__FileInfoArrayAndStatusResponse(soap, &result);
	soap_default_condorSchedd__listSpool(soap, &soap_tmp_condorSchedd__listSpool);
	soap->encodingStyle = "";
	soap_get_condorSchedd__listSpool(soap, &soap_tmp_condorSchedd__listSpool, "condorSchedd:listSpool", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__listSpool(soap, soap_tmp_condorSchedd__listSpool.transaction, soap_tmp_condorSchedd__listSpool.clusterId, soap_tmp_condorSchedd__listSpool.jobId, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__FileInfoArrayAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__FileInfoArrayAndStatusResponse(soap, &result, "condorSchedd:FileInfoArrayAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__FileInfoArrayAndStatusResponse(soap, &result, "condorSchedd:FileInfoArrayAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__discoverJobRequirements(struct soap *soap)
{	struct condorSchedd__discoverJobRequirements soap_tmp_condorSchedd__discoverJobRequirements;
	struct condorSchedd__RequirementsAndStatusResponse result;
	soap_default_condorSchedd__RequirementsAndStatusResponse(soap, &result);
	soap_default_condorSchedd__discoverJobRequirements(soap, &soap_tmp_condorSchedd__discoverJobRequirements);
	soap->encodingStyle = "";
	soap_get_condorSchedd__discoverJobRequirements(soap, &soap_tmp_condorSchedd__discoverJobRequirements, "condorSchedd:discoverJobRequirements", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__discoverJobRequirements(soap, soap_tmp_condorSchedd__discoverJobRequirements.jobAd, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__RequirementsAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__RequirementsAndStatusResponse(soap, &result, "condorSchedd:RequirementsAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__RequirementsAndStatusResponse(soap, &result, "condorSchedd:RequirementsAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__createJobTemplate(struct soap *soap)
{	struct condorSchedd__createJobTemplate soap_tmp_condorSchedd__createJobTemplate;
	struct condorSchedd__ClassAdStructAndStatusResponse result;
	soap_default_condorSchedd__ClassAdStructAndStatusResponse(soap, &result);
	soap_default_condorSchedd__createJobTemplate(soap, &soap_tmp_condorSchedd__createJobTemplate);
	soap->encodingStyle = "";
	soap_get_condorSchedd__createJobTemplate(soap, &soap_tmp_condorSchedd__createJobTemplate, "condorSchedd:createJobTemplate", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__createJobTemplate(soap, soap_tmp_condorSchedd__createJobTemplate.clusterId, soap_tmp_condorSchedd__createJobTemplate.jobId, soap_tmp_condorSchedd__createJobTemplate.owner, soap_tmp_condorSchedd__createJobTemplate.type, soap_tmp_condorSchedd__createJobTemplate.cmd, soap_tmp_condorSchedd__createJobTemplate.args, soap_tmp_condorSchedd__createJobTemplate.requirements, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__ClassAdStructAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__ClassAdStructAndStatusResponse(soap, &result, "condorSchedd:ClassAdStructAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__ClassAdStructAndStatusResponse(soap, &result, "condorSchedd:ClassAdStructAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_END_NAMESPACE(soap_schedd)

/* end of soap_scheddServer.cpp */
