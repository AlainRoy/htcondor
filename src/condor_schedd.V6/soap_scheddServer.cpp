/* soap_scheddServer.cpp
   Generated by gSOAP 2.6.0 from gsoap_schedd.h
   Copyright (C) 2001-2004 Genivia, Inc. All Rights Reserved.
   This software is released under the gSOAP public license and GPL.
   See README.txt for further details.
*/
#include "soap_scheddH.h"

SOAP_BEGIN_NAMESPACE(soap_schedd)

SOAP_SOURCE_STAMP("@(#) soap_scheddServer.cpp ver 2.6.0 2004-06-01 14:49:31 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
	unsigned int n = soap->max_keep_alive;
	do
	{	soap_begin(soap);
		if (!--n)
			soap->keep_alive = 0;
		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
				return soap_send_fault(soap);
			soap_closesock(soap);
			continue;
		}
		if (soap_envelope_begin_in(soap)
		 || soap_recv_header(soap)
		 || soap_body_begin_in(soap)
		 || soap_serve_request(soap))
			return soap_send_fault(soap);
		
	} while (soap->keep_alive);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:beginTransaction"))
		return soap_serve_condor__beginTransaction(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:commitTransaction"))
		return soap_serve_condor__commitTransaction(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:abortTransaction"))
		return soap_serve_condor__abortTransaction(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:extendTransaction"))
		return soap_serve_condor__extendTransaction(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:newCluster"))
		return soap_serve_condor__newCluster(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:removeCluster"))
		return soap_serve_condor__removeCluster(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:newJob"))
		return soap_serve_condor__newJob(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:removeJob"))
		return soap_serve_condor__removeJob(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:holdJob"))
		return soap_serve_condor__holdJob(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:releaseJob"))
		return soap_serve_condor__releaseJob(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:submit"))
		return soap_serve_condor__submit(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:getJobAds"))
		return soap_serve_condor__getJobAds(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:getJobAd"))
		return soap_serve_condor__getJobAd(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:declareFile"))
		return soap_serve_condor__declareFile(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:sendFile"))
		return soap_serve_condor__sendFile(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:getFile"))
		return soap_serve_condor__getFile(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:closeSpool"))
		return soap_serve_condor__closeSpool(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:listSpool"))
		return soap_serve_condor__listSpool(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:discoverJobRequirements"))
		return soap_serve_condor__discoverJobRequirements(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:createJobTemplate"))
		return soap_serve_condor__createJobTemplate(soap);
	return soap->error = SOAP_NO_METHOD;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__beginTransaction(struct soap *soap)
{	struct condor__beginTransaction soap_tmp_condor__beginTransaction;
	struct condor__TransactionAndStatusResponse result;
	soap_default_condor__TransactionAndStatusResponse(soap, &result);
	soap_default_condor__beginTransaction(soap, &soap_tmp_condor__beginTransaction);
	soap->encodingStyle = "";
	soap_get_condor__beginTransaction(soap, &soap_tmp_condor__beginTransaction, "condor:beginTransaction", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__beginTransaction(soap, soap_tmp_condor__beginTransaction.duration, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__TransactionAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__TransactionAndStatusResponse(soap, &result, "condor:TransactionAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__TransactionAndStatusResponse(soap, &result, "condor:TransactionAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__commitTransaction(struct soap *soap)
{	struct condor__commitTransaction soap_tmp_condor__commitTransaction;
	struct condor__StatusResponse result;
	soap_default_condor__StatusResponse(soap, &result);
	soap_default_condor__commitTransaction(soap, &soap_tmp_condor__commitTransaction);
	soap->encodingStyle = "";
	soap_get_condor__commitTransaction(soap, &soap_tmp_condor__commitTransaction, "condor:commitTransaction", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__commitTransaction(soap, soap_tmp_condor__commitTransaction.transaction, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__StatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__StatusResponse(soap, &result, "condor:StatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__StatusResponse(soap, &result, "condor:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__abortTransaction(struct soap *soap)
{	struct condor__abortTransaction soap_tmp_condor__abortTransaction;
	struct condor__StatusResponse result;
	soap_default_condor__StatusResponse(soap, &result);
	soap_default_condor__abortTransaction(soap, &soap_tmp_condor__abortTransaction);
	soap->encodingStyle = "";
	soap_get_condor__abortTransaction(soap, &soap_tmp_condor__abortTransaction, "condor:abortTransaction", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__abortTransaction(soap, soap_tmp_condor__abortTransaction.transaction, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__StatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__StatusResponse(soap, &result, "condor:StatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__StatusResponse(soap, &result, "condor:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__extendTransaction(struct soap *soap)
{	struct condor__extendTransaction soap_tmp_condor__extendTransaction;
	struct condor__TransactionAndStatusResponse result;
	soap_default_condor__TransactionAndStatusResponse(soap, &result);
	soap_default_condor__extendTransaction(soap, &soap_tmp_condor__extendTransaction);
	soap->encodingStyle = "";
	soap_get_condor__extendTransaction(soap, &soap_tmp_condor__extendTransaction, "condor:extendTransaction", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__extendTransaction(soap, soap_tmp_condor__extendTransaction.transaction, soap_tmp_condor__extendTransaction.duration, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__TransactionAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__TransactionAndStatusResponse(soap, &result, "condor:TransactionAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__TransactionAndStatusResponse(soap, &result, "condor:TransactionAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__newCluster(struct soap *soap)
{	struct condor__newCluster soap_tmp_condor__newCluster;
	struct condor__IntAndStatusResponse result;
	soap_default_condor__IntAndStatusResponse(soap, &result);
	soap_default_condor__newCluster(soap, &soap_tmp_condor__newCluster);
	soap->encodingStyle = "";
	soap_get_condor__newCluster(soap, &soap_tmp_condor__newCluster, "condor:newCluster", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__newCluster(soap, soap_tmp_condor__newCluster.transaction, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__IntAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__IntAndStatusResponse(soap, &result, "condor:IntAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__IntAndStatusResponse(soap, &result, "condor:IntAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__removeCluster(struct soap *soap)
{	struct condor__removeCluster soap_tmp_condor__removeCluster;
	struct condor__StatusResponse result;
	soap_default_condor__StatusResponse(soap, &result);
	soap_default_condor__removeCluster(soap, &soap_tmp_condor__removeCluster);
	soap->encodingStyle = "";
	soap_get_condor__removeCluster(soap, &soap_tmp_condor__removeCluster, "condor:removeCluster", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__removeCluster(soap, soap_tmp_condor__removeCluster.transaction, soap_tmp_condor__removeCluster.clusterId, soap_tmp_condor__removeCluster.reason, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__StatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__StatusResponse(soap, &result, "condor:StatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__StatusResponse(soap, &result, "condor:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__newJob(struct soap *soap)
{	struct condor__newJob soap_tmp_condor__newJob;
	struct condor__IntAndStatusResponse result;
	soap_default_condor__IntAndStatusResponse(soap, &result);
	soap_default_condor__newJob(soap, &soap_tmp_condor__newJob);
	soap->encodingStyle = "";
	soap_get_condor__newJob(soap, &soap_tmp_condor__newJob, "condor:newJob", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__newJob(soap, soap_tmp_condor__newJob.transaction, soap_tmp_condor__newJob.clusterId, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__IntAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__IntAndStatusResponse(soap, &result, "condor:IntAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__IntAndStatusResponse(soap, &result, "condor:IntAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__removeJob(struct soap *soap)
{	struct condor__removeJob soap_tmp_condor__removeJob;
	struct condor__StatusResponse result;
	soap_default_condor__StatusResponse(soap, &result);
	soap_default_condor__removeJob(soap, &soap_tmp_condor__removeJob);
	soap->encodingStyle = "";
	soap_get_condor__removeJob(soap, &soap_tmp_condor__removeJob, "condor:removeJob", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__removeJob(soap, soap_tmp_condor__removeJob.transaction, soap_tmp_condor__removeJob.clusterId, soap_tmp_condor__removeJob.jobId, soap_tmp_condor__removeJob.reason, soap_tmp_condor__removeJob.force_removal, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__StatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__StatusResponse(soap, &result, "condor:StatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__StatusResponse(soap, &result, "condor:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__holdJob(struct soap *soap)
{	struct condor__holdJob soap_tmp_condor__holdJob;
	struct condor__StatusResponse result;
	soap_default_condor__StatusResponse(soap, &result);
	soap_default_condor__holdJob(soap, &soap_tmp_condor__holdJob);
	soap->encodingStyle = "";
	soap_get_condor__holdJob(soap, &soap_tmp_condor__holdJob, "condor:holdJob", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__holdJob(soap, soap_tmp_condor__holdJob.transaction, soap_tmp_condor__holdJob.clusterId, soap_tmp_condor__holdJob.jobId, soap_tmp_condor__holdJob.reason, soap_tmp_condor__holdJob.email_user, soap_tmp_condor__holdJob.email_admin, soap_tmp_condor__holdJob.system_hold, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__StatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__StatusResponse(soap, &result, "condor:StatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__StatusResponse(soap, &result, "condor:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__releaseJob(struct soap *soap)
{	struct condor__releaseJob soap_tmp_condor__releaseJob;
	struct condor__StatusResponse result;
	soap_default_condor__StatusResponse(soap, &result);
	soap_default_condor__releaseJob(soap, &soap_tmp_condor__releaseJob);
	soap->encodingStyle = "";
	soap_get_condor__releaseJob(soap, &soap_tmp_condor__releaseJob, "condor:releaseJob", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__releaseJob(soap, soap_tmp_condor__releaseJob.transaction, soap_tmp_condor__releaseJob.clusterId, soap_tmp_condor__releaseJob.jobId, soap_tmp_condor__releaseJob.reason, soap_tmp_condor__releaseJob.email_user, soap_tmp_condor__releaseJob.email_admin, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__StatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__StatusResponse(soap, &result, "condor:StatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__StatusResponse(soap, &result, "condor:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__submit(struct soap *soap)
{	struct condor__submit soap_tmp_condor__submit;
	struct condor__RequirementsAndStatusResponse result;
	soap_default_condor__RequirementsAndStatusResponse(soap, &result);
	soap_default_condor__submit(soap, &soap_tmp_condor__submit);
	soap->encodingStyle = "";
	soap_get_condor__submit(soap, &soap_tmp_condor__submit, "condor:submit", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__submit(soap, soap_tmp_condor__submit.transaction, soap_tmp_condor__submit.clusterId, soap_tmp_condor__submit.jobId, soap_tmp_condor__submit.jobAd, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__RequirementsAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__RequirementsAndStatusResponse(soap, &result, "condor:RequirementsAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__RequirementsAndStatusResponse(soap, &result, "condor:RequirementsAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__getJobAds(struct soap *soap)
{	struct condor__getJobAds soap_tmp_condor__getJobAds;
	struct condor__ClassAdStructArrayAndStatusResponse result;
	soap_default_condor__ClassAdStructArrayAndStatusResponse(soap, &result);
	soap_default_condor__getJobAds(soap, &soap_tmp_condor__getJobAds);
	soap->encodingStyle = "";
	soap_get_condor__getJobAds(soap, &soap_tmp_condor__getJobAds, "condor:getJobAds", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__getJobAds(soap, soap_tmp_condor__getJobAds.transaction, soap_tmp_condor__getJobAds.constraint, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__ClassAdStructArrayAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__ClassAdStructArrayAndStatusResponse(soap, &result, "condor:ClassAdStructArrayAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__ClassAdStructArrayAndStatusResponse(soap, &result, "condor:ClassAdStructArrayAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__getJobAd(struct soap *soap)
{	struct condor__getJobAd soap_tmp_condor__getJobAd;
	struct condor__ClassAdStructAndStatusResponse result;
	soap_default_condor__ClassAdStructAndStatusResponse(soap, &result);
	soap_default_condor__getJobAd(soap, &soap_tmp_condor__getJobAd);
	soap->encodingStyle = "";
	soap_get_condor__getJobAd(soap, &soap_tmp_condor__getJobAd, "condor:getJobAd", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__getJobAd(soap, soap_tmp_condor__getJobAd.transaction, soap_tmp_condor__getJobAd.clusterId, soap_tmp_condor__getJobAd.jobId, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__ClassAdStructAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__ClassAdStructAndStatusResponse(soap, &result, "condor:ClassAdStructAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__ClassAdStructAndStatusResponse(soap, &result, "condor:ClassAdStructAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__declareFile(struct soap *soap)
{	struct condor__declareFile soap_tmp_condor__declareFile;
	struct condor__StatusResponse result;
	soap_default_condor__StatusResponse(soap, &result);
	soap_default_condor__declareFile(soap, &soap_tmp_condor__declareFile);
	soap->encodingStyle = "";
	soap_get_condor__declareFile(soap, &soap_tmp_condor__declareFile, "condor:declareFile", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__declareFile(soap, soap_tmp_condor__declareFile.transaction, soap_tmp_condor__declareFile.clusterId, soap_tmp_condor__declareFile.jobId, soap_tmp_condor__declareFile.name, soap_tmp_condor__declareFile.size, soap_tmp_condor__declareFile.hashType, soap_tmp_condor__declareFile.hash, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__StatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__StatusResponse(soap, &result, "condor:StatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__StatusResponse(soap, &result, "condor:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__sendFile(struct soap *soap)
{	struct condor__sendFile soap_tmp_condor__sendFile;
	struct condor__StatusResponse result;
	soap_default_condor__StatusResponse(soap, &result);
	soap_default_condor__sendFile(soap, &soap_tmp_condor__sendFile);
	soap->encodingStyle = "";
	soap_get_condor__sendFile(soap, &soap_tmp_condor__sendFile, "condor:sendFile", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__sendFile(soap, soap_tmp_condor__sendFile.transaction, soap_tmp_condor__sendFile.clusterId, soap_tmp_condor__sendFile.jobId, soap_tmp_condor__sendFile.name, soap_tmp_condor__sendFile.offset, soap_tmp_condor__sendFile.data, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__StatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__StatusResponse(soap, &result, "condor:StatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__StatusResponse(soap, &result, "condor:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__getFile(struct soap *soap)
{	struct condor__getFile soap_tmp_condor__getFile;
	struct condor__Base64DataAndStatusResponse result;
	soap_default_condor__Base64DataAndStatusResponse(soap, &result);
	soap_default_condor__getFile(soap, &soap_tmp_condor__getFile);
	soap->encodingStyle = "";
	soap_get_condor__getFile(soap, &soap_tmp_condor__getFile, "condor:getFile", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__getFile(soap, soap_tmp_condor__getFile.transaction, soap_tmp_condor__getFile.clusterId, soap_tmp_condor__getFile.jobId, soap_tmp_condor__getFile.name, soap_tmp_condor__getFile.offset, soap_tmp_condor__getFile.length, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__Base64DataAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__Base64DataAndStatusResponse(soap, &result, "condor:Base64DataAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__Base64DataAndStatusResponse(soap, &result, "condor:Base64DataAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__closeSpool(struct soap *soap)
{	struct condor__closeSpool soap_tmp_condor__closeSpool;
	struct condor__StatusResponse result;
	soap_default_condor__StatusResponse(soap, &result);
	soap_default_condor__closeSpool(soap, &soap_tmp_condor__closeSpool);
	soap->encodingStyle = "";
	soap_get_condor__closeSpool(soap, &soap_tmp_condor__closeSpool, "condor:closeSpool", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__closeSpool(soap, soap_tmp_condor__closeSpool.transaction, soap_tmp_condor__closeSpool.clusterId, soap_tmp_condor__closeSpool.jobId, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__StatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__StatusResponse(soap, &result, "condor:StatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__StatusResponse(soap, &result, "condor:StatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__listSpool(struct soap *soap)
{	struct condor__listSpool soap_tmp_condor__listSpool;
	struct condor__FileInfoArrayAndStatusResponse result;
	soap_default_condor__FileInfoArrayAndStatusResponse(soap, &result);
	soap_default_condor__listSpool(soap, &soap_tmp_condor__listSpool);
	soap->encodingStyle = "";
	soap_get_condor__listSpool(soap, &soap_tmp_condor__listSpool, "condor:listSpool", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__listSpool(soap, soap_tmp_condor__listSpool.transaction, soap_tmp_condor__listSpool.clusterId, soap_tmp_condor__listSpool.jobId, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__FileInfoArrayAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__FileInfoArrayAndStatusResponse(soap, &result, "condor:FileInfoArrayAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__FileInfoArrayAndStatusResponse(soap, &result, "condor:FileInfoArrayAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__discoverJobRequirements(struct soap *soap)
{	struct condor__discoverJobRequirements soap_tmp_condor__discoverJobRequirements;
	struct condor__RequirementsAndStatusResponse result;
	soap_default_condor__RequirementsAndStatusResponse(soap, &result);
	soap_default_condor__discoverJobRequirements(soap, &soap_tmp_condor__discoverJobRequirements);
	soap->encodingStyle = "";
	soap_get_condor__discoverJobRequirements(soap, &soap_tmp_condor__discoverJobRequirements, "condor:discoverJobRequirements", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__discoverJobRequirements(soap, soap_tmp_condor__discoverJobRequirements.jobAd, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__RequirementsAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__RequirementsAndStatusResponse(soap, &result, "condor:RequirementsAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__RequirementsAndStatusResponse(soap, &result, "condor:RequirementsAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__createJobTemplate(struct soap *soap)
{	struct condor__createJobTemplate soap_tmp_condor__createJobTemplate;
	struct condor__ClassAdStructAndStatusResponse result;
	soap_default_condor__ClassAdStructAndStatusResponse(soap, &result);
	soap_default_condor__createJobTemplate(soap, &soap_tmp_condor__createJobTemplate);
	soap->encodingStyle = "";
	soap_get_condor__createJobTemplate(soap, &soap_tmp_condor__createJobTemplate, "condor:createJobTemplate", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__createJobTemplate(soap, soap_tmp_condor__createJobTemplate.clusterId, soap_tmp_condor__createJobTemplate.jobId, soap_tmp_condor__createJobTemplate.owner, soap_tmp_condor__createJobTemplate.type, soap_tmp_condor__createJobTemplate.cmd, soap_tmp_condor__createJobTemplate.args, soap_tmp_condor__createJobTemplate.requirements, result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__ClassAdStructAndStatusResponse(soap, &result);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__ClassAdStructAndStatusResponse(soap, &result, "condor:ClassAdStructAndStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__ClassAdStructAndStatusResponse(soap, &result, "condor:ClassAdStructAndStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_END_NAMESPACE(soap_schedd)

/* end of soap_scheddServer.cpp */
