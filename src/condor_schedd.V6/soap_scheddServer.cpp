/* soap_scheddServer.cpp
   Generated by gSOAP 2.3 rev 7 from gsoap_schedd.h
   Copyright (C) 2001-2003 Genivia inc.
   All Rights Reserved.
*/
#include "soap_scheddH.h"

SOAP_BEGIN_NAMESPACE(soap_schedd)

SOAP_SOURCE_STAMP("@(#) soap_scheddServer.cpp ver 2.3 rev 7 2003-10-14 20:09:19 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
	unsigned int n = SOAP_MAXKEEPALIVE;
	do
	{	soap_begin(soap);
		if (!--n)
			soap->keep_alive = 0;
		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
				return soap_send_fault(soap);
			else
				continue;
		}
		if (soap_envelope_begin_in(soap) || soap_recv_header(soap) || soap_body_begin_in(soap))
			return soap_send_fault(soap);
		soap->error = soap_serve_condorCore__getInfoAd(soap);
		if (soap->error == SOAP_NO_METHOD)
			soap_serve_condorCore__getVersionString(soap);
		if (soap->error == SOAP_NO_METHOD)
			soap_serve_condorCore__getPlatformString(soap);
		if (soap->error == SOAP_NO_METHOD)
			soap_serve_condorSchedd__beginTransaction(soap);
		if (soap->error == SOAP_NO_METHOD)
			soap_serve_condorSchedd__commitTransaction(soap);
		if (soap->error == SOAP_NO_METHOD)
			soap_serve_condorSchedd__abortTransaction(soap);
		if (soap->error == SOAP_NO_METHOD)
			soap_serve_condorSchedd__extendTransaction(soap);
		if (soap->error == SOAP_NO_METHOD)
			soap_serve_condorSchedd__newCluster(soap);
		if (soap->error == SOAP_NO_METHOD)
			soap_serve_condorSchedd__removeCluster(soap);
		if (soap->error == SOAP_NO_METHOD)
			soap_serve_condorSchedd__newJob(soap);
		if (soap->error == SOAP_NO_METHOD)
			soap_serve_condorSchedd__removeJob(soap);
		if (soap->error == SOAP_NO_METHOD)
			soap_serve_condorSchedd__holdJob(soap);
		if (soap->error == SOAP_NO_METHOD)
			soap_serve_condorSchedd__releaseJob(soap);
		if (soap->error == SOAP_NO_METHOD)
			soap_serve_condorSchedd__submit(soap);
		if (soap->error == SOAP_NO_METHOD)
			soap_serve_condorSchedd__getJobAds(soap);
		if (soap->error == SOAP_NO_METHOD)
			soap_serve_condorSchedd__getJobAd(soap);
		if (soap->error)
			return soap_send_fault(soap);
	} while (soap->keep_alive);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorCore__getInfoAd(struct soap *soap)
{	struct condorCore__getInfoAd soap_tmp_condorCore__getInfoAd;
	struct condorCore__getInfoAdResponse soap_tmp_condorCore__getInfoAdResponse;
	soap_default_condorCore__getInfoAdResponse(soap, &soap_tmp_condorCore__getInfoAdResponse);
	soap_default_condorCore__getInfoAd(soap, &soap_tmp_condorCore__getInfoAd);
	soap_get_condorCore__getInfoAd(soap, &soap_tmp_condorCore__getInfoAd, "condorCore:getInfoAd", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorCore__getInfoAd(soap, soap_tmp_condorCore__getInfoAd._, soap_tmp_condorCore__getInfoAdResponse.ad);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorCore__getInfoAdResponse(soap, &soap_tmp_condorCore__getInfoAdResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorCore__getInfoAdResponse(soap, &soap_tmp_condorCore__getInfoAdResponse, "condorCore:getInfoAdResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorCore__getInfoAdResponse(soap, &soap_tmp_condorCore__getInfoAdResponse, "condorCore:getInfoAdResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorCore__getVersionString(struct soap *soap)
{	struct condorCore__getVersionString soap_tmp_condorCore__getVersionString;
	struct condorCore__getVersionStringResponse soap_tmp_condorCore__getVersionStringResponse;
	soap_default_condorCore__getVersionStringResponse(soap, &soap_tmp_condorCore__getVersionStringResponse);
	soap_default_condorCore__getVersionString(soap, &soap_tmp_condorCore__getVersionString);
	soap_get_condorCore__getVersionString(soap, &soap_tmp_condorCore__getVersionString, "condorCore:getVersionString", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorCore__getVersionString(soap, soap_tmp_condorCore__getVersionString._, soap_tmp_condorCore__getVersionStringResponse.verstring);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorCore__getVersionStringResponse(soap, &soap_tmp_condorCore__getVersionStringResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorCore__getVersionStringResponse(soap, &soap_tmp_condorCore__getVersionStringResponse, "condorCore:getVersionStringResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorCore__getVersionStringResponse(soap, &soap_tmp_condorCore__getVersionStringResponse, "condorCore:getVersionStringResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorCore__getPlatformString(struct soap *soap)
{	struct condorCore__getPlatformString soap_tmp_condorCore__getPlatformString;
	struct condorCore__getPlatformStringResponse soap_tmp_condorCore__getPlatformStringResponse;
	soap_default_condorCore__getPlatformStringResponse(soap, &soap_tmp_condorCore__getPlatformStringResponse);
	soap_default_condorCore__getPlatformString(soap, &soap_tmp_condorCore__getPlatformString);
	soap_get_condorCore__getPlatformString(soap, &soap_tmp_condorCore__getPlatformString, "condorCore:getPlatformString", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorCore__getPlatformString(soap, soap_tmp_condorCore__getPlatformString._, soap_tmp_condorCore__getPlatformStringResponse.verstring);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorCore__getPlatformStringResponse(soap, &soap_tmp_condorCore__getPlatformStringResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorCore__getPlatformStringResponse(soap, &soap_tmp_condorCore__getPlatformStringResponse, "condorCore:getPlatformStringResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorCore__getPlatformStringResponse(soap, &soap_tmp_condorCore__getPlatformStringResponse, "condorCore:getPlatformStringResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__beginTransaction(struct soap *soap)
{	struct condorSchedd__beginTransaction soap_tmp_condorSchedd__beginTransaction;
	struct condorSchedd__beginTransactionResponse soap_tmp_condorSchedd__beginTransactionResponse;
	soap_default_condorSchedd__beginTransactionResponse(soap, &soap_tmp_condorSchedd__beginTransactionResponse);
	soap_default_condorSchedd__beginTransaction(soap, &soap_tmp_condorSchedd__beginTransaction);
	soap_get_condorSchedd__beginTransaction(soap, &soap_tmp_condorSchedd__beginTransaction, "condorSchedd:beginTransaction", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__beginTransaction(soap, soap_tmp_condorSchedd__beginTransaction.duration, soap_tmp_condorSchedd__beginTransactionResponse.transactionId);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__beginTransactionResponse(soap, &soap_tmp_condorSchedd__beginTransactionResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__beginTransactionResponse(soap, &soap_tmp_condorSchedd__beginTransactionResponse, "condorSchedd:beginTransactionResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__beginTransactionResponse(soap, &soap_tmp_condorSchedd__beginTransactionResponse, "condorSchedd:beginTransactionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__commitTransaction(struct soap *soap)
{	struct condorSchedd__commitTransaction soap_tmp_condorSchedd__commitTransaction;
	struct condorSchedd__commitTransactionResponse soap_tmp_condorSchedd__commitTransactionResponse;
	soap_default_condorSchedd__commitTransactionResponse(soap, &soap_tmp_condorSchedd__commitTransactionResponse);
	soap_default_condorSchedd__commitTransaction(soap, &soap_tmp_condorSchedd__commitTransaction);
	soap_get_condorSchedd__commitTransaction(soap, &soap_tmp_condorSchedd__commitTransaction, "condorSchedd:commitTransaction", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__commitTransaction(soap, soap_tmp_condorSchedd__commitTransaction.transactionId, soap_tmp_condorSchedd__commitTransactionResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__commitTransactionResponse(soap, &soap_tmp_condorSchedd__commitTransactionResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__commitTransactionResponse(soap, &soap_tmp_condorSchedd__commitTransactionResponse, "condorSchedd:commitTransactionResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__commitTransactionResponse(soap, &soap_tmp_condorSchedd__commitTransactionResponse, "condorSchedd:commitTransactionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__abortTransaction(struct soap *soap)
{	struct condorSchedd__abortTransaction soap_tmp_condorSchedd__abortTransaction;
	struct condorSchedd__abortTransactionResponse soap_tmp_condorSchedd__abortTransactionResponse;
	soap_default_condorSchedd__abortTransactionResponse(soap, &soap_tmp_condorSchedd__abortTransactionResponse);
	soap_default_condorSchedd__abortTransaction(soap, &soap_tmp_condorSchedd__abortTransaction);
	soap_get_condorSchedd__abortTransaction(soap, &soap_tmp_condorSchedd__abortTransaction, "condorSchedd:abortTransaction", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__abortTransaction(soap, soap_tmp_condorSchedd__abortTransaction.transactionId, soap_tmp_condorSchedd__abortTransactionResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__abortTransactionResponse(soap, &soap_tmp_condorSchedd__abortTransactionResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__abortTransactionResponse(soap, &soap_tmp_condorSchedd__abortTransactionResponse, "condorSchedd:abortTransactionResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__abortTransactionResponse(soap, &soap_tmp_condorSchedd__abortTransactionResponse, "condorSchedd:abortTransactionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__extendTransaction(struct soap *soap)
{	struct condorSchedd__extendTransaction soap_tmp_condorSchedd__extendTransaction;
	struct condorSchedd__extendTransactionResponse soap_tmp_condorSchedd__extendTransactionResponse;
	soap_default_condorSchedd__extendTransactionResponse(soap, &soap_tmp_condorSchedd__extendTransactionResponse);
	soap_default_condorSchedd__extendTransaction(soap, &soap_tmp_condorSchedd__extendTransaction);
	soap_get_condorSchedd__extendTransaction(soap, &soap_tmp_condorSchedd__extendTransaction, "condorSchedd:extendTransaction", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__extendTransaction(soap, soap_tmp_condorSchedd__extendTransaction.transactionId, soap_tmp_condorSchedd__extendTransaction.duration, soap_tmp_condorSchedd__extendTransactionResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__extendTransactionResponse(soap, &soap_tmp_condorSchedd__extendTransactionResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__extendTransactionResponse(soap, &soap_tmp_condorSchedd__extendTransactionResponse, "condorSchedd:extendTransactionResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__extendTransactionResponse(soap, &soap_tmp_condorSchedd__extendTransactionResponse, "condorSchedd:extendTransactionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__newCluster(struct soap *soap)
{	struct condorSchedd__newCluster soap_tmp_condorSchedd__newCluster;
	struct condorSchedd__newClusterResponse soap_tmp_condorSchedd__newClusterResponse;
	soap_default_condorSchedd__newClusterResponse(soap, &soap_tmp_condorSchedd__newClusterResponse);
	soap_default_condorSchedd__newCluster(soap, &soap_tmp_condorSchedd__newCluster);
	soap_get_condorSchedd__newCluster(soap, &soap_tmp_condorSchedd__newCluster, "condorSchedd:newCluster", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__newCluster(soap, soap_tmp_condorSchedd__newCluster.transactionId, soap_tmp_condorSchedd__newClusterResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__newClusterResponse(soap, &soap_tmp_condorSchedd__newClusterResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__newClusterResponse(soap, &soap_tmp_condorSchedd__newClusterResponse, "condorSchedd:newClusterResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__newClusterResponse(soap, &soap_tmp_condorSchedd__newClusterResponse, "condorSchedd:newClusterResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__removeCluster(struct soap *soap)
{	struct condorSchedd__removeCluster soap_tmp_condorSchedd__removeCluster;
	struct condorSchedd__removeClusterResponse soap_tmp_condorSchedd__removeClusterResponse;
	soap_default_condorSchedd__removeClusterResponse(soap, &soap_tmp_condorSchedd__removeClusterResponse);
	soap_default_condorSchedd__removeCluster(soap, &soap_tmp_condorSchedd__removeCluster);
	soap_get_condorSchedd__removeCluster(soap, &soap_tmp_condorSchedd__removeCluster, "condorSchedd:removeCluster", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__removeCluster(soap, soap_tmp_condorSchedd__removeCluster.transactionId, soap_tmp_condorSchedd__removeCluster.clusterId, soap_tmp_condorSchedd__removeCluster.reason, soap_tmp_condorSchedd__removeClusterResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__removeClusterResponse(soap, &soap_tmp_condorSchedd__removeClusterResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__removeClusterResponse(soap, &soap_tmp_condorSchedd__removeClusterResponse, "condorSchedd:removeClusterResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__removeClusterResponse(soap, &soap_tmp_condorSchedd__removeClusterResponse, "condorSchedd:removeClusterResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__newJob(struct soap *soap)
{	struct condorSchedd__newJob soap_tmp_condorSchedd__newJob;
	struct condorSchedd__newJobResponse soap_tmp_condorSchedd__newJobResponse;
	soap_default_condorSchedd__newJobResponse(soap, &soap_tmp_condorSchedd__newJobResponse);
	soap_default_condorSchedd__newJob(soap, &soap_tmp_condorSchedd__newJob);
	soap_get_condorSchedd__newJob(soap, &soap_tmp_condorSchedd__newJob, "condorSchedd:newJob", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__newJob(soap, soap_tmp_condorSchedd__newJob.transactionId, soap_tmp_condorSchedd__newJob.clusterId, soap_tmp_condorSchedd__newJobResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__newJobResponse(soap, &soap_tmp_condorSchedd__newJobResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__newJobResponse(soap, &soap_tmp_condorSchedd__newJobResponse, "condorSchedd:newJobResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__newJobResponse(soap, &soap_tmp_condorSchedd__newJobResponse, "condorSchedd:newJobResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__removeJob(struct soap *soap)
{	struct condorSchedd__removeJob soap_tmp_condorSchedd__removeJob;
	struct condorSchedd__removeJobResponse soap_tmp_condorSchedd__removeJobResponse;
	soap_default_condorSchedd__removeJobResponse(soap, &soap_tmp_condorSchedd__removeJobResponse);
	soap_default_condorSchedd__removeJob(soap, &soap_tmp_condorSchedd__removeJob);
	soap_get_condorSchedd__removeJob(soap, &soap_tmp_condorSchedd__removeJob, "condorSchedd:removeJob", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__removeJob(soap, soap_tmp_condorSchedd__removeJob.transactionId, soap_tmp_condorSchedd__removeJob.clusterId, soap_tmp_condorSchedd__removeJob.jobId, soap_tmp_condorSchedd__removeJob.reason, soap_tmp_condorSchedd__removeJob.force_removal, soap_tmp_condorSchedd__removeJobResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__removeJobResponse(soap, &soap_tmp_condorSchedd__removeJobResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__removeJobResponse(soap, &soap_tmp_condorSchedd__removeJobResponse, "condorSchedd:removeJobResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__removeJobResponse(soap, &soap_tmp_condorSchedd__removeJobResponse, "condorSchedd:removeJobResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__holdJob(struct soap *soap)
{	struct condorSchedd__holdJob soap_tmp_condorSchedd__holdJob;
	struct condorSchedd__holdJobResponse soap_tmp_condorSchedd__holdJobResponse;
	soap_default_condorSchedd__holdJobResponse(soap, &soap_tmp_condorSchedd__holdJobResponse);
	soap_default_condorSchedd__holdJob(soap, &soap_tmp_condorSchedd__holdJob);
	soap_get_condorSchedd__holdJob(soap, &soap_tmp_condorSchedd__holdJob, "condorSchedd:holdJob", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__holdJob(soap, soap_tmp_condorSchedd__holdJob.transactionId, soap_tmp_condorSchedd__holdJob.clusterId, soap_tmp_condorSchedd__holdJob.jobId, soap_tmp_condorSchedd__holdJob.reason, soap_tmp_condorSchedd__holdJob.email_user, soap_tmp_condorSchedd__holdJob.email_admin, soap_tmp_condorSchedd__holdJob.system_hold, soap_tmp_condorSchedd__holdJobResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__holdJobResponse(soap, &soap_tmp_condorSchedd__holdJobResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__holdJobResponse(soap, &soap_tmp_condorSchedd__holdJobResponse, "condorSchedd:holdJobResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__holdJobResponse(soap, &soap_tmp_condorSchedd__holdJobResponse, "condorSchedd:holdJobResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__releaseJob(struct soap *soap)
{	struct condorSchedd__releaseJob soap_tmp_condorSchedd__releaseJob;
	struct condorSchedd__releaseJobResponse soap_tmp_condorSchedd__releaseJobResponse;
	soap_default_condorSchedd__releaseJobResponse(soap, &soap_tmp_condorSchedd__releaseJobResponse);
	soap_default_condorSchedd__releaseJob(soap, &soap_tmp_condorSchedd__releaseJob);
	soap_get_condorSchedd__releaseJob(soap, &soap_tmp_condorSchedd__releaseJob, "condorSchedd:releaseJob", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__releaseJob(soap, soap_tmp_condorSchedd__releaseJob.transactionId, soap_tmp_condorSchedd__releaseJob.clusterId, soap_tmp_condorSchedd__releaseJob.jobId, soap_tmp_condorSchedd__releaseJob.reason, soap_tmp_condorSchedd__releaseJob.email_user, soap_tmp_condorSchedd__releaseJob.email_admin, soap_tmp_condorSchedd__releaseJobResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__releaseJobResponse(soap, &soap_tmp_condorSchedd__releaseJobResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__releaseJobResponse(soap, &soap_tmp_condorSchedd__releaseJobResponse, "condorSchedd:releaseJobResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__releaseJobResponse(soap, &soap_tmp_condorSchedd__releaseJobResponse, "condorSchedd:releaseJobResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__submit(struct soap *soap)
{	struct condorSchedd__submit soap_tmp_condorSchedd__submit;
	struct condorSchedd__submitResponse soap_tmp_condorSchedd__submitResponse;
	soap_default_condorSchedd__submitResponse(soap, &soap_tmp_condorSchedd__submitResponse);
	soap_default_condorSchedd__submit(soap, &soap_tmp_condorSchedd__submit);
	soap_get_condorSchedd__submit(soap, &soap_tmp_condorSchedd__submit, "condorSchedd:submit", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__submit(soap, soap_tmp_condorSchedd__submit.transactionId, soap_tmp_condorSchedd__submit.clusterId, soap_tmp_condorSchedd__submit.jobId, soap_tmp_condorSchedd__submit.jobAd, soap_tmp_condorSchedd__submitResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__submitResponse(soap, &soap_tmp_condorSchedd__submitResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__submitResponse(soap, &soap_tmp_condorSchedd__submitResponse, "condorSchedd:submitResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__submitResponse(soap, &soap_tmp_condorSchedd__submitResponse, "condorSchedd:submitResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__getJobAds(struct soap *soap)
{	struct condorSchedd__getJobAds soap_tmp_condorSchedd__getJobAds;
	struct condorSchedd__getJobAdsResponse soap_tmp_condorSchedd__getJobAdsResponse;
	soap_default_condorSchedd__getJobAdsResponse(soap, &soap_tmp_condorSchedd__getJobAdsResponse);
	soap_default_condorSchedd__getJobAds(soap, &soap_tmp_condorSchedd__getJobAds);
	soap_get_condorSchedd__getJobAds(soap, &soap_tmp_condorSchedd__getJobAds, "condorSchedd:getJobAds", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__getJobAds(soap, soap_tmp_condorSchedd__getJobAds.transactionId, soap_tmp_condorSchedd__getJobAds.constraint, soap_tmp_condorSchedd__getJobAdsResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__getJobAdsResponse(soap, &soap_tmp_condorSchedd__getJobAdsResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__getJobAdsResponse(soap, &soap_tmp_condorSchedd__getJobAdsResponse, "condorSchedd:getJobAdsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__getJobAdsResponse(soap, &soap_tmp_condorSchedd__getJobAdsResponse, "condorSchedd:getJobAdsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorSchedd__getJobAd(struct soap *soap)
{	struct condorSchedd__getJobAd soap_tmp_condorSchedd__getJobAd;
	struct condorSchedd__getJobAdResponse soap_tmp_condorSchedd__getJobAdResponse;
	soap_default_condorSchedd__getJobAdResponse(soap, &soap_tmp_condorSchedd__getJobAdResponse);
	soap_default_condorSchedd__getJobAd(soap, &soap_tmp_condorSchedd__getJobAd);
	soap_get_condorSchedd__getJobAd(soap, &soap_tmp_condorSchedd__getJobAd, "condorSchedd:getJobAd", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorSchedd__getJobAd(soap, soap_tmp_condorSchedd__getJobAd.transactionId, soap_tmp_condorSchedd__getJobAd.clusterId, soap_tmp_condorSchedd__getJobAd.jobId, soap_tmp_condorSchedd__getJobAdResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorSchedd__getJobAdResponse(soap, &soap_tmp_condorSchedd__getJobAdResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorSchedd__getJobAdResponse(soap, &soap_tmp_condorSchedd__getJobAdResponse, "condorSchedd:getJobAdResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorSchedd__getJobAdResponse(soap, &soap_tmp_condorSchedd__getJobAdResponse, "condorSchedd:getJobAdResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_END_NAMESPACE(soap_schedd)

/* end of soap_scheddServer.cpp */
