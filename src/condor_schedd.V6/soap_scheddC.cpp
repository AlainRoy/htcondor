/* soap_scheddC.cpp
   Generated by gSOAP 2.3 rev 7 from gsoap_schedd.h
   Copyright (C) 2001-2003 Genivia inc.
   All Rights Reserved.
*/
#include "soap_scheddH.h"

SOAP_BEGIN_NAMESPACE(soap_schedd)

SOAP_SOURCE_STAMP("@(#) soap_scheddC.cpp ver 2.3 rev 7 2003-12-05 17:05:16 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL);
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = (struct SOAP_ENV__Fault*)soap_malloc(soap, sizeof(struct SOAP_ENV__Fault));
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	return soap_out_SOAP_ENV__Fault(soap, "SOAP-ENV:Fault", 0, soap->fault, NULL);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_in_SOAP_ENV__Fault(soap, "SOAP-ENV:Fault", NULL, NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Detail;
	return (const char**)&soap->fault->detail;
}

#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}

SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_in_xsd__byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_long:
		return soap_in_long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__long:
		return soap_in_xsd__long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__float:
		return soap_in_xsd__float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__positiveInteger:
		return soap_in_xsd__positiveInteger(soap, NULL, NULL, "xsd:positiveInteger");
	case SOAP_TYPE_unsignedLONG64:
		return soap_in_unsignedLONG64(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__boolean:
		return soap_in_xsd__boolean(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_condorSchedd__getJobAd:
		return soap_in_condorSchedd__getJobAd(soap, NULL, NULL, "condorSchedd:getJobAd");
	case SOAP_TYPE_condorSchedd__getJobAdResponse:
		return soap_in_condorSchedd__getJobAdResponse(soap, NULL, NULL, "condorSchedd:getJobAdResponse");
	case SOAP_TYPE_condorSchedd__getJobAds:
		return soap_in_condorSchedd__getJobAds(soap, NULL, NULL, "condorSchedd:getJobAds");
	case SOAP_TYPE_condorSchedd__getJobAdsResponse:
		return soap_in_condorSchedd__getJobAdsResponse(soap, NULL, NULL, "condorSchedd:getJobAdsResponse");
	case SOAP_TYPE_condorSchedd__submit:
		return soap_in_condorSchedd__submit(soap, NULL, NULL, "condorSchedd:submit");
	case SOAP_TYPE_condorSchedd__submitResponse:
		return soap_in_condorSchedd__submitResponse(soap, NULL, NULL, "condorSchedd:submitResponse");
	case SOAP_TYPE_condorSchedd__releaseJob:
		return soap_in_condorSchedd__releaseJob(soap, NULL, NULL, "condorSchedd:releaseJob");
	case SOAP_TYPE_condorSchedd__releaseJobResponse:
		return soap_in_condorSchedd__releaseJobResponse(soap, NULL, NULL, "condorSchedd:releaseJobResponse");
	case SOAP_TYPE_condorSchedd__holdJob:
		return soap_in_condorSchedd__holdJob(soap, NULL, NULL, "condorSchedd:holdJob");
	case SOAP_TYPE_condorSchedd__holdJobResponse:
		return soap_in_condorSchedd__holdJobResponse(soap, NULL, NULL, "condorSchedd:holdJobResponse");
	case SOAP_TYPE_condorSchedd__removeJob:
		return soap_in_condorSchedd__removeJob(soap, NULL, NULL, "condorSchedd:removeJob");
	case SOAP_TYPE_condorSchedd__removeJobResponse:
		return soap_in_condorSchedd__removeJobResponse(soap, NULL, NULL, "condorSchedd:removeJobResponse");
	case SOAP_TYPE_condorSchedd__newJob:
		return soap_in_condorSchedd__newJob(soap, NULL, NULL, "condorSchedd:newJob");
	case SOAP_TYPE_condorSchedd__newJobResponse:
		return soap_in_condorSchedd__newJobResponse(soap, NULL, NULL, "condorSchedd:newJobResponse");
	case SOAP_TYPE_condorSchedd__removeCluster:
		return soap_in_condorSchedd__removeCluster(soap, NULL, NULL, "condorSchedd:removeCluster");
	case SOAP_TYPE_condorSchedd__removeClusterResponse:
		return soap_in_condorSchedd__removeClusterResponse(soap, NULL, NULL, "condorSchedd:removeClusterResponse");
	case SOAP_TYPE_condorSchedd__newCluster:
		return soap_in_condorSchedd__newCluster(soap, NULL, NULL, "condorSchedd:newCluster");
	case SOAP_TYPE_condorSchedd__newClusterResponse:
		return soap_in_condorSchedd__newClusterResponse(soap, NULL, NULL, "condorSchedd:newClusterResponse");
	case SOAP_TYPE_condorSchedd__extendTransaction:
		return soap_in_condorSchedd__extendTransaction(soap, NULL, NULL, "condorSchedd:extendTransaction");
	case SOAP_TYPE_condorSchedd__extendTransactionResponse:
		return soap_in_condorSchedd__extendTransactionResponse(soap, NULL, NULL, "condorSchedd:extendTransactionResponse");
	case SOAP_TYPE_condorSchedd__abortTransaction:
		return soap_in_condorSchedd__abortTransaction(soap, NULL, NULL, "condorSchedd:abortTransaction");
	case SOAP_TYPE_condorSchedd__abortTransactionResponse:
		return soap_in_condorSchedd__abortTransactionResponse(soap, NULL, NULL, "condorSchedd:abortTransactionResponse");
	case SOAP_TYPE_condorSchedd__commitTransaction:
		return soap_in_condorSchedd__commitTransaction(soap, NULL, NULL, "condorSchedd:commitTransaction");
	case SOAP_TYPE_condorSchedd__commitTransactionResponse:
		return soap_in_condorSchedd__commitTransactionResponse(soap, NULL, NULL, "condorSchedd:commitTransactionResponse");
	case SOAP_TYPE_condorSchedd__beginTransaction:
		return soap_in_condorSchedd__beginTransaction(soap, NULL, NULL, "condorSchedd:beginTransaction");
	case SOAP_TYPE_condorSchedd__beginTransactionResponse:
		return soap_in_condorSchedd__beginTransactionResponse(soap, NULL, NULL, "condorSchedd:beginTransactionResponse");
	case SOAP_TYPE_condorCore__getPlatformString:
		return soap_in_condorCore__getPlatformString(soap, NULL, NULL, "condorCore:getPlatformString");
	case SOAP_TYPE_condorCore__getPlatformStringResponse:
		return soap_in_condorCore__getPlatformStringResponse(soap, NULL, NULL, "condorCore:getPlatformStringResponse");
	case SOAP_TYPE_condorCore__getVersionString:
		return soap_in_condorCore__getVersionString(soap, NULL, NULL, "condorCore:getVersionString");
	case SOAP_TYPE_condorCore__getVersionStringResponse:
		return soap_in_condorCore__getVersionStringResponse(soap, NULL, NULL, "condorCore:getVersionStringResponse");
	case SOAP_TYPE_condorCore__getInfoAd:
		return soap_in_condorCore__getInfoAd(soap, NULL, NULL, "condorCore:getInfoAd");
	case SOAP_TYPE_condorCore__getInfoAdResponse:
		return soap_in_condorCore__getInfoAdResponse(soap, NULL, NULL, "condorCore:getInfoAdResponse");
	case SOAP_TYPE_ClassAdStructArray:
		return soap_in_ClassAdStructArray(soap, NULL, NULL, "condorCore:ClassAdStructAttr[]");
	case SOAP_TYPE_ClassAdStruct:
		return soap_in_ClassAdStruct(soap, NULL, NULL, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_condorCore__ClassAdStructAttr:
		return soap_in_condorCore__ClassAdStructAttr(soap, NULL, NULL, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_PointerToClassAdStruct:
		return soap_in_PointerToClassAdStruct(soap, NULL, NULL, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr:
		return soap_in_PointerTocondorCore__ClassAdStructAttr(soap, NULL, NULL, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_xsd__anyURI:
	{	char **s;
		s = soap_in_xsd__anyURI(soap, NULL, NULL, "xsd:anyURI");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_xsd__string:
	{	char **s;
		s = soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
		if (!*soap->type)
			return NULL;
		if (!soap_match_tag(soap, soap->type, "xsd:byte"))
		{	*type = SOAP_TYPE_xsd__byte;
			return soap_in_xsd__byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:long"))
		{	*type = SOAP_TYPE_long;
			return soap_in_long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:long"))
		{	*type = SOAP_TYPE_xsd__long;
			return soap_in_xsd__long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:float"))
		{	*type = SOAP_TYPE_xsd__float;
			return soap_in_xsd__float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:positiveInteger"))
		{	*type = SOAP_TYPE_xsd__positiveInteger;
			return soap_in_xsd__positiveInteger(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_unsignedLONG64;
			return soap_in_unsignedLONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:boolean"))
		{	*type = SOAP_TYPE_xsd__boolean;
			return soap_in_xsd__boolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:getJobAd"))
		{	*type = SOAP_TYPE_condorSchedd__getJobAd;
			return soap_in_condorSchedd__getJobAd(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:getJobAdResponse"))
		{	*type = SOAP_TYPE_condorSchedd__getJobAdResponse;
			return soap_in_condorSchedd__getJobAdResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:getJobAds"))
		{	*type = SOAP_TYPE_condorSchedd__getJobAds;
			return soap_in_condorSchedd__getJobAds(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:getJobAdsResponse"))
		{	*type = SOAP_TYPE_condorSchedd__getJobAdsResponse;
			return soap_in_condorSchedd__getJobAdsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:submit"))
		{	*type = SOAP_TYPE_condorSchedd__submit;
			return soap_in_condorSchedd__submit(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:submitResponse"))
		{	*type = SOAP_TYPE_condorSchedd__submitResponse;
			return soap_in_condorSchedd__submitResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:releaseJob"))
		{	*type = SOAP_TYPE_condorSchedd__releaseJob;
			return soap_in_condorSchedd__releaseJob(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:releaseJobResponse"))
		{	*type = SOAP_TYPE_condorSchedd__releaseJobResponse;
			return soap_in_condorSchedd__releaseJobResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:holdJob"))
		{	*type = SOAP_TYPE_condorSchedd__holdJob;
			return soap_in_condorSchedd__holdJob(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:holdJobResponse"))
		{	*type = SOAP_TYPE_condorSchedd__holdJobResponse;
			return soap_in_condorSchedd__holdJobResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:removeJob"))
		{	*type = SOAP_TYPE_condorSchedd__removeJob;
			return soap_in_condorSchedd__removeJob(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:removeJobResponse"))
		{	*type = SOAP_TYPE_condorSchedd__removeJobResponse;
			return soap_in_condorSchedd__removeJobResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:newJob"))
		{	*type = SOAP_TYPE_condorSchedd__newJob;
			return soap_in_condorSchedd__newJob(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:newJobResponse"))
		{	*type = SOAP_TYPE_condorSchedd__newJobResponse;
			return soap_in_condorSchedd__newJobResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:removeCluster"))
		{	*type = SOAP_TYPE_condorSchedd__removeCluster;
			return soap_in_condorSchedd__removeCluster(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:removeClusterResponse"))
		{	*type = SOAP_TYPE_condorSchedd__removeClusterResponse;
			return soap_in_condorSchedd__removeClusterResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:newCluster"))
		{	*type = SOAP_TYPE_condorSchedd__newCluster;
			return soap_in_condorSchedd__newCluster(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:newClusterResponse"))
		{	*type = SOAP_TYPE_condorSchedd__newClusterResponse;
			return soap_in_condorSchedd__newClusterResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:extendTransaction"))
		{	*type = SOAP_TYPE_condorSchedd__extendTransaction;
			return soap_in_condorSchedd__extendTransaction(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:extendTransactionResponse"))
		{	*type = SOAP_TYPE_condorSchedd__extendTransactionResponse;
			return soap_in_condorSchedd__extendTransactionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:abortTransaction"))
		{	*type = SOAP_TYPE_condorSchedd__abortTransaction;
			return soap_in_condorSchedd__abortTransaction(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:abortTransactionResponse"))
		{	*type = SOAP_TYPE_condorSchedd__abortTransactionResponse;
			return soap_in_condorSchedd__abortTransactionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:commitTransaction"))
		{	*type = SOAP_TYPE_condorSchedd__commitTransaction;
			return soap_in_condorSchedd__commitTransaction(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:commitTransactionResponse"))
		{	*type = SOAP_TYPE_condorSchedd__commitTransactionResponse;
			return soap_in_condorSchedd__commitTransactionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:beginTransaction"))
		{	*type = SOAP_TYPE_condorSchedd__beginTransaction;
			return soap_in_condorSchedd__beginTransaction(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorSchedd:beginTransactionResponse"))
		{	*type = SOAP_TYPE_condorSchedd__beginTransactionResponse;
			return soap_in_condorSchedd__beginTransactionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorCore:getPlatformString"))
		{	*type = SOAP_TYPE_condorCore__getPlatformString;
			return soap_in_condorCore__getPlatformString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorCore:getPlatformStringResponse"))
		{	*type = SOAP_TYPE_condorCore__getPlatformStringResponse;
			return soap_in_condorCore__getPlatformStringResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorCore:getVersionString"))
		{	*type = SOAP_TYPE_condorCore__getVersionString;
			return soap_in_condorCore__getVersionString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorCore:getVersionStringResponse"))
		{	*type = SOAP_TYPE_condorCore__getVersionStringResponse;
			return soap_in_condorCore__getVersionStringResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorCore:getInfoAd"))
		{	*type = SOAP_TYPE_condorCore__getInfoAd;
			return soap_in_condorCore__getInfoAd(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorCore:getInfoAdResponse"))
		{	*type = SOAP_TYPE_condorCore__getInfoAdResponse;
			return soap_in_condorCore__getInfoAdResponse(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "condorCore:ClassAdStructAttr[]"))
		{	*type = SOAP_TYPE_ClassAdStructArray;
			return soap_in_ClassAdStructArray(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "condorCore:ClassAdStructAttr"))
		{	*type = SOAP_TYPE_ClassAdStruct;
			return soap_in_ClassAdStruct(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "condorCore:ClassAdStructAttr"))
		{	*type = SOAP_TYPE_condorCore__ClassAdStructAttr;
			return soap_in_condorCore__ClassAdStructAttr(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, soap->type, "QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, soap->type, "xsd:anyURI"))
		{	char **s;
			*type = SOAP_TYPE_xsd__anyURI;
			s = soap_in_xsd__anyURI(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, soap->type, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_xsd__string;
			s = soap_in_xsd__string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, soap->type, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	return NULL;
	}
}

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{	if (soap->mode & SOAP_XML_STRICT)
		return SOAP_TAG_MISMATCH;
	if (!soap_peek_element(soap))
	{	int t;
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unknown element '%s' (level=%u, %d)\n", soap->tag, soap->level, soap->body));
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if ((soap->mode & SOAP_IO_LENGTH) ? pp->mark1 == 2 : pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_out_xsd__byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_xsd__int:
		return soap_out_xsd__int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_long:
		return soap_out_long(soap, tag, id, (const long *)ptr, "xsd:long");
	case SOAP_TYPE_xsd__long:
		return soap_out_xsd__long(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_xsd__float:
		return soap_out_xsd__float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__positiveInteger:
		return soap_out_xsd__positiveInteger(soap, tag, id, (const ULONG64 *)ptr, "xsd:positiveInteger");
	case SOAP_TYPE_unsignedLONG64:
		return soap_out_unsignedLONG64(soap, tag, id, (const ULONG64 *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__boolean:
		return soap_out_xsd__boolean(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_condorSchedd__getJobAd:
		return soap_out_condorSchedd__getJobAd(soap, tag, id, (const struct condorSchedd__getJobAd *)ptr, "condorSchedd:getJobAd");
	case SOAP_TYPE_condorSchedd__getJobAdResponse:
		return soap_out_condorSchedd__getJobAdResponse(soap, tag, id, (const struct condorSchedd__getJobAdResponse *)ptr, "condorSchedd:getJobAdResponse");
	case SOAP_TYPE_condorSchedd__getJobAds:
		return soap_out_condorSchedd__getJobAds(soap, tag, id, (const struct condorSchedd__getJobAds *)ptr, "condorSchedd:getJobAds");
	case SOAP_TYPE_condorSchedd__getJobAdsResponse:
		return soap_out_condorSchedd__getJobAdsResponse(soap, tag, id, (const struct condorSchedd__getJobAdsResponse *)ptr, "condorSchedd:getJobAdsResponse");
	case SOAP_TYPE_condorSchedd__submit:
		return soap_out_condorSchedd__submit(soap, tag, id, (const struct condorSchedd__submit *)ptr, "condorSchedd:submit");
	case SOAP_TYPE_condorSchedd__submitResponse:
		return soap_out_condorSchedd__submitResponse(soap, tag, id, (const struct condorSchedd__submitResponse *)ptr, "condorSchedd:submitResponse");
	case SOAP_TYPE_condorSchedd__releaseJob:
		return soap_out_condorSchedd__releaseJob(soap, tag, id, (const struct condorSchedd__releaseJob *)ptr, "condorSchedd:releaseJob");
	case SOAP_TYPE_condorSchedd__releaseJobResponse:
		return soap_out_condorSchedd__releaseJobResponse(soap, tag, id, (const struct condorSchedd__releaseJobResponse *)ptr, "condorSchedd:releaseJobResponse");
	case SOAP_TYPE_condorSchedd__holdJob:
		return soap_out_condorSchedd__holdJob(soap, tag, id, (const struct condorSchedd__holdJob *)ptr, "condorSchedd:holdJob");
	case SOAP_TYPE_condorSchedd__holdJobResponse:
		return soap_out_condorSchedd__holdJobResponse(soap, tag, id, (const struct condorSchedd__holdJobResponse *)ptr, "condorSchedd:holdJobResponse");
	case SOAP_TYPE_condorSchedd__removeJob:
		return soap_out_condorSchedd__removeJob(soap, tag, id, (const struct condorSchedd__removeJob *)ptr, "condorSchedd:removeJob");
	case SOAP_TYPE_condorSchedd__removeJobResponse:
		return soap_out_condorSchedd__removeJobResponse(soap, tag, id, (const struct condorSchedd__removeJobResponse *)ptr, "condorSchedd:removeJobResponse");
	case SOAP_TYPE_condorSchedd__newJob:
		return soap_out_condorSchedd__newJob(soap, tag, id, (const struct condorSchedd__newJob *)ptr, "condorSchedd:newJob");
	case SOAP_TYPE_condorSchedd__newJobResponse:
		return soap_out_condorSchedd__newJobResponse(soap, tag, id, (const struct condorSchedd__newJobResponse *)ptr, "condorSchedd:newJobResponse");
	case SOAP_TYPE_condorSchedd__removeCluster:
		return soap_out_condorSchedd__removeCluster(soap, tag, id, (const struct condorSchedd__removeCluster *)ptr, "condorSchedd:removeCluster");
	case SOAP_TYPE_condorSchedd__removeClusterResponse:
		return soap_out_condorSchedd__removeClusterResponse(soap, tag, id, (const struct condorSchedd__removeClusterResponse *)ptr, "condorSchedd:removeClusterResponse");
	case SOAP_TYPE_condorSchedd__newCluster:
		return soap_out_condorSchedd__newCluster(soap, tag, id, (const struct condorSchedd__newCluster *)ptr, "condorSchedd:newCluster");
	case SOAP_TYPE_condorSchedd__newClusterResponse:
		return soap_out_condorSchedd__newClusterResponse(soap, tag, id, (const struct condorSchedd__newClusterResponse *)ptr, "condorSchedd:newClusterResponse");
	case SOAP_TYPE_condorSchedd__extendTransaction:
		return soap_out_condorSchedd__extendTransaction(soap, tag, id, (const struct condorSchedd__extendTransaction *)ptr, "condorSchedd:extendTransaction");
	case SOAP_TYPE_condorSchedd__extendTransactionResponse:
		return soap_out_condorSchedd__extendTransactionResponse(soap, tag, id, (const struct condorSchedd__extendTransactionResponse *)ptr, "condorSchedd:extendTransactionResponse");
	case SOAP_TYPE_condorSchedd__abortTransaction:
		return soap_out_condorSchedd__abortTransaction(soap, tag, id, (const struct condorSchedd__abortTransaction *)ptr, "condorSchedd:abortTransaction");
	case SOAP_TYPE_condorSchedd__abortTransactionResponse:
		return soap_out_condorSchedd__abortTransactionResponse(soap, tag, id, (const struct condorSchedd__abortTransactionResponse *)ptr, "condorSchedd:abortTransactionResponse");
	case SOAP_TYPE_condorSchedd__commitTransaction:
		return soap_out_condorSchedd__commitTransaction(soap, tag, id, (const struct condorSchedd__commitTransaction *)ptr, "condorSchedd:commitTransaction");
	case SOAP_TYPE_condorSchedd__commitTransactionResponse:
		return soap_out_condorSchedd__commitTransactionResponse(soap, tag, id, (const struct condorSchedd__commitTransactionResponse *)ptr, "condorSchedd:commitTransactionResponse");
	case SOAP_TYPE_condorSchedd__beginTransaction:
		return soap_out_condorSchedd__beginTransaction(soap, tag, id, (const struct condorSchedd__beginTransaction *)ptr, "condorSchedd:beginTransaction");
	case SOAP_TYPE_condorSchedd__beginTransactionResponse:
		return soap_out_condorSchedd__beginTransactionResponse(soap, tag, id, (const struct condorSchedd__beginTransactionResponse *)ptr, "condorSchedd:beginTransactionResponse");
	case SOAP_TYPE_condorCore__getPlatformString:
		return soap_out_condorCore__getPlatformString(soap, tag, id, (const struct condorCore__getPlatformString *)ptr, "condorCore:getPlatformString");
	case SOAP_TYPE_condorCore__getPlatformStringResponse:
		return soap_out_condorCore__getPlatformStringResponse(soap, tag, id, (const struct condorCore__getPlatformStringResponse *)ptr, "condorCore:getPlatformStringResponse");
	case SOAP_TYPE_condorCore__getVersionString:
		return soap_out_condorCore__getVersionString(soap, tag, id, (const struct condorCore__getVersionString *)ptr, "condorCore:getVersionString");
	case SOAP_TYPE_condorCore__getVersionStringResponse:
		return soap_out_condorCore__getVersionStringResponse(soap, tag, id, (const struct condorCore__getVersionStringResponse *)ptr, "condorCore:getVersionStringResponse");
	case SOAP_TYPE_condorCore__getInfoAd:
		return soap_out_condorCore__getInfoAd(soap, tag, id, (const struct condorCore__getInfoAd *)ptr, "condorCore:getInfoAd");
	case SOAP_TYPE_condorCore__getInfoAdResponse:
		return soap_out_condorCore__getInfoAdResponse(soap, tag, id, (const struct condorCore__getInfoAdResponse *)ptr, "condorCore:getInfoAdResponse");
	case SOAP_TYPE_ClassAdStructArray:
		return soap_out_ClassAdStructArray(soap, tag, id, (const struct ClassAdStructArray *)ptr, "condorCore:ClassAdStructAttr[]");
	case SOAP_TYPE_ClassAdStruct:
		return soap_out_ClassAdStruct(soap, tag, id, (const struct ClassAdStruct *)ptr, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_condorCore__ClassAdStructAttr:
		return soap_out_condorCore__ClassAdStructAttr(soap, tag, id, (const struct condorCore__ClassAdStructAttr *)ptr, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char**)&ptr, "QName");
	case SOAP_TYPE_PointerToClassAdStruct:
		return soap_out_PointerToClassAdStruct(soap, tag, id, (struct ClassAdStruct *const*)ptr, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr:
		return soap_out_PointerTocondorCore__ClassAdStructAttr(soap, tag, id, (struct condorCore__ClassAdStructAttr *const*)ptr, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_xsd__anyURI:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:anyURI");
	case SOAP_TYPE_xsd__string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifndef WITH_LEANER
SOAP_FMAC3 int SOAP_FMAC4 soap_getattachments(struct soap *soap)
{
	if (!(soap->mode & SOAP_ENC_DIME))
		return SOAP_OK;
	while (soap->dime_flags & SOAP_DIME_CF)
	{	if (soap_getdimehdr(soap))
			return soap->error;
		if (soap_move(soap, soap->dime_size))
			return soap->error = SOAP_EOF;
	}
	if (soap_move(soap, ((soap->dime_size+3)&(~3))-soap_tell(soap)))
		return soap->error = SOAP_EOF;
	for (;;)
	{	if (soap_getdime(soap) || !soap->dime_id)
			break;
		switch (soap_lookup_type(soap, soap->dime_id))
		{
		case SOAP_TYPE__QName:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE__QName, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		case SOAP_TYPE_xsd__anyURI:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE_xsd__anyURI, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		case SOAP_TYPE_xsd__string:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE_xsd__string, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		case SOAP_TYPE_string:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE_string, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		default:
			soap->error = SOAP_DIME_ERROR;
		}
		if (soap->error)
			break;
	}
	if (soap->error == SOAP_EOD)
		soap->error = SOAP_OK;
	return soap->error;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putattachments(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (!(soap->mode & SOAP_ENC_DIME))
		return SOAP_OK;
	for (i = 0; i < SOAP_PTRHASH; i++)
		for (pp = soap->pht[i]; pp; pp = pp->next)
			if (pp->mark2 == 3)
				switch (pp->type)
				{
				}
		
	return SOAP_OK;
}
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__byte(struct soap *soap, char *a)
{
#ifdef SOAP_DEFAULT_xsd__byte
	*a = SOAP_DEFAULT_xsd__byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__byte(struct soap *soap, char const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__byte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap *soap, char *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__byte);
	soap_out_xsd__byte(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_xsd__byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_xsd__byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_byte(struct soap *soap, char const*a)
{
	soap_reference(soap, a, SOAP_TYPE_byte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, char *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_byte);
	soap_out_byte(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__int(struct soap *soap, int *a)
{
#ifdef SOAP_DEFAULT_xsd__int
	*a = SOAP_DEFAULT_xsd__int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__int(struct soap *soap, int const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap *soap, int *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__int);
	soap_out_xsd__int(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_int(struct soap *soap, int const*a)
{
	soap_reference(soap, a, SOAP_TYPE_int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, int *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_int);
	soap_out_int(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_long(struct soap *soap, long *a)
{
#ifdef SOAP_DEFAULT_long
	*a = SOAP_DEFAULT_long;
#else
	*a = (long)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_long(struct soap *soap, long const*a)
{
	soap_reference(soap, a, SOAP_TYPE_long);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap *soap, long *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_long);
	soap_out_long(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_long);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_long(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap *soap, const char *tag, long *a, const char *type)
{
	return soap_inlong(soap, tag, a, type, SOAP_TYPE_long);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__long(struct soap *soap, LONG64 *a)
{
#ifdef SOAP_DEFAULT_xsd__long
	*a = SOAP_DEFAULT_xsd__long;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__long(struct soap *soap, LONG64 const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__long(struct soap *soap, LONG64 *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__long);
	soap_out_xsd__long(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__long(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__long(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_xsd__long(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	return soap_inLONG64(soap, tag, a, type, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_LONG64(struct soap *soap, LONG64 const*a)
{
	soap_reference(soap, a, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, LONG64 *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_LONG64);
	soap_out_LONG64(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	return soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__float(struct soap *soap, float *a)
{
#ifdef SOAP_DEFAULT_xsd__float
	*a = SOAP_DEFAULT_xsd__float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__float(struct soap *soap, float const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__float(struct soap *soap, float *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__float);
	soap_out_xsd__float(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_xsd__float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__float(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_xsd__float(struct soap *soap, const char *tag, float *a, const char *type)
{
	return soap_infloat(soap, tag, a, type, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_float(struct soap *soap, float const*a)
{
	soap_reference(soap, a, SOAP_TYPE_float);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, float *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_float);
	soap_out_float(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{
	return soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_unsignedInt(struct soap *soap, unsigned int const*a)
{
	soap_reference(soap, a, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, unsigned int *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_unsignedInt);
	soap_out_unsignedInt(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	return soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__positiveInteger(struct soap *soap, ULONG64 *a)
{
#ifdef SOAP_DEFAULT_xsd__positiveInteger
	*a = SOAP_DEFAULT_xsd__positiveInteger;
#else
	*a = (ULONG64)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__positiveInteger(struct soap *soap, ULONG64 const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__positiveInteger);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__positiveInteger(struct soap *soap, ULONG64 *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__positiveInteger);
	soap_out_xsd__positiveInteger(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__positiveInteger(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_xsd__positiveInteger);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_xsd__positiveInteger(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__positiveInteger(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_xsd__positiveInteger(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{
	return soap_inULONG64(soap, tag, a, type, SOAP_TYPE_xsd__positiveInteger);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap *soap, ULONG64 *a)
{
#ifdef SOAP_DEFAULT_unsignedLONG64
	*a = SOAP_DEFAULT_unsignedLONG64;
#else
	*a = (ULONG64)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_unsignedLONG64(struct soap *soap, ULONG64 const*a)
{
	soap_reference(soap, a, SOAP_TYPE_unsignedLONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap *soap, ULONG64 *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_unsignedLONG64);
	soap_out_unsignedLONG64(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_unsignedLONG64);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedLONG64(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{
	return soap_inULONG64(soap, tag, a, type, SOAP_TYPE_unsignedLONG64);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__boolean(struct soap *soap, bool *a)
{
#ifdef SOAP_DEFAULT_xsd__boolean
	*a = SOAP_DEFAULT_xsd__boolean;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__boolean(struct soap *soap, bool const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__boolean);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__boolean(struct soap *soap, bool *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__boolean);
	soap_out_xsd__boolean(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 const char* SOAP_FMAC4 soap_xsd__boolean2s(struct soap *soap, bool n)
{	switch (n)
	{
		case false: return "false";
		case true: return "true";
	}

	sprintf(soap->tmpbuf, SOAP_LONG_FORMAT, (LONG64)n);
	return soap->tmpbuf;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xsd__boolean), type);
	soap_send(soap, soap_xsd__boolean2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_xsd__boolean(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__boolean(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_s2xsd__boolean(struct soap *soap, const char *s, bool *a)
{
	if (!s)
	return SOAP_OK;
	if (!strcmp(s, "false"))
		*a = false;
	else if (!strcmp(s, "true"))
		*a = true;
	else 
	{	char *r;
		*a = (bool)strtol(s, &r, 10);
		if (*r)
			return soap->error = SOAP_TYPE_MISMATCH;
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_xsd__boolean(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
	soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (soap->body && !*soap->href)
	{	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(bool), 0);
		if (!a || soap_s2xsd__boolean(soap, soap_value(soap), a))
			return NULL;
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(bool), 0), SOAP_TYPE_xsd__boolean, sizeof(bool));
		if (soap->alloced)
			soap_default_xsd__boolean(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_bool(struct soap *soap, bool const*a)
{
	soap_reference(soap, a, SOAP_TYPE_bool);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, bool *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_bool);
	soap_out_bool(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 const char* SOAP_FMAC4 soap_bool2s(struct soap *soap, bool n)
{	switch (n)
	{
		case false: return "false";
		case true: return "true";
	}

	sprintf(soap->tmpbuf, SOAP_LONG_FORMAT, (LONG64)n);
	return soap->tmpbuf;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type);
	soap_send(soap, soap_bool2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	if (!s)
	return SOAP_OK;
	if (!strcmp(s, "false"))
		*a = false;
	else if (!strcmp(s, "true"))
		*a = true;
	else 
	{	char *r;
		*a = (bool)strtol(s, &r, 10);
		if (*r)
			return soap->error = SOAP_TYPE_MISMATCH;
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
	soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (soap->body && !*soap->href)
	{	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0);
		if (!a || soap_s2bool(soap, soap_value(soap), a))
			return NULL;
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0), SOAP_TYPE_bool, sizeof(bool));
		if (soap->alloced)
			soap_default_bool(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_SOAP_ENV__Fault))
		soap_mark_SOAP_ENV__Fault(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	soap_embedded(soap, &a->faultcode, SOAP_TYPE__QName);
	soap_mark__QName(soap, &a->faultcode);
	soap_embedded(soap, &a->faultstring, SOAP_TYPE_string);
	soap_mark_string(soap, &a->faultstring);
	soap_embedded(soap, &a->faultactor, SOAP_TYPE_string);
	soap_mark_string(soap, &a->faultactor);
	soap_embedded(soap, &a->detail, SOAP_TYPE_string);
	soap_mark_string(soap, &a->detail);
	soap_embedded(soap, &a->SOAP_ENV__Code, SOAP_TYPE_PointerToSOAP_ENV__Code);
	soap_mark_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_embedded(soap, &a->SOAP_ENV__Reason, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Reason);
	soap_embedded(soap, &a->SOAP_ENV__Detail, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	soap_default_string(soap, &a->detail);
	soap_default_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_default_string(soap, &a->SOAP_ENV__Reason);
	soap_default_string(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_SOAP_ENV__Fault);
	soap_out_SOAP_ENV__Fault(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type);
	soap_out__QName(soap, "faultcode", -1, &a->faultcode, "");
	soap_out_string(soap, "faultstring", -1, &a->faultstring, "");
	soap_out_string(soap, "faultactor", -1, &a->faultactor, "");
	soap_out_string(soap, "detail", -1, &a->detail, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, "");
	soap_out_string(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, "");
	soap_out_string(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_SOAP_ENV__Fault(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode = 0;
					continue;
				}
			if (soap_flag_faultstring && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "faultstring", &a->faultstring, ""))
				{	soap_flag_faultstring = 0;
					continue;
				}
			if (soap_flag_faultactor && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "faultactor", &a->faultactor, ""))
				{	soap_flag_faultactor = 0;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "detail", &a->detail, ""))
				{	soap_flag_detail = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0), SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault));
		if (soap->alloced)
			soap_default_SOAP_ENV__Fault(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_SOAP_ENV__Code))
		soap_mark_SOAP_ENV__Code(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	soap_embedded(soap, &a->SOAP_ENV__Value, SOAP_TYPE__QName);
	soap_mark__QName(soap, &a->SOAP_ENV__Value);
	soap_embedded(soap, &a->SOAP_ENV__Node, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Node);
	soap_embedded(soap, &a->SOAP_ENV__Role, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Role);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_SOAP_ENV__Code);
	soap_out_SOAP_ENV__Code(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type);
	soap_out__QName(soap, "SOAP-ENV:Value", -1, &a->SOAP_ENV__Value, "");
	soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, "");
	soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_SOAP_ENV__Code(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, ""))
				{	soap_flag_SOAP_ENV__Node = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, ""))
				{	soap_flag_SOAP_ENV__Role = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0), SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code));
		if (soap->alloced)
			soap_default_SOAP_ENV__Code(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_SOAP_ENV__Header))
		soap_mark_SOAP_ENV__Header(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	/* transient dummy skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	/* transient dummy skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_SOAP_ENV__Header);
	soap_out_SOAP_ENV__Header(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type);
	/* transient dummy skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_SOAP_ENV__Header(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
		/* transient dummy skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0), SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header));
		if (soap->alloced)
			soap_default_SOAP_ENV__Header(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__getJobAd(struct soap *soap, struct condorSchedd__getJobAd const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__getJobAd))
		soap_mark_condorSchedd__getJobAd(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__getJobAd(struct soap *soap, const struct condorSchedd__getJobAd *a)
{
	soap_embedded(soap, &a->transactionId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->jobId, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__getJobAd(struct soap *soap, struct condorSchedd__getJobAd *a)
{
	soap_default_xsd__int(soap, &a->transactionId);
	soap_default_xsd__int(soap, &a->clusterId);
	soap_default_xsd__int(soap, &a->jobId);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__getJobAd(struct soap *soap, struct condorSchedd__getJobAd *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__getJobAd);
	soap_out_condorSchedd__getJobAd(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__getJobAd(struct soap *soap, const char *tag, int id, const struct condorSchedd__getJobAd *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__getJobAd), type);
	soap_out_xsd__int(soap, "transactionId", -1, &a->transactionId, "xsd:int");
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_out_xsd__int(soap, "jobId", -1, &a->jobId, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__getJobAd * SOAP_FMAC4 soap_get_condorSchedd__getJobAd(struct soap *soap, struct condorSchedd__getJobAd *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__getJobAd(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__getJobAd * SOAP_FMAC4 soap_in_condorSchedd__getJobAd(struct soap *soap, const char *tag, struct condorSchedd__getJobAd *a, const char *type)
{
	short soap_flag_transactionId = 1, soap_flag_clusterId = 1, soap_flag_jobId = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__getJobAd *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__getJobAd, sizeof(struct condorSchedd__getJobAd), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__getJobAd(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transactionId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "transactionId", &a->transactionId, "xsd:int"))
				{	soap_flag_transactionId = 0;
					continue;
				}
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap_flag_jobId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "jobId", &a->jobId, "xsd:int"))
				{	soap_flag_jobId = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__getJobAd *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__getJobAd, sizeof(struct condorSchedd__getJobAd), 0), SOAP_TYPE_condorSchedd__getJobAd, sizeof(struct condorSchedd__getJobAd));
		if (soap->alloced)
			soap_default_condorSchedd__getJobAd(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__getJobAdResponse(struct soap *soap, struct condorSchedd__getJobAdResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__getJobAdResponse))
		soap_mark_condorSchedd__getJobAdResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__getJobAdResponse(struct soap *soap, const struct condorSchedd__getJobAdResponse *a)
{
	soap_embedded(soap, &a->result, SOAP_TYPE_ClassAdStruct);
	soap_mark_ClassAdStruct(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__getJobAdResponse(struct soap *soap, struct condorSchedd__getJobAdResponse *a)
{
	soap_default_ClassAdStruct(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__getJobAdResponse(struct soap *soap, struct condorSchedd__getJobAdResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__getJobAdResponse);
	soap_out_condorSchedd__getJobAdResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__getJobAdResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__getJobAdResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__getJobAdResponse), type);
	soap_element_result(soap, "result");
	soap_out_ClassAdStruct(soap, "result", -1, &a->result, "condorCore:ClassAdStructAttr");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__getJobAdResponse * SOAP_FMAC4 soap_get_condorSchedd__getJobAdResponse(struct soap *soap, struct condorSchedd__getJobAdResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__getJobAdResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__getJobAdResponse * SOAP_FMAC4 soap_in_condorSchedd__getJobAdResponse(struct soap *soap, const char *tag, struct condorSchedd__getJobAdResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__getJobAdResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__getJobAdResponse, sizeof(struct condorSchedd__getJobAdResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__getJobAdResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ClassAdStruct(soap, "result", &a->result, "condorCore:ClassAdStructAttr"))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__getJobAdResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__getJobAdResponse, sizeof(struct condorSchedd__getJobAdResponse), 0), SOAP_TYPE_condorSchedd__getJobAdResponse, sizeof(struct condorSchedd__getJobAdResponse));
		if (soap->alloced)
			soap_default_condorSchedd__getJobAdResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__getJobAds(struct soap *soap, struct condorSchedd__getJobAds const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__getJobAds))
		soap_mark_condorSchedd__getJobAds(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__getJobAds(struct soap *soap, const struct condorSchedd__getJobAds *a)
{
	soap_embedded(soap, &a->transactionId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->constraint, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->constraint);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__getJobAds(struct soap *soap, struct condorSchedd__getJobAds *a)
{
	soap_default_xsd__int(soap, &a->transactionId);
	soap_default_xsd__string(soap, &a->constraint);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__getJobAds(struct soap *soap, struct condorSchedd__getJobAds *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__getJobAds);
	soap_out_condorSchedd__getJobAds(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__getJobAds(struct soap *soap, const char *tag, int id, const struct condorSchedd__getJobAds *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__getJobAds), type);
	soap_out_xsd__int(soap, "transactionId", -1, &a->transactionId, "xsd:int");
	soap_out_xsd__string(soap, "constraint", -1, &a->constraint, "xsd:string");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__getJobAds * SOAP_FMAC4 soap_get_condorSchedd__getJobAds(struct soap *soap, struct condorSchedd__getJobAds *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__getJobAds(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__getJobAds * SOAP_FMAC4 soap_in_condorSchedd__getJobAds(struct soap *soap, const char *tag, struct condorSchedd__getJobAds *a, const char *type)
{
	short soap_flag_transactionId = 1, soap_flag_constraint = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__getJobAds *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__getJobAds, sizeof(struct condorSchedd__getJobAds), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__getJobAds(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transactionId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "transactionId", &a->transactionId, "xsd:int"))
				{	soap_flag_transactionId = 0;
					continue;
				}
			if (soap_flag_constraint && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "constraint", &a->constraint, "xsd:string"))
				{	soap_flag_constraint = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__getJobAds *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__getJobAds, sizeof(struct condorSchedd__getJobAds), 0), SOAP_TYPE_condorSchedd__getJobAds, sizeof(struct condorSchedd__getJobAds));
		if (soap->alloced)
			soap_default_condorSchedd__getJobAds(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__getJobAdsResponse(struct soap *soap, struct condorSchedd__getJobAdsResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__getJobAdsResponse))
		soap_mark_condorSchedd__getJobAdsResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__getJobAdsResponse(struct soap *soap, const struct condorSchedd__getJobAdsResponse *a)
{
	soap_embedded(soap, &a->result, SOAP_TYPE_ClassAdStructArray);
	soap_mark_ClassAdStructArray(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__getJobAdsResponse(struct soap *soap, struct condorSchedd__getJobAdsResponse *a)
{
	soap_default_ClassAdStructArray(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__getJobAdsResponse(struct soap *soap, struct condorSchedd__getJobAdsResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__getJobAdsResponse);
	soap_out_condorSchedd__getJobAdsResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__getJobAdsResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__getJobAdsResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__getJobAdsResponse), type);
	soap_element_result(soap, "result");
	soap_out_ClassAdStructArray(soap, "result", -1, &a->result, "condorCore:ClassAdStructAttr[]");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__getJobAdsResponse * SOAP_FMAC4 soap_get_condorSchedd__getJobAdsResponse(struct soap *soap, struct condorSchedd__getJobAdsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__getJobAdsResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__getJobAdsResponse * SOAP_FMAC4 soap_in_condorSchedd__getJobAdsResponse(struct soap *soap, const char *tag, struct condorSchedd__getJobAdsResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__getJobAdsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__getJobAdsResponse, sizeof(struct condorSchedd__getJobAdsResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__getJobAdsResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ClassAdStructArray(soap, "result", &a->result, "condorCore:ClassAdStructAttr[]"))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__getJobAdsResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__getJobAdsResponse, sizeof(struct condorSchedd__getJobAdsResponse), 0), SOAP_TYPE_condorSchedd__getJobAdsResponse, sizeof(struct condorSchedd__getJobAdsResponse));
		if (soap->alloced)
			soap_default_condorSchedd__getJobAdsResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__submit(struct soap *soap, struct condorSchedd__submit const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__submit))
		soap_mark_condorSchedd__submit(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__submit(struct soap *soap, const struct condorSchedd__submit *a)
{
	soap_embedded(soap, &a->transactionId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->jobId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->jobAd, SOAP_TYPE_PointerToClassAdStruct);
	soap_mark_PointerToClassAdStruct(soap, &a->jobAd);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__submit(struct soap *soap, struct condorSchedd__submit *a)
{
	soap_default_xsd__int(soap, &a->transactionId);
	soap_default_xsd__int(soap, &a->clusterId);
	soap_default_xsd__int(soap, &a->jobId);
	soap_default_PointerToClassAdStruct(soap, &a->jobAd);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__submit(struct soap *soap, struct condorSchedd__submit *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__submit);
	soap_out_condorSchedd__submit(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__submit(struct soap *soap, const char *tag, int id, const struct condorSchedd__submit *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__submit), type);
	soap_out_xsd__int(soap, "transactionId", -1, &a->transactionId, "xsd:int");
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_out_xsd__int(soap, "jobId", -1, &a->jobId, "xsd:int");
	soap_out_PointerToClassAdStruct(soap, "jobAd", -1, &a->jobAd, "condorCore:ClassAdStructAttr");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__submit * SOAP_FMAC4 soap_get_condorSchedd__submit(struct soap *soap, struct condorSchedd__submit *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__submit(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__submit * SOAP_FMAC4 soap_in_condorSchedd__submit(struct soap *soap, const char *tag, struct condorSchedd__submit *a, const char *type)
{
	short soap_flag_transactionId = 1, soap_flag_clusterId = 1, soap_flag_jobId = 1, soap_flag_jobAd = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__submit *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__submit, sizeof(struct condorSchedd__submit), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__submit(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transactionId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "transactionId", &a->transactionId, "xsd:int"))
				{	soap_flag_transactionId = 0;
					continue;
				}
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap_flag_jobId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "jobId", &a->jobId, "xsd:int"))
				{	soap_flag_jobId = 0;
					continue;
				}
			if (soap_flag_jobAd && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToClassAdStruct(soap, "jobAd", &a->jobAd, "condorCore:ClassAdStructAttr"))
				{	soap_flag_jobAd = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__submit *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__submit, sizeof(struct condorSchedd__submit), 0), SOAP_TYPE_condorSchedd__submit, sizeof(struct condorSchedd__submit));
		if (soap->alloced)
			soap_default_condorSchedd__submit(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__submitResponse(struct soap *soap, struct condorSchedd__submitResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__submitResponse))
		soap_mark_condorSchedd__submitResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__submitResponse(struct soap *soap, const struct condorSchedd__submitResponse *a)
{
	soap_embedded(soap, &a->result, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__submitResponse(struct soap *soap, struct condorSchedd__submitResponse *a)
{
	soap_default_xsd__int(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__submitResponse(struct soap *soap, struct condorSchedd__submitResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__submitResponse);
	soap_out_condorSchedd__submitResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__submitResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__submitResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__submitResponse), type);
	soap_element_result(soap, "result");
	soap_out_xsd__int(soap, "result", -1, &a->result, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__submitResponse * SOAP_FMAC4 soap_get_condorSchedd__submitResponse(struct soap *soap, struct condorSchedd__submitResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__submitResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__submitResponse * SOAP_FMAC4 soap_in_condorSchedd__submitResponse(struct soap *soap, const char *tag, struct condorSchedd__submitResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__submitResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__submitResponse, sizeof(struct condorSchedd__submitResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__submitResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__submitResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__submitResponse, sizeof(struct condorSchedd__submitResponse), 0), SOAP_TYPE_condorSchedd__submitResponse, sizeof(struct condorSchedd__submitResponse));
		if (soap->alloced)
			soap_default_condorSchedd__submitResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__releaseJob(struct soap *soap, struct condorSchedd__releaseJob const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__releaseJob))
		soap_mark_condorSchedd__releaseJob(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__releaseJob(struct soap *soap, const struct condorSchedd__releaseJob *a)
{
	soap_embedded(soap, &a->transactionId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->jobId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->reason, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->reason);
	soap_embedded(soap, &a->email_user, SOAP_TYPE_xsd__boolean);
	soap_embedded(soap, &a->email_admin, SOAP_TYPE_xsd__boolean);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__releaseJob(struct soap *soap, struct condorSchedd__releaseJob *a)
{
	soap_default_xsd__int(soap, &a->transactionId);
	soap_default_xsd__int(soap, &a->clusterId);
	soap_default_xsd__int(soap, &a->jobId);
	soap_default_xsd__string(soap, &a->reason);
	soap_default_xsd__boolean(soap, &a->email_user);
	soap_default_xsd__boolean(soap, &a->email_admin);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__releaseJob(struct soap *soap, struct condorSchedd__releaseJob *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__releaseJob);
	soap_out_condorSchedd__releaseJob(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__releaseJob(struct soap *soap, const char *tag, int id, const struct condorSchedd__releaseJob *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__releaseJob), type);
	soap_out_xsd__int(soap, "transactionId", -1, &a->transactionId, "xsd:int");
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_out_xsd__int(soap, "jobId", -1, &a->jobId, "xsd:int");
	soap_out_xsd__string(soap, "reason", -1, &a->reason, "xsd:string");
	soap_out_xsd__boolean(soap, "email-user", -1, &a->email_user, "xsd:boolean");
	soap_out_xsd__boolean(soap, "email-admin", -1, &a->email_admin, "xsd:boolean");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__releaseJob * SOAP_FMAC4 soap_get_condorSchedd__releaseJob(struct soap *soap, struct condorSchedd__releaseJob *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__releaseJob(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__releaseJob * SOAP_FMAC4 soap_in_condorSchedd__releaseJob(struct soap *soap, const char *tag, struct condorSchedd__releaseJob *a, const char *type)
{
	short soap_flag_transactionId = 1, soap_flag_clusterId = 1, soap_flag_jobId = 1, soap_flag_reason = 1, soap_flag_email_user = 1, soap_flag_email_admin = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__releaseJob *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__releaseJob, sizeof(struct condorSchedd__releaseJob), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__releaseJob(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transactionId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "transactionId", &a->transactionId, "xsd:int"))
				{	soap_flag_transactionId = 0;
					continue;
				}
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap_flag_jobId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "jobId", &a->jobId, "xsd:int"))
				{	soap_flag_jobId = 0;
					continue;
				}
			if (soap_flag_reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "reason", &a->reason, "xsd:string"))
				{	soap_flag_reason = 0;
					continue;
				}
			if (soap_flag_email_user && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "email-user", &a->email_user, "xsd:boolean"))
				{	soap_flag_email_user = 0;
					continue;
				}
			if (soap_flag_email_admin && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "email-admin", &a->email_admin, "xsd:boolean"))
				{	soap_flag_email_admin = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__releaseJob *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__releaseJob, sizeof(struct condorSchedd__releaseJob), 0), SOAP_TYPE_condorSchedd__releaseJob, sizeof(struct condorSchedd__releaseJob));
		if (soap->alloced)
			soap_default_condorSchedd__releaseJob(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__releaseJobResponse(struct soap *soap, struct condorSchedd__releaseJobResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__releaseJobResponse))
		soap_mark_condorSchedd__releaseJobResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__releaseJobResponse(struct soap *soap, const struct condorSchedd__releaseJobResponse *a)
{
	soap_embedded(soap, &a->result, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__releaseJobResponse(struct soap *soap, struct condorSchedd__releaseJobResponse *a)
{
	soap_default_xsd__int(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__releaseJobResponse(struct soap *soap, struct condorSchedd__releaseJobResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__releaseJobResponse);
	soap_out_condorSchedd__releaseJobResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__releaseJobResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__releaseJobResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__releaseJobResponse), type);
	soap_element_result(soap, "result");
	soap_out_xsd__int(soap, "result", -1, &a->result, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__releaseJobResponse * SOAP_FMAC4 soap_get_condorSchedd__releaseJobResponse(struct soap *soap, struct condorSchedd__releaseJobResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__releaseJobResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__releaseJobResponse * SOAP_FMAC4 soap_in_condorSchedd__releaseJobResponse(struct soap *soap, const char *tag, struct condorSchedd__releaseJobResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__releaseJobResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__releaseJobResponse, sizeof(struct condorSchedd__releaseJobResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__releaseJobResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__releaseJobResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__releaseJobResponse, sizeof(struct condorSchedd__releaseJobResponse), 0), SOAP_TYPE_condorSchedd__releaseJobResponse, sizeof(struct condorSchedd__releaseJobResponse));
		if (soap->alloced)
			soap_default_condorSchedd__releaseJobResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__holdJob(struct soap *soap, struct condorSchedd__holdJob const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__holdJob))
		soap_mark_condorSchedd__holdJob(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__holdJob(struct soap *soap, const struct condorSchedd__holdJob *a)
{
	soap_embedded(soap, &a->transactionId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->jobId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->reason, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->reason);
	soap_embedded(soap, &a->email_user, SOAP_TYPE_xsd__boolean);
	soap_embedded(soap, &a->email_admin, SOAP_TYPE_xsd__boolean);
	soap_embedded(soap, &a->system_hold, SOAP_TYPE_xsd__boolean);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__holdJob(struct soap *soap, struct condorSchedd__holdJob *a)
{
	soap_default_xsd__int(soap, &a->transactionId);
	soap_default_xsd__int(soap, &a->clusterId);
	soap_default_xsd__int(soap, &a->jobId);
	soap_default_xsd__string(soap, &a->reason);
	soap_default_xsd__boolean(soap, &a->email_user);
	soap_default_xsd__boolean(soap, &a->email_admin);
	soap_default_xsd__boolean(soap, &a->system_hold);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__holdJob(struct soap *soap, struct condorSchedd__holdJob *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__holdJob);
	soap_out_condorSchedd__holdJob(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__holdJob(struct soap *soap, const char *tag, int id, const struct condorSchedd__holdJob *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__holdJob), type);
	soap_out_xsd__int(soap, "transactionId", -1, &a->transactionId, "xsd:int");
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_out_xsd__int(soap, "jobId", -1, &a->jobId, "xsd:int");
	soap_out_xsd__string(soap, "reason", -1, &a->reason, "xsd:string");
	soap_out_xsd__boolean(soap, "email-user", -1, &a->email_user, "xsd:boolean");
	soap_out_xsd__boolean(soap, "email-admin", -1, &a->email_admin, "xsd:boolean");
	soap_out_xsd__boolean(soap, "system-hold", -1, &a->system_hold, "xsd:boolean");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__holdJob * SOAP_FMAC4 soap_get_condorSchedd__holdJob(struct soap *soap, struct condorSchedd__holdJob *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__holdJob(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__holdJob * SOAP_FMAC4 soap_in_condorSchedd__holdJob(struct soap *soap, const char *tag, struct condorSchedd__holdJob *a, const char *type)
{
	short soap_flag_transactionId = 1, soap_flag_clusterId = 1, soap_flag_jobId = 1, soap_flag_reason = 1, soap_flag_email_user = 1, soap_flag_email_admin = 1, soap_flag_system_hold = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__holdJob *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__holdJob, sizeof(struct condorSchedd__holdJob), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__holdJob(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transactionId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "transactionId", &a->transactionId, "xsd:int"))
				{	soap_flag_transactionId = 0;
					continue;
				}
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap_flag_jobId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "jobId", &a->jobId, "xsd:int"))
				{	soap_flag_jobId = 0;
					continue;
				}
			if (soap_flag_reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "reason", &a->reason, "xsd:string"))
				{	soap_flag_reason = 0;
					continue;
				}
			if (soap_flag_email_user && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "email-user", &a->email_user, "xsd:boolean"))
				{	soap_flag_email_user = 0;
					continue;
				}
			if (soap_flag_email_admin && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "email-admin", &a->email_admin, "xsd:boolean"))
				{	soap_flag_email_admin = 0;
					continue;
				}
			if (soap_flag_system_hold && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "system-hold", &a->system_hold, "xsd:boolean"))
				{	soap_flag_system_hold = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__holdJob *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__holdJob, sizeof(struct condorSchedd__holdJob), 0), SOAP_TYPE_condorSchedd__holdJob, sizeof(struct condorSchedd__holdJob));
		if (soap->alloced)
			soap_default_condorSchedd__holdJob(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__holdJobResponse(struct soap *soap, struct condorSchedd__holdJobResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__holdJobResponse))
		soap_mark_condorSchedd__holdJobResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__holdJobResponse(struct soap *soap, const struct condorSchedd__holdJobResponse *a)
{
	soap_embedded(soap, &a->result, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__holdJobResponse(struct soap *soap, struct condorSchedd__holdJobResponse *a)
{
	soap_default_xsd__int(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__holdJobResponse(struct soap *soap, struct condorSchedd__holdJobResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__holdJobResponse);
	soap_out_condorSchedd__holdJobResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__holdJobResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__holdJobResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__holdJobResponse), type);
	soap_element_result(soap, "result");
	soap_out_xsd__int(soap, "result", -1, &a->result, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__holdJobResponse * SOAP_FMAC4 soap_get_condorSchedd__holdJobResponse(struct soap *soap, struct condorSchedd__holdJobResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__holdJobResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__holdJobResponse * SOAP_FMAC4 soap_in_condorSchedd__holdJobResponse(struct soap *soap, const char *tag, struct condorSchedd__holdJobResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__holdJobResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__holdJobResponse, sizeof(struct condorSchedd__holdJobResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__holdJobResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__holdJobResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__holdJobResponse, sizeof(struct condorSchedd__holdJobResponse), 0), SOAP_TYPE_condorSchedd__holdJobResponse, sizeof(struct condorSchedd__holdJobResponse));
		if (soap->alloced)
			soap_default_condorSchedd__holdJobResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__removeJob(struct soap *soap, struct condorSchedd__removeJob const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__removeJob))
		soap_mark_condorSchedd__removeJob(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__removeJob(struct soap *soap, const struct condorSchedd__removeJob *a)
{
	soap_embedded(soap, &a->transactionId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->jobId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->reason, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->reason);
	soap_embedded(soap, &a->force_removal, SOAP_TYPE_xsd__boolean);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__removeJob(struct soap *soap, struct condorSchedd__removeJob *a)
{
	soap_default_xsd__int(soap, &a->transactionId);
	soap_default_xsd__int(soap, &a->clusterId);
	soap_default_xsd__int(soap, &a->jobId);
	soap_default_xsd__string(soap, &a->reason);
	soap_default_xsd__boolean(soap, &a->force_removal);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__removeJob(struct soap *soap, struct condorSchedd__removeJob *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__removeJob);
	soap_out_condorSchedd__removeJob(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__removeJob(struct soap *soap, const char *tag, int id, const struct condorSchedd__removeJob *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__removeJob), type);
	soap_out_xsd__int(soap, "transactionId", -1, &a->transactionId, "xsd:int");
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_out_xsd__int(soap, "jobId", -1, &a->jobId, "xsd:int");
	soap_out_xsd__string(soap, "reason", -1, &a->reason, "xsd:string");
	soap_out_xsd__boolean(soap, "force-removal", -1, &a->force_removal, "xsd:boolean");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__removeJob * SOAP_FMAC4 soap_get_condorSchedd__removeJob(struct soap *soap, struct condorSchedd__removeJob *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__removeJob(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__removeJob * SOAP_FMAC4 soap_in_condorSchedd__removeJob(struct soap *soap, const char *tag, struct condorSchedd__removeJob *a, const char *type)
{
	short soap_flag_transactionId = 1, soap_flag_clusterId = 1, soap_flag_jobId = 1, soap_flag_reason = 1, soap_flag_force_removal = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__removeJob *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__removeJob, sizeof(struct condorSchedd__removeJob), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__removeJob(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transactionId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "transactionId", &a->transactionId, "xsd:int"))
				{	soap_flag_transactionId = 0;
					continue;
				}
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap_flag_jobId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "jobId", &a->jobId, "xsd:int"))
				{	soap_flag_jobId = 0;
					continue;
				}
			if (soap_flag_reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "reason", &a->reason, "xsd:string"))
				{	soap_flag_reason = 0;
					continue;
				}
			if (soap_flag_force_removal && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "force-removal", &a->force_removal, "xsd:boolean"))
				{	soap_flag_force_removal = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__removeJob *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__removeJob, sizeof(struct condorSchedd__removeJob), 0), SOAP_TYPE_condorSchedd__removeJob, sizeof(struct condorSchedd__removeJob));
		if (soap->alloced)
			soap_default_condorSchedd__removeJob(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__removeJobResponse(struct soap *soap, struct condorSchedd__removeJobResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__removeJobResponse))
		soap_mark_condorSchedd__removeJobResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__removeJobResponse(struct soap *soap, const struct condorSchedd__removeJobResponse *a)
{
	soap_embedded(soap, &a->result, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__removeJobResponse(struct soap *soap, struct condorSchedd__removeJobResponse *a)
{
	soap_default_xsd__int(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__removeJobResponse(struct soap *soap, struct condorSchedd__removeJobResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__removeJobResponse);
	soap_out_condorSchedd__removeJobResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__removeJobResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__removeJobResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__removeJobResponse), type);
	soap_element_result(soap, "result");
	soap_out_xsd__int(soap, "result", -1, &a->result, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__removeJobResponse * SOAP_FMAC4 soap_get_condorSchedd__removeJobResponse(struct soap *soap, struct condorSchedd__removeJobResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__removeJobResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__removeJobResponse * SOAP_FMAC4 soap_in_condorSchedd__removeJobResponse(struct soap *soap, const char *tag, struct condorSchedd__removeJobResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__removeJobResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__removeJobResponse, sizeof(struct condorSchedd__removeJobResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__removeJobResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__removeJobResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__removeJobResponse, sizeof(struct condorSchedd__removeJobResponse), 0), SOAP_TYPE_condorSchedd__removeJobResponse, sizeof(struct condorSchedd__removeJobResponse));
		if (soap->alloced)
			soap_default_condorSchedd__removeJobResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__newJob(struct soap *soap, struct condorSchedd__newJob const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__newJob))
		soap_mark_condorSchedd__newJob(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__newJob(struct soap *soap, const struct condorSchedd__newJob *a)
{
	soap_embedded(soap, &a->transactionId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__newJob(struct soap *soap, struct condorSchedd__newJob *a)
{
	soap_default_xsd__int(soap, &a->transactionId);
	soap_default_xsd__int(soap, &a->clusterId);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__newJob(struct soap *soap, struct condorSchedd__newJob *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__newJob);
	soap_out_condorSchedd__newJob(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__newJob(struct soap *soap, const char *tag, int id, const struct condorSchedd__newJob *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__newJob), type);
	soap_out_xsd__int(soap, "transactionId", -1, &a->transactionId, "xsd:int");
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__newJob * SOAP_FMAC4 soap_get_condorSchedd__newJob(struct soap *soap, struct condorSchedd__newJob *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__newJob(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__newJob * SOAP_FMAC4 soap_in_condorSchedd__newJob(struct soap *soap, const char *tag, struct condorSchedd__newJob *a, const char *type)
{
	short soap_flag_transactionId = 1, soap_flag_clusterId = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__newJob *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__newJob, sizeof(struct condorSchedd__newJob), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__newJob(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transactionId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "transactionId", &a->transactionId, "xsd:int"))
				{	soap_flag_transactionId = 0;
					continue;
				}
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__newJob *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__newJob, sizeof(struct condorSchedd__newJob), 0), SOAP_TYPE_condorSchedd__newJob, sizeof(struct condorSchedd__newJob));
		if (soap->alloced)
			soap_default_condorSchedd__newJob(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__newJobResponse(struct soap *soap, struct condorSchedd__newJobResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__newJobResponse))
		soap_mark_condorSchedd__newJobResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__newJobResponse(struct soap *soap, const struct condorSchedd__newJobResponse *a)
{
	soap_embedded(soap, &a->result, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__newJobResponse(struct soap *soap, struct condorSchedd__newJobResponse *a)
{
	soap_default_xsd__int(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__newJobResponse(struct soap *soap, struct condorSchedd__newJobResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__newJobResponse);
	soap_out_condorSchedd__newJobResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__newJobResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__newJobResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__newJobResponse), type);
	soap_element_result(soap, "result");
	soap_out_xsd__int(soap, "result", -1, &a->result, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__newJobResponse * SOAP_FMAC4 soap_get_condorSchedd__newJobResponse(struct soap *soap, struct condorSchedd__newJobResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__newJobResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__newJobResponse * SOAP_FMAC4 soap_in_condorSchedd__newJobResponse(struct soap *soap, const char *tag, struct condorSchedd__newJobResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__newJobResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__newJobResponse, sizeof(struct condorSchedd__newJobResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__newJobResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__newJobResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__newJobResponse, sizeof(struct condorSchedd__newJobResponse), 0), SOAP_TYPE_condorSchedd__newJobResponse, sizeof(struct condorSchedd__newJobResponse));
		if (soap->alloced)
			soap_default_condorSchedd__newJobResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__removeCluster(struct soap *soap, struct condorSchedd__removeCluster const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__removeCluster))
		soap_mark_condorSchedd__removeCluster(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__removeCluster(struct soap *soap, const struct condorSchedd__removeCluster *a)
{
	soap_embedded(soap, &a->transactionId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->reason, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->reason);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__removeCluster(struct soap *soap, struct condorSchedd__removeCluster *a)
{
	soap_default_xsd__int(soap, &a->transactionId);
	soap_default_xsd__int(soap, &a->clusterId);
	soap_default_xsd__string(soap, &a->reason);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__removeCluster(struct soap *soap, struct condorSchedd__removeCluster *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__removeCluster);
	soap_out_condorSchedd__removeCluster(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__removeCluster(struct soap *soap, const char *tag, int id, const struct condorSchedd__removeCluster *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__removeCluster), type);
	soap_out_xsd__int(soap, "transactionId", -1, &a->transactionId, "xsd:int");
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_out_xsd__string(soap, "reason", -1, &a->reason, "xsd:string");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__removeCluster * SOAP_FMAC4 soap_get_condorSchedd__removeCluster(struct soap *soap, struct condorSchedd__removeCluster *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__removeCluster(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__removeCluster * SOAP_FMAC4 soap_in_condorSchedd__removeCluster(struct soap *soap, const char *tag, struct condorSchedd__removeCluster *a, const char *type)
{
	short soap_flag_transactionId = 1, soap_flag_clusterId = 1, soap_flag_reason = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__removeCluster *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__removeCluster, sizeof(struct condorSchedd__removeCluster), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__removeCluster(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transactionId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "transactionId", &a->transactionId, "xsd:int"))
				{	soap_flag_transactionId = 0;
					continue;
				}
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap_flag_reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "reason", &a->reason, "xsd:string"))
				{	soap_flag_reason = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__removeCluster *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__removeCluster, sizeof(struct condorSchedd__removeCluster), 0), SOAP_TYPE_condorSchedd__removeCluster, sizeof(struct condorSchedd__removeCluster));
		if (soap->alloced)
			soap_default_condorSchedd__removeCluster(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__removeClusterResponse(struct soap *soap, struct condorSchedd__removeClusterResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__removeClusterResponse))
		soap_mark_condorSchedd__removeClusterResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__removeClusterResponse(struct soap *soap, const struct condorSchedd__removeClusterResponse *a)
{
	soap_embedded(soap, &a->result, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__removeClusterResponse(struct soap *soap, struct condorSchedd__removeClusterResponse *a)
{
	soap_default_xsd__int(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__removeClusterResponse(struct soap *soap, struct condorSchedd__removeClusterResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__removeClusterResponse);
	soap_out_condorSchedd__removeClusterResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__removeClusterResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__removeClusterResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__removeClusterResponse), type);
	soap_element_result(soap, "result");
	soap_out_xsd__int(soap, "result", -1, &a->result, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__removeClusterResponse * SOAP_FMAC4 soap_get_condorSchedd__removeClusterResponse(struct soap *soap, struct condorSchedd__removeClusterResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__removeClusterResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__removeClusterResponse * SOAP_FMAC4 soap_in_condorSchedd__removeClusterResponse(struct soap *soap, const char *tag, struct condorSchedd__removeClusterResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__removeClusterResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__removeClusterResponse, sizeof(struct condorSchedd__removeClusterResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__removeClusterResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__removeClusterResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__removeClusterResponse, sizeof(struct condorSchedd__removeClusterResponse), 0), SOAP_TYPE_condorSchedd__removeClusterResponse, sizeof(struct condorSchedd__removeClusterResponse));
		if (soap->alloced)
			soap_default_condorSchedd__removeClusterResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__newCluster(struct soap *soap, struct condorSchedd__newCluster const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__newCluster))
		soap_mark_condorSchedd__newCluster(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__newCluster(struct soap *soap, const struct condorSchedd__newCluster *a)
{
	soap_embedded(soap, &a->transactionId, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__newCluster(struct soap *soap, struct condorSchedd__newCluster *a)
{
	soap_default_xsd__int(soap, &a->transactionId);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__newCluster(struct soap *soap, struct condorSchedd__newCluster *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__newCluster);
	soap_out_condorSchedd__newCluster(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__newCluster(struct soap *soap, const char *tag, int id, const struct condorSchedd__newCluster *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__newCluster), type);
	soap_out_xsd__int(soap, "transactionId", -1, &a->transactionId, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__newCluster * SOAP_FMAC4 soap_get_condorSchedd__newCluster(struct soap *soap, struct condorSchedd__newCluster *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__newCluster(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__newCluster * SOAP_FMAC4 soap_in_condorSchedd__newCluster(struct soap *soap, const char *tag, struct condorSchedd__newCluster *a, const char *type)
{
	short soap_flag_transactionId = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__newCluster *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__newCluster, sizeof(struct condorSchedd__newCluster), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__newCluster(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transactionId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "transactionId", &a->transactionId, "xsd:int"))
				{	soap_flag_transactionId = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__newCluster *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__newCluster, sizeof(struct condorSchedd__newCluster), 0), SOAP_TYPE_condorSchedd__newCluster, sizeof(struct condorSchedd__newCluster));
		if (soap->alloced)
			soap_default_condorSchedd__newCluster(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__newClusterResponse(struct soap *soap, struct condorSchedd__newClusterResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__newClusterResponse))
		soap_mark_condorSchedd__newClusterResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__newClusterResponse(struct soap *soap, const struct condorSchedd__newClusterResponse *a)
{
	soap_embedded(soap, &a->result, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__newClusterResponse(struct soap *soap, struct condorSchedd__newClusterResponse *a)
{
	soap_default_xsd__int(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__newClusterResponse(struct soap *soap, struct condorSchedd__newClusterResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__newClusterResponse);
	soap_out_condorSchedd__newClusterResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__newClusterResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__newClusterResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__newClusterResponse), type);
	soap_element_result(soap, "result");
	soap_out_xsd__int(soap, "result", -1, &a->result, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__newClusterResponse * SOAP_FMAC4 soap_get_condorSchedd__newClusterResponse(struct soap *soap, struct condorSchedd__newClusterResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__newClusterResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__newClusterResponse * SOAP_FMAC4 soap_in_condorSchedd__newClusterResponse(struct soap *soap, const char *tag, struct condorSchedd__newClusterResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__newClusterResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__newClusterResponse, sizeof(struct condorSchedd__newClusterResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__newClusterResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__newClusterResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__newClusterResponse, sizeof(struct condorSchedd__newClusterResponse), 0), SOAP_TYPE_condorSchedd__newClusterResponse, sizeof(struct condorSchedd__newClusterResponse));
		if (soap->alloced)
			soap_default_condorSchedd__newClusterResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__extendTransaction(struct soap *soap, struct condorSchedd__extendTransaction const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__extendTransaction))
		soap_mark_condorSchedd__extendTransaction(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__extendTransaction(struct soap *soap, const struct condorSchedd__extendTransaction *a)
{
	soap_embedded(soap, &a->transactionId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->duration, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__extendTransaction(struct soap *soap, struct condorSchedd__extendTransaction *a)
{
	soap_default_xsd__int(soap, &a->transactionId);
	soap_default_xsd__int(soap, &a->duration);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__extendTransaction(struct soap *soap, struct condorSchedd__extendTransaction *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__extendTransaction);
	soap_out_condorSchedd__extendTransaction(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__extendTransaction(struct soap *soap, const char *tag, int id, const struct condorSchedd__extendTransaction *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__extendTransaction), type);
	soap_out_xsd__int(soap, "transactionId", -1, &a->transactionId, "xsd:int");
	soap_out_xsd__int(soap, "duration", -1, &a->duration, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__extendTransaction * SOAP_FMAC4 soap_get_condorSchedd__extendTransaction(struct soap *soap, struct condorSchedd__extendTransaction *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__extendTransaction(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__extendTransaction * SOAP_FMAC4 soap_in_condorSchedd__extendTransaction(struct soap *soap, const char *tag, struct condorSchedd__extendTransaction *a, const char *type)
{
	short soap_flag_transactionId = 1, soap_flag_duration = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__extendTransaction *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__extendTransaction, sizeof(struct condorSchedd__extendTransaction), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__extendTransaction(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transactionId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "transactionId", &a->transactionId, "xsd:int"))
				{	soap_flag_transactionId = 0;
					continue;
				}
			if (soap_flag_duration && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "duration", &a->duration, "xsd:int"))
				{	soap_flag_duration = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__extendTransaction *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__extendTransaction, sizeof(struct condorSchedd__extendTransaction), 0), SOAP_TYPE_condorSchedd__extendTransaction, sizeof(struct condorSchedd__extendTransaction));
		if (soap->alloced)
			soap_default_condorSchedd__extendTransaction(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__extendTransactionResponse(struct soap *soap, struct condorSchedd__extendTransactionResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__extendTransactionResponse))
		soap_mark_condorSchedd__extendTransactionResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__extendTransactionResponse(struct soap *soap, const struct condorSchedd__extendTransactionResponse *a)
{
	soap_embedded(soap, &a->result, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__extendTransactionResponse(struct soap *soap, struct condorSchedd__extendTransactionResponse *a)
{
	soap_default_xsd__int(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__extendTransactionResponse(struct soap *soap, struct condorSchedd__extendTransactionResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__extendTransactionResponse);
	soap_out_condorSchedd__extendTransactionResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__extendTransactionResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__extendTransactionResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__extendTransactionResponse), type);
	soap_element_result(soap, "result");
	soap_out_xsd__int(soap, "result", -1, &a->result, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__extendTransactionResponse * SOAP_FMAC4 soap_get_condorSchedd__extendTransactionResponse(struct soap *soap, struct condorSchedd__extendTransactionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__extendTransactionResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__extendTransactionResponse * SOAP_FMAC4 soap_in_condorSchedd__extendTransactionResponse(struct soap *soap, const char *tag, struct condorSchedd__extendTransactionResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__extendTransactionResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__extendTransactionResponse, sizeof(struct condorSchedd__extendTransactionResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__extendTransactionResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__extendTransactionResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__extendTransactionResponse, sizeof(struct condorSchedd__extendTransactionResponse), 0), SOAP_TYPE_condorSchedd__extendTransactionResponse, sizeof(struct condorSchedd__extendTransactionResponse));
		if (soap->alloced)
			soap_default_condorSchedd__extendTransactionResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__abortTransaction(struct soap *soap, struct condorSchedd__abortTransaction const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__abortTransaction))
		soap_mark_condorSchedd__abortTransaction(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__abortTransaction(struct soap *soap, const struct condorSchedd__abortTransaction *a)
{
	soap_embedded(soap, &a->transactionId, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__abortTransaction(struct soap *soap, struct condorSchedd__abortTransaction *a)
{
	soap_default_xsd__int(soap, &a->transactionId);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__abortTransaction(struct soap *soap, struct condorSchedd__abortTransaction *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__abortTransaction);
	soap_out_condorSchedd__abortTransaction(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__abortTransaction(struct soap *soap, const char *tag, int id, const struct condorSchedd__abortTransaction *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__abortTransaction), type);
	soap_out_xsd__int(soap, "transactionId", -1, &a->transactionId, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__abortTransaction * SOAP_FMAC4 soap_get_condorSchedd__abortTransaction(struct soap *soap, struct condorSchedd__abortTransaction *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__abortTransaction(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__abortTransaction * SOAP_FMAC4 soap_in_condorSchedd__abortTransaction(struct soap *soap, const char *tag, struct condorSchedd__abortTransaction *a, const char *type)
{
	short soap_flag_transactionId = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__abortTransaction *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__abortTransaction, sizeof(struct condorSchedd__abortTransaction), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__abortTransaction(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transactionId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "transactionId", &a->transactionId, "xsd:int"))
				{	soap_flag_transactionId = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__abortTransaction *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__abortTransaction, sizeof(struct condorSchedd__abortTransaction), 0), SOAP_TYPE_condorSchedd__abortTransaction, sizeof(struct condorSchedd__abortTransaction));
		if (soap->alloced)
			soap_default_condorSchedd__abortTransaction(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__abortTransactionResponse(struct soap *soap, struct condorSchedd__abortTransactionResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__abortTransactionResponse))
		soap_mark_condorSchedd__abortTransactionResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__abortTransactionResponse(struct soap *soap, const struct condorSchedd__abortTransactionResponse *a)
{
	soap_embedded(soap, &a->result, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__abortTransactionResponse(struct soap *soap, struct condorSchedd__abortTransactionResponse *a)
{
	soap_default_xsd__int(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__abortTransactionResponse(struct soap *soap, struct condorSchedd__abortTransactionResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__abortTransactionResponse);
	soap_out_condorSchedd__abortTransactionResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__abortTransactionResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__abortTransactionResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__abortTransactionResponse), type);
	soap_element_result(soap, "result");
	soap_out_xsd__int(soap, "result", -1, &a->result, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__abortTransactionResponse * SOAP_FMAC4 soap_get_condorSchedd__abortTransactionResponse(struct soap *soap, struct condorSchedd__abortTransactionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__abortTransactionResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__abortTransactionResponse * SOAP_FMAC4 soap_in_condorSchedd__abortTransactionResponse(struct soap *soap, const char *tag, struct condorSchedd__abortTransactionResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__abortTransactionResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__abortTransactionResponse, sizeof(struct condorSchedd__abortTransactionResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__abortTransactionResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__abortTransactionResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__abortTransactionResponse, sizeof(struct condorSchedd__abortTransactionResponse), 0), SOAP_TYPE_condorSchedd__abortTransactionResponse, sizeof(struct condorSchedd__abortTransactionResponse));
		if (soap->alloced)
			soap_default_condorSchedd__abortTransactionResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__commitTransaction(struct soap *soap, struct condorSchedd__commitTransaction const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__commitTransaction))
		soap_mark_condorSchedd__commitTransaction(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__commitTransaction(struct soap *soap, const struct condorSchedd__commitTransaction *a)
{
	soap_embedded(soap, &a->transactionId, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__commitTransaction(struct soap *soap, struct condorSchedd__commitTransaction *a)
{
	soap_default_xsd__int(soap, &a->transactionId);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__commitTransaction(struct soap *soap, struct condorSchedd__commitTransaction *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__commitTransaction);
	soap_out_condorSchedd__commitTransaction(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__commitTransaction(struct soap *soap, const char *tag, int id, const struct condorSchedd__commitTransaction *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__commitTransaction), type);
	soap_out_xsd__int(soap, "transactionId", -1, &a->transactionId, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__commitTransaction * SOAP_FMAC4 soap_get_condorSchedd__commitTransaction(struct soap *soap, struct condorSchedd__commitTransaction *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__commitTransaction(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__commitTransaction * SOAP_FMAC4 soap_in_condorSchedd__commitTransaction(struct soap *soap, const char *tag, struct condorSchedd__commitTransaction *a, const char *type)
{
	short soap_flag_transactionId = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__commitTransaction *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__commitTransaction, sizeof(struct condorSchedd__commitTransaction), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__commitTransaction(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transactionId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "transactionId", &a->transactionId, "xsd:int"))
				{	soap_flag_transactionId = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__commitTransaction *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__commitTransaction, sizeof(struct condorSchedd__commitTransaction), 0), SOAP_TYPE_condorSchedd__commitTransaction, sizeof(struct condorSchedd__commitTransaction));
		if (soap->alloced)
			soap_default_condorSchedd__commitTransaction(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__commitTransactionResponse(struct soap *soap, struct condorSchedd__commitTransactionResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__commitTransactionResponse))
		soap_mark_condorSchedd__commitTransactionResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__commitTransactionResponse(struct soap *soap, const struct condorSchedd__commitTransactionResponse *a)
{
	soap_embedded(soap, &a->result, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__commitTransactionResponse(struct soap *soap, struct condorSchedd__commitTransactionResponse *a)
{
	soap_default_xsd__int(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__commitTransactionResponse(struct soap *soap, struct condorSchedd__commitTransactionResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__commitTransactionResponse);
	soap_out_condorSchedd__commitTransactionResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__commitTransactionResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__commitTransactionResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__commitTransactionResponse), type);
	soap_element_result(soap, "result");
	soap_out_xsd__int(soap, "result", -1, &a->result, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__commitTransactionResponse * SOAP_FMAC4 soap_get_condorSchedd__commitTransactionResponse(struct soap *soap, struct condorSchedd__commitTransactionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__commitTransactionResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__commitTransactionResponse * SOAP_FMAC4 soap_in_condorSchedd__commitTransactionResponse(struct soap *soap, const char *tag, struct condorSchedd__commitTransactionResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__commitTransactionResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__commitTransactionResponse, sizeof(struct condorSchedd__commitTransactionResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__commitTransactionResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__commitTransactionResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__commitTransactionResponse, sizeof(struct condorSchedd__commitTransactionResponse), 0), SOAP_TYPE_condorSchedd__commitTransactionResponse, sizeof(struct condorSchedd__commitTransactionResponse));
		if (soap->alloced)
			soap_default_condorSchedd__commitTransactionResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__beginTransaction(struct soap *soap, struct condorSchedd__beginTransaction const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__beginTransaction))
		soap_mark_condorSchedd__beginTransaction(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__beginTransaction(struct soap *soap, const struct condorSchedd__beginTransaction *a)
{
	soap_embedded(soap, &a->duration, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__beginTransaction(struct soap *soap, struct condorSchedd__beginTransaction *a)
{
	soap_default_xsd__int(soap, &a->duration);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__beginTransaction(struct soap *soap, struct condorSchedd__beginTransaction *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__beginTransaction);
	soap_out_condorSchedd__beginTransaction(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__beginTransaction(struct soap *soap, const char *tag, int id, const struct condorSchedd__beginTransaction *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__beginTransaction), type);
	soap_out_xsd__int(soap, "duration", -1, &a->duration, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__beginTransaction * SOAP_FMAC4 soap_get_condorSchedd__beginTransaction(struct soap *soap, struct condorSchedd__beginTransaction *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__beginTransaction(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__beginTransaction * SOAP_FMAC4 soap_in_condorSchedd__beginTransaction(struct soap *soap, const char *tag, struct condorSchedd__beginTransaction *a, const char *type)
{
	short soap_flag_duration = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__beginTransaction *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__beginTransaction, sizeof(struct condorSchedd__beginTransaction), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__beginTransaction(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_duration && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "duration", &a->duration, "xsd:int"))
				{	soap_flag_duration = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__beginTransaction *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__beginTransaction, sizeof(struct condorSchedd__beginTransaction), 0), SOAP_TYPE_condorSchedd__beginTransaction, sizeof(struct condorSchedd__beginTransaction));
		if (soap->alloced)
			soap_default_condorSchedd__beginTransaction(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__beginTransactionResponse(struct soap *soap, struct condorSchedd__beginTransactionResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__beginTransactionResponse))
		soap_mark_condorSchedd__beginTransactionResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__beginTransactionResponse(struct soap *soap, const struct condorSchedd__beginTransactionResponse *a)
{
	soap_embedded(soap, &a->transactionId, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__beginTransactionResponse(struct soap *soap, struct condorSchedd__beginTransactionResponse *a)
{
	soap_default_xsd__int(soap, &a->transactionId);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__beginTransactionResponse(struct soap *soap, struct condorSchedd__beginTransactionResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__beginTransactionResponse);
	soap_out_condorSchedd__beginTransactionResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__beginTransactionResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__beginTransactionResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__beginTransactionResponse), type);
	soap_element_result(soap, "transactionId");
	soap_out_xsd__int(soap, "transactionId", -1, &a->transactionId, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__beginTransactionResponse * SOAP_FMAC4 soap_get_condorSchedd__beginTransactionResponse(struct soap *soap, struct condorSchedd__beginTransactionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__beginTransactionResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__beginTransactionResponse * SOAP_FMAC4 soap_in_condorSchedd__beginTransactionResponse(struct soap *soap, const char *tag, struct condorSchedd__beginTransactionResponse *a, const char *type)
{
	short soap_flag_transactionId = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__beginTransactionResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__beginTransactionResponse, sizeof(struct condorSchedd__beginTransactionResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__beginTransactionResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transactionId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "transactionId", &a->transactionId, "xsd:int"))
				{	soap_flag_transactionId = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__beginTransactionResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__beginTransactionResponse, sizeof(struct condorSchedd__beginTransactionResponse), 0), SOAP_TYPE_condorSchedd__beginTransactionResponse, sizeof(struct condorSchedd__beginTransactionResponse));
		if (soap->alloced)
			soap_default_condorSchedd__beginTransactionResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__getPlatformString(struct soap *soap, struct condorCore__getPlatformString const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorCore__getPlatformString))
		soap_mark_condorCore__getPlatformString(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorCore__getPlatformString(struct soap *soap, const struct condorCore__getPlatformString *a)
{
	/* transient _ skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__getPlatformString(struct soap *soap, struct condorCore__getPlatformString *a)
{
	/* transient _ skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__getPlatformString(struct soap *soap, struct condorCore__getPlatformString *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__getPlatformString);
	soap_out_condorCore__getPlatformString(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__getPlatformString(struct soap *soap, const char *tag, int id, const struct condorCore__getPlatformString *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__getPlatformString), type);
	/* transient _ skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorCore__getPlatformString * SOAP_FMAC4 soap_get_condorCore__getPlatformString(struct soap *soap, struct condorCore__getPlatformString *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__getPlatformString(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__getPlatformString * SOAP_FMAC4 soap_in_condorCore__getPlatformString(struct soap *soap, const char *tag, struct condorCore__getPlatformString *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorCore__getPlatformString *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getPlatformString, sizeof(struct condorCore__getPlatformString), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorCore__getPlatformString(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _ skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorCore__getPlatformString *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getPlatformString, sizeof(struct condorCore__getPlatformString), 0), SOAP_TYPE_condorCore__getPlatformString, sizeof(struct condorCore__getPlatformString));
		if (soap->alloced)
			soap_default_condorCore__getPlatformString(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__getPlatformStringResponse(struct soap *soap, struct condorCore__getPlatformStringResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorCore__getPlatformStringResponse))
		soap_mark_condorCore__getPlatformStringResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorCore__getPlatformStringResponse(struct soap *soap, const struct condorCore__getPlatformStringResponse *a)
{
	soap_embedded(soap, &a->verstring, SOAP_TYPE_string);
	soap_mark_string(soap, &a->verstring);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__getPlatformStringResponse(struct soap *soap, struct condorCore__getPlatformStringResponse *a)
{
	soap_default_string(soap, &a->verstring);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__getPlatformStringResponse(struct soap *soap, struct condorCore__getPlatformStringResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__getPlatformStringResponse);
	soap_out_condorCore__getPlatformStringResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__getPlatformStringResponse(struct soap *soap, const char *tag, int id, const struct condorCore__getPlatformStringResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__getPlatformStringResponse), type);
	if (a->verstring)
		soap_element_result(soap, "verstring");
	soap_out_string(soap, "verstring", -1, &a->verstring, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorCore__getPlatformStringResponse * SOAP_FMAC4 soap_get_condorCore__getPlatformStringResponse(struct soap *soap, struct condorCore__getPlatformStringResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__getPlatformStringResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__getPlatformStringResponse * SOAP_FMAC4 soap_in_condorCore__getPlatformStringResponse(struct soap *soap, const char *tag, struct condorCore__getPlatformStringResponse *a, const char *type)
{
	short soap_flag_verstring = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorCore__getPlatformStringResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getPlatformStringResponse, sizeof(struct condorCore__getPlatformStringResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorCore__getPlatformStringResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_verstring && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "verstring", &a->verstring, ""))
				{	soap_flag_verstring = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorCore__getPlatformStringResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getPlatformStringResponse, sizeof(struct condorCore__getPlatformStringResponse), 0), SOAP_TYPE_condorCore__getPlatformStringResponse, sizeof(struct condorCore__getPlatformStringResponse));
		if (soap->alloced)
			soap_default_condorCore__getPlatformStringResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__getVersionString(struct soap *soap, struct condorCore__getVersionString const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorCore__getVersionString))
		soap_mark_condorCore__getVersionString(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorCore__getVersionString(struct soap *soap, const struct condorCore__getVersionString *a)
{
	/* transient _ skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__getVersionString(struct soap *soap, struct condorCore__getVersionString *a)
{
	/* transient _ skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__getVersionString(struct soap *soap, struct condorCore__getVersionString *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__getVersionString);
	soap_out_condorCore__getVersionString(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__getVersionString(struct soap *soap, const char *tag, int id, const struct condorCore__getVersionString *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__getVersionString), type);
	/* transient _ skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorCore__getVersionString * SOAP_FMAC4 soap_get_condorCore__getVersionString(struct soap *soap, struct condorCore__getVersionString *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__getVersionString(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__getVersionString * SOAP_FMAC4 soap_in_condorCore__getVersionString(struct soap *soap, const char *tag, struct condorCore__getVersionString *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorCore__getVersionString *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getVersionString, sizeof(struct condorCore__getVersionString), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorCore__getVersionString(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _ skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorCore__getVersionString *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getVersionString, sizeof(struct condorCore__getVersionString), 0), SOAP_TYPE_condorCore__getVersionString, sizeof(struct condorCore__getVersionString));
		if (soap->alloced)
			soap_default_condorCore__getVersionString(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__getVersionStringResponse(struct soap *soap, struct condorCore__getVersionStringResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorCore__getVersionStringResponse))
		soap_mark_condorCore__getVersionStringResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorCore__getVersionStringResponse(struct soap *soap, const struct condorCore__getVersionStringResponse *a)
{
	soap_embedded(soap, &a->verstring, SOAP_TYPE_string);
	soap_mark_string(soap, &a->verstring);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__getVersionStringResponse(struct soap *soap, struct condorCore__getVersionStringResponse *a)
{
	soap_default_string(soap, &a->verstring);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__getVersionStringResponse(struct soap *soap, struct condorCore__getVersionStringResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__getVersionStringResponse);
	soap_out_condorCore__getVersionStringResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__getVersionStringResponse(struct soap *soap, const char *tag, int id, const struct condorCore__getVersionStringResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__getVersionStringResponse), type);
	if (a->verstring)
		soap_element_result(soap, "verstring");
	soap_out_string(soap, "verstring", -1, &a->verstring, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorCore__getVersionStringResponse * SOAP_FMAC4 soap_get_condorCore__getVersionStringResponse(struct soap *soap, struct condorCore__getVersionStringResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__getVersionStringResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__getVersionStringResponse * SOAP_FMAC4 soap_in_condorCore__getVersionStringResponse(struct soap *soap, const char *tag, struct condorCore__getVersionStringResponse *a, const char *type)
{
	short soap_flag_verstring = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorCore__getVersionStringResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getVersionStringResponse, sizeof(struct condorCore__getVersionStringResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorCore__getVersionStringResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_verstring && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "verstring", &a->verstring, ""))
				{	soap_flag_verstring = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorCore__getVersionStringResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getVersionStringResponse, sizeof(struct condorCore__getVersionStringResponse), 0), SOAP_TYPE_condorCore__getVersionStringResponse, sizeof(struct condorCore__getVersionStringResponse));
		if (soap->alloced)
			soap_default_condorCore__getVersionStringResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__getInfoAd(struct soap *soap, struct condorCore__getInfoAd const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorCore__getInfoAd))
		soap_mark_condorCore__getInfoAd(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorCore__getInfoAd(struct soap *soap, const struct condorCore__getInfoAd *a)
{
	/* transient _ skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__getInfoAd(struct soap *soap, struct condorCore__getInfoAd *a)
{
	/* transient _ skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__getInfoAd(struct soap *soap, struct condorCore__getInfoAd *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__getInfoAd);
	soap_out_condorCore__getInfoAd(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__getInfoAd(struct soap *soap, const char *tag, int id, const struct condorCore__getInfoAd *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__getInfoAd), type);
	/* transient _ skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorCore__getInfoAd * SOAP_FMAC4 soap_get_condorCore__getInfoAd(struct soap *soap, struct condorCore__getInfoAd *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__getInfoAd(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__getInfoAd * SOAP_FMAC4 soap_in_condorCore__getInfoAd(struct soap *soap, const char *tag, struct condorCore__getInfoAd *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorCore__getInfoAd *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getInfoAd, sizeof(struct condorCore__getInfoAd), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorCore__getInfoAd(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _ skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorCore__getInfoAd *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getInfoAd, sizeof(struct condorCore__getInfoAd), 0), SOAP_TYPE_condorCore__getInfoAd, sizeof(struct condorCore__getInfoAd));
		if (soap->alloced)
			soap_default_condorCore__getInfoAd(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__getInfoAdResponse(struct soap *soap, struct condorCore__getInfoAdResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorCore__getInfoAdResponse))
		soap_mark_condorCore__getInfoAdResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorCore__getInfoAdResponse(struct soap *soap, const struct condorCore__getInfoAdResponse *a)
{
	soap_embedded(soap, &a->ad, SOAP_TYPE_ClassAdStruct);
	soap_mark_ClassAdStruct(soap, &a->ad);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__getInfoAdResponse(struct soap *soap, struct condorCore__getInfoAdResponse *a)
{
	soap_default_ClassAdStruct(soap, &a->ad);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__getInfoAdResponse(struct soap *soap, struct condorCore__getInfoAdResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__getInfoAdResponse);
	soap_out_condorCore__getInfoAdResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__getInfoAdResponse(struct soap *soap, const char *tag, int id, const struct condorCore__getInfoAdResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__getInfoAdResponse), type);
	soap_element_result(soap, "ad");
	soap_out_ClassAdStruct(soap, "ad", -1, &a->ad, "condorCore:ClassAdStructAttr");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorCore__getInfoAdResponse * SOAP_FMAC4 soap_get_condorCore__getInfoAdResponse(struct soap *soap, struct condorCore__getInfoAdResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__getInfoAdResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__getInfoAdResponse * SOAP_FMAC4 soap_in_condorCore__getInfoAdResponse(struct soap *soap, const char *tag, struct condorCore__getInfoAdResponse *a, const char *type)
{
	short soap_flag_ad = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorCore__getInfoAdResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getInfoAdResponse, sizeof(struct condorCore__getInfoAdResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorCore__getInfoAdResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ad && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ClassAdStruct(soap, "ad", &a->ad, "condorCore:ClassAdStructAttr"))
				{	soap_flag_ad = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorCore__getInfoAdResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__getInfoAdResponse, sizeof(struct condorCore__getInfoAdResponse), 0), SOAP_TYPE_condorCore__getInfoAdResponse, sizeof(struct condorCore__getInfoAdResponse));
		if (soap->alloced)
			soap_default_condorCore__getInfoAdResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ClassAdStructArray(struct soap *soap, struct ClassAdStructArray const*a)
{
	soap_mark_ClassAdStructArray(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_ClassAdStructArray(struct soap *soap, struct ClassAdStructArray const*a)
{
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, a->__size, SOAP_TYPE_ClassAdStructArray))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_ClassAdStruct);
			soap_mark_ClassAdStruct(soap, a->__ptr + i);
		}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ClassAdStructArray(struct soap *soap, struct ClassAdStructArray *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ClassAdStructArray(struct soap *soap, struct ClassAdStructArray *a, const char *tag, const char *type)
{
	int i = soap_embed_array(soap, (void*)a, (struct soap_array*)&a->__ptr, a->__size, tag, SOAP_TYPE_ClassAdStructArray);
	soap_out_ClassAdStructArray(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ClassAdStructArray(struct soap *soap, const char *tag, int id, const struct ClassAdStructArray *a, const char *type)
{
	int i;
	struct soap_plist *pp;
	int n = a->__size;
	char *t = soap_putsize(soap, type, a->__size);
	i = soap_array_pointer_lookup(soap, a, (struct soap_array*)&a->__ptr, n, SOAP_TYPE_ClassAdStructArray, &pp);
	if (!a->__ptr)
	{	soap_element_null(soap, tag, i, t);
		return SOAP_OK;
	}
	if (id <= 0 && i)
	{	if (soap_is_embedded(soap, pp))
		{	soap_element_ref(soap, tag, 0, i);
			return SOAP_OK;
		}
		if (soap_is_single(soap, pp))
			i = 0;
	}
	else if (id > 0)
		i = id;
	soap_array_begin_out(soap, tag, i, t, NULL);
	if (i)
		soap_set_embedded(soap, pp);
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_ClassAdStruct(soap, "item", 0, &a->__ptr[i], "condorCore:ClassAdStructAttr");
	}
	soap->position = 0;
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ClassAdStructArray * SOAP_FMAC4 soap_get_ClassAdStructArray(struct soap *soap, struct ClassAdStructArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_ClassAdStructArray(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ClassAdStructArray * SOAP_FMAC4 soap_in_ClassAdStructArray(struct soap *soap, const char *tag, struct ClassAdStructArray *a, const char *type)
{	int i, j;
	struct ClassAdStruct *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if ((a = (struct ClassAdStructArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStructArray, sizeof(struct ClassAdStructArray), 0)))
			soap_default_ClassAdStructArray(soap, a);
			if (soap->body && soap_element_end_in(soap, tag))
				return NULL;
	}
	else if (!*soap->href)
	{	if (!(a = (struct ClassAdStructArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStructArray, sizeof(struct ClassAdStructArray), 0)))
			return NULL;
		if (soap->alloced)
			soap_default_ClassAdStructArray(soap, a);
		if (soap->body)
		{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (struct ClassAdStruct *)soap_malloc(soap, sizeof(struct ClassAdStruct) * a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_ClassAdStruct(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
					return NULL;
					}
				}
				if (!soap_in_ClassAdStruct(soap, NULL, a->__ptr + i, "condorCore:ClassAdStructAttr"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (struct ClassAdStruct *)soap_push_block(soap, sizeof(struct ClassAdStruct));
				if (!p)
					return NULL;
				soap_default_ClassAdStruct(soap, p);
				if (!soap_in_ClassAdStruct(soap, NULL, p, "condorCore:ClassAdStructAttr"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
			soap_pop_block(soap);
			a->__ptr = (struct ClassAdStruct *)soap_malloc(soap, soap->blist->size);
			soap_store_block(soap, (char*)a->__ptr);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct ClassAdStructArray *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStructArray, sizeof(struct ClassAdStructArray), 0), SOAP_TYPE_ClassAdStructArray, sizeof(struct ClassAdStructArray));
		if (soap->alloced)
			soap_default_ClassAdStructArray(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ClassAdStruct(struct soap *soap, struct ClassAdStruct const*a)
{
	soap_mark_ClassAdStruct(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_ClassAdStruct(struct soap *soap, struct ClassAdStruct const*a)
{
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, a->__size, SOAP_TYPE_ClassAdStruct))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_condorCore__ClassAdStructAttr);
			soap_mark_condorCore__ClassAdStructAttr(soap, a->__ptr + i);
		}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ClassAdStruct(struct soap *soap, struct ClassAdStruct *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ClassAdStruct(struct soap *soap, struct ClassAdStruct *a, const char *tag, const char *type)
{
	int i = soap_embed_array(soap, (void*)a, (struct soap_array*)&a->__ptr, a->__size, tag, SOAP_TYPE_ClassAdStruct);
	soap_out_ClassAdStruct(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ClassAdStruct(struct soap *soap, const char *tag, int id, const struct ClassAdStruct *a, const char *type)
{
	int i;
	struct soap_plist *pp;
	int n = a->__size;
	char *t = soap_putsize(soap, type, a->__size);
	i = soap_array_pointer_lookup(soap, a, (struct soap_array*)&a->__ptr, n, SOAP_TYPE_ClassAdStruct, &pp);
	if (!a->__ptr)
	{	soap_element_null(soap, tag, i, t);
		return SOAP_OK;
	}
	if (id <= 0 && i)
	{	if (soap_is_embedded(soap, pp))
		{	soap_element_ref(soap, tag, 0, i);
			return SOAP_OK;
		}
		if (soap_is_single(soap, pp))
			i = 0;
	}
	else if (id > 0)
		i = id;
	soap_array_begin_out(soap, tag, i, t, NULL);
	if (i)
		soap_set_embedded(soap, pp);
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_condorCore__ClassAdStructAttr(soap, "item", 0, &a->__ptr[i], "condorCore:ClassAdStructAttr");
	}
	soap->position = 0;
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ClassAdStruct * SOAP_FMAC4 soap_get_ClassAdStruct(struct soap *soap, struct ClassAdStruct *p, const char *tag, const char *type)
{
	if ((p = soap_in_ClassAdStruct(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ClassAdStruct * SOAP_FMAC4 soap_in_ClassAdStruct(struct soap *soap, const char *tag, struct ClassAdStruct *a, const char *type)
{	int i, j;
	struct condorCore__ClassAdStructAttr *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if ((a = (struct ClassAdStruct *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct), 0)))
			soap_default_ClassAdStruct(soap, a);
			if (soap->body && soap_element_end_in(soap, tag))
				return NULL;
	}
	else if (!*soap->href)
	{	if (!(a = (struct ClassAdStruct *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct), 0)))
			return NULL;
		if (soap->alloced)
			soap_default_ClassAdStruct(soap, a);
		if (soap->body)
		{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (struct condorCore__ClassAdStructAttr *)soap_malloc(soap, sizeof(struct condorCore__ClassAdStructAttr) * a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_condorCore__ClassAdStructAttr(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
					return NULL;
					}
				}
				if (!soap_in_condorCore__ClassAdStructAttr(soap, NULL, a->__ptr + i, "condorCore:ClassAdStructAttr"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (struct condorCore__ClassAdStructAttr *)soap_push_block(soap, sizeof(struct condorCore__ClassAdStructAttr));
				if (!p)
					return NULL;
				soap_default_condorCore__ClassAdStructAttr(soap, p);
				if (!soap_in_condorCore__ClassAdStructAttr(soap, NULL, p, "condorCore:ClassAdStructAttr"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
			soap_pop_block(soap);
			a->__ptr = (struct condorCore__ClassAdStructAttr *)soap_malloc(soap, soap->blist->size);
			soap_store_block(soap, (char*)a->__ptr);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct ClassAdStruct *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct), 0), SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct));
		if (soap->alloced)
			soap_default_ClassAdStruct(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorCore__ClassAdStructAttr))
		soap_mark_condorCore__ClassAdStructAttr(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorCore__ClassAdStructAttr(struct soap *soap, const struct condorCore__ClassAdStructAttr *a)
{
	soap_embedded(soap, &a->name, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->name);
	soap_embedded(soap, &a->type, SOAP_TYPE_xsd__byte);
	soap_embedded(soap, &a->value, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->value);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr *a)
{
	soap_default_xsd__string(soap, &a->name);
	soap_default_xsd__byte(soap, &a->type);
	soap_default_xsd__string(soap, &a->value);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__ClassAdStructAttr);
	soap_out_condorCore__ClassAdStructAttr(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__ClassAdStructAttr(struct soap *soap, const char *tag, int id, const struct condorCore__ClassAdStructAttr *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__ClassAdStructAttr), type);
	soap_out_xsd__string(soap, "name", -1, &a->name, "xsd:string");
	soap_out_xsd__byte(soap, "type", -1, &a->type, "xsd:byte");
	soap_out_xsd__string(soap, "value", -1, &a->value, "xsd:string");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorCore__ClassAdStructAttr * SOAP_FMAC4 soap_get_condorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__ClassAdStructAttr(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__ClassAdStructAttr * SOAP_FMAC4 soap_in_condorCore__ClassAdStructAttr(struct soap *soap, const char *tag, struct condorCore__ClassAdStructAttr *a, const char *type)
{
	short soap_flag_name = 1, soap_flag_type = 1, soap_flag_value = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE_MISMATCH;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorCore__ClassAdStructAttr *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorCore__ClassAdStructAttr(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name = 0;
					continue;
				}
			if (soap_flag_type && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__byte(soap, "type", &a->type, "xsd:byte"))
				{	soap_flag_type = 0;
					continue;
				}
			if (soap_flag_value && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "value", &a->value, "xsd:string"))
				{	soap_flag_value = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorCore__ClassAdStructAttr *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr), 0), SOAP_TYPE_condorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr));
		if (soap->alloced)
			soap_default_condorCore__ClassAdStructAttr(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToSOAP_ENV__Code))
		soap_mark_PointerToSOAP_ENV__Code(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_mark_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	soap_out_PointerToSOAP_ENV__Code(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_SOAP_ENV__Code, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_SOAP_ENV__Code(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_SOAP_ENV__Code(soap, tag, i, *a, type);
	}
	return soap_out_SOAP_ENV__Code(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_SOAP_ENV__Code, &pp), *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	struct SOAP_ENV__Code *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct SOAP_ENV__Code **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToSOAP_ENV__Code, sizeof(struct SOAP_ENV__Code *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_SOAP_ENV__Code(soap, tag, NULL, type)))
		{	a = (struct SOAP_ENV__Code **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToSOAP_ENV__Code, sizeof(struct SOAP_ENV__Code *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToSOAP_ENV__Code, sizeof(struct SOAP_ENV__Code *), 1), SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE__QName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark__QName(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE__QName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE__QName);
	soap_out__QName(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToClassAdStruct))
		soap_mark_PointerToClassAdStruct(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct *const*a)
{
	if (*a && !soap_array_reference(soap, *a, (struct soap_array*)&(*a)->__ptr, (*a)->__size, SOAP_TYPE_ClassAdStruct))
		soap_mark_ClassAdStruct(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToClassAdStruct);
	soap_out_PointerToClassAdStruct(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToClassAdStruct(struct soap *soap, const char *tag, int id, struct ClassAdStruct *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToClassAdStruct);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_array_pointer_lookup(soap, *a, (struct soap_array*)&(*a)->__ptr, (*a)->__size, SOAP_TYPE_ClassAdStruct, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_ClassAdStruct(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_ClassAdStruct(soap, tag, i, *a, type);
	}
	return soap_out_ClassAdStruct(soap, tag, soap_array_pointer_enter(soap, *a, (struct soap_array*)&(*a)->__ptr, SOAP_TYPE_ClassAdStruct, &pp), *a, type);
}

SOAP_FMAC3 struct ClassAdStruct ** SOAP_FMAC4 soap_get_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToClassAdStruct(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ClassAdStruct ** SOAP_FMAC4 soap_in_PointerToClassAdStruct(struct soap *soap, const char *tag, struct ClassAdStruct **a, const char *type)
{
	struct ClassAdStruct *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct ClassAdStruct **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToClassAdStruct, sizeof(struct ClassAdStruct *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_ClassAdStruct(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_ClassAdStruct(soap, tag, NULL, type)))
		{	a = (struct ClassAdStruct **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToClassAdStruct, sizeof(struct ClassAdStruct *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct ClassAdStruct **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToClassAdStruct, sizeof(struct ClassAdStruct *), 1), SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr))
		soap_mark_PointerTocondorCore__ClassAdStructAttr(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_condorCore__ClassAdStructAttr))
		soap_mark_condorCore__ClassAdStructAttr(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr);
	soap_out_PointerTocondorCore__ClassAdStructAttr(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, const char *tag, int id, struct condorCore__ClassAdStructAttr *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_condorCore__ClassAdStructAttr, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_condorCore__ClassAdStructAttr(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_condorCore__ClassAdStructAttr(soap, tag, i, *a, type);
	}
	return soap_out_condorCore__ClassAdStructAttr(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_condorCore__ClassAdStructAttr, &pp), *a, type);
}

SOAP_FMAC3 struct condorCore__ClassAdStructAttr ** SOAP_FMAC4 soap_get_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocondorCore__ClassAdStructAttr(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__ClassAdStructAttr ** SOAP_FMAC4 soap_in_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, const char *tag, struct condorCore__ClassAdStructAttr **a, const char *type)
{
	struct condorCore__ClassAdStructAttr *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct condorCore__ClassAdStructAttr **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_condorCore__ClassAdStructAttr(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_condorCore__ClassAdStructAttr(soap, tag, NULL, type)))
		{	a = (struct condorCore__ClassAdStructAttr **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct condorCore__ClassAdStructAttr **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr *), 1), SOAP_TYPE_condorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__anyURI(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT_xsd__anyURI
	*a = SOAP_DEFAULT_xsd__anyURI;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__anyURI);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_xsd__anyURI(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__anyURI);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, char **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__anyURI);
	soap_out_xsd__anyURI(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__anyURI);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__anyURI, 1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__string(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT_xsd__string
	*a = SOAP_DEFAULT_xsd__string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_xsd__string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap *soap, char **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__string);
	soap_out_xsd__string(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__string, 1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_string);
	soap_out_string(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1);
}

SOAP_END_NAMESPACE(soap_schedd)

/* end of soap_scheddC.cpp */
