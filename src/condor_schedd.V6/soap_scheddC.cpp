/* soap_scheddC.cpp
   Generated by gSOAP 2.5.2 from gsoap_schedd.h
   Copyright (C) 2001-2004 Genivia, Inc. All Rights Reserved.
   This software is released under the gSOAP public license and GPL.
   See README.txt for further details.
*/
#include "soap_scheddH.h"

SOAP_BEGIN_NAMESPACE(soap_schedd)

SOAP_SOURCE_STAMP("@(#) soap_scheddC.cpp ver 2.5.2 2004-05-20 21:09:39 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL);
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = (struct SOAP_ENV__Fault*)soap_malloc(soap, sizeof(struct SOAP_ENV__Fault));
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version != 1 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}

SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_in_xsd__byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_long:
		return soap_in_long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__long:
		return soap_in_xsd__long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__float:
		return soap_in_xsd__float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_condorSchedd__UniverseType:
		return soap_in_condorSchedd__UniverseType(soap, NULL, NULL, "condorSchedd:UniverseType");
	case SOAP_TYPE_condorSchedd__HashType:
		return soap_in_condorSchedd__HashType(soap, NULL, NULL, "condorSchedd:HashType");
	case SOAP_TYPE_condorCore__ClassAdAttrType:
		return soap_in_condorCore__ClassAdAttrType(soap, NULL, NULL, "condorCore:ClassAdAttrType");
	case SOAP_TYPE_condorCore__StatusCode:
		return soap_in_condorCore__StatusCode(soap, NULL, NULL, "condorCore:StatusCode");
	case SOAP_TYPE_xsd__boolean:
		return soap_in_xsd__boolean(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_condorSchedd__createJobTemplate:
		return soap_in_condorSchedd__createJobTemplate(soap, NULL, NULL, "condorSchedd:createJobTemplate");
	case SOAP_TYPE_condorSchedd__discoverJobRequirements:
		return soap_in_condorSchedd__discoverJobRequirements(soap, NULL, NULL, "condorSchedd:discoverJobRequirements");
	case SOAP_TYPE_condorSchedd__listSpool:
		return soap_in_condorSchedd__listSpool(soap, NULL, NULL, "condorSchedd:listSpool");
	case SOAP_TYPE_condorSchedd__closeSpool:
		return soap_in_condorSchedd__closeSpool(soap, NULL, NULL, "condorSchedd:closeSpool");
	case SOAP_TYPE_condorSchedd__getFile:
		return soap_in_condorSchedd__getFile(soap, NULL, NULL, "condorSchedd:getFile");
	case SOAP_TYPE_condorSchedd__sendFile:
		return soap_in_condorSchedd__sendFile(soap, NULL, NULL, "condorSchedd:sendFile");
	case SOAP_TYPE_condorSchedd__declareFile:
		return soap_in_condorSchedd__declareFile(soap, NULL, NULL, "condorSchedd:declareFile");
	case SOAP_TYPE_condorSchedd__getJobAd:
		return soap_in_condorSchedd__getJobAd(soap, NULL, NULL, "condorSchedd:getJobAd");
	case SOAP_TYPE_condorSchedd__getJobAds:
		return soap_in_condorSchedd__getJobAds(soap, NULL, NULL, "condorSchedd:getJobAds");
	case SOAP_TYPE_condorSchedd__submit:
		return soap_in_condorSchedd__submit(soap, NULL, NULL, "condorSchedd:submit");
	case SOAP_TYPE_condorSchedd__releaseJob:
		return soap_in_condorSchedd__releaseJob(soap, NULL, NULL, "condorSchedd:releaseJob");
	case SOAP_TYPE_condorSchedd__holdJob:
		return soap_in_condorSchedd__holdJob(soap, NULL, NULL, "condorSchedd:holdJob");
	case SOAP_TYPE_condorSchedd__removeJob:
		return soap_in_condorSchedd__removeJob(soap, NULL, NULL, "condorSchedd:removeJob");
	case SOAP_TYPE_condorSchedd__newJob:
		return soap_in_condorSchedd__newJob(soap, NULL, NULL, "condorSchedd:newJob");
	case SOAP_TYPE_condorSchedd__removeCluster:
		return soap_in_condorSchedd__removeCluster(soap, NULL, NULL, "condorSchedd:removeCluster");
	case SOAP_TYPE_condorSchedd__newCluster:
		return soap_in_condorSchedd__newCluster(soap, NULL, NULL, "condorSchedd:newCluster");
	case SOAP_TYPE_condorSchedd__extendTransaction:
		return soap_in_condorSchedd__extendTransaction(soap, NULL, NULL, "condorSchedd:extendTransaction");
	case SOAP_TYPE_condorSchedd__abortTransaction:
		return soap_in_condorSchedd__abortTransaction(soap, NULL, NULL, "condorSchedd:abortTransaction");
	case SOAP_TYPE_condorSchedd__commitTransaction:
		return soap_in_condorSchedd__commitTransaction(soap, NULL, NULL, "condorSchedd:commitTransaction");
	case SOAP_TYPE_condorSchedd__beginTransaction:
		return soap_in_condorSchedd__beginTransaction(soap, NULL, NULL, "condorSchedd:beginTransaction");
	case SOAP_TYPE_condorSchedd__FileInfoArrayAndStatusResponse:
		return soap_in_condorSchedd__FileInfoArrayAndStatusResponse(soap, NULL, NULL, "condorSchedd:FileInfoArrayAndStatusResponse");
	case SOAP_TYPE_condorSchedd__Base64DataAndStatusResponse:
		return soap_in_condorSchedd__Base64DataAndStatusResponse(soap, NULL, NULL, "condorSchedd:Base64DataAndStatusResponse");
	case SOAP_TYPE_condorSchedd__ClassAdStructAndStatusResponse:
		return soap_in_condorSchedd__ClassAdStructAndStatusResponse(soap, NULL, NULL, "condorSchedd:ClassAdStructAndStatusResponse");
	case SOAP_TYPE_condorSchedd__ClassAdStructArrayAndStatusResponse:
		return soap_in_condorSchedd__ClassAdStructArrayAndStatusResponse(soap, NULL, NULL, "condorSchedd:ClassAdStructArrayAndStatusResponse");
	case SOAP_TYPE_condorSchedd__RequirementsAndStatusResponse:
		return soap_in_condorSchedd__RequirementsAndStatusResponse(soap, NULL, NULL, "condorSchedd:RequirementsAndStatusResponse");
	case SOAP_TYPE_condorSchedd__IntAndStatusResponse:
		return soap_in_condorSchedd__IntAndStatusResponse(soap, NULL, NULL, "condorSchedd:IntAndStatusResponse");
	case SOAP_TYPE_condorSchedd__TransactionAndStatusResponse:
		return soap_in_condorSchedd__TransactionAndStatusResponse(soap, NULL, NULL, "condorSchedd:TransactionAndStatusResponse");
	case SOAP_TYPE_condorSchedd__StatusResponse:
		return soap_in_condorSchedd__StatusResponse(soap, NULL, NULL, "condorSchedd:StatusResponse");
	case SOAP_TYPE_condorSchedd__FileInfoArrayAndStatus:
		return soap_in_condorSchedd__FileInfoArrayAndStatus(soap, NULL, NULL, "condorSchedd:FileInfoArrayAndStatus");
	case SOAP_TYPE_condorSchedd__FileInfoArray:
		return soap_in_condorSchedd__FileInfoArray(soap, NULL, NULL, "condorSchedd:FileInfoArray");
	case SOAP_TYPE_condorSchedd__FileInfo:
		return soap_in_condorSchedd__FileInfo(soap, NULL, NULL, "condorSchedd:FileInfo");
	case SOAP_TYPE_condorSchedd__Base64DataAndStatus:
		return soap_in_condorSchedd__Base64DataAndStatus(soap, NULL, NULL, "condorSchedd:Base64DataAndStatus");
	case SOAP_TYPE_condorSchedd__IntAndStatus:
		return soap_in_condorSchedd__IntAndStatus(soap, NULL, NULL, "condorSchedd:IntAndStatus");
	case SOAP_TYPE_condorSchedd__TransactionAndStatus:
		return soap_in_condorSchedd__TransactionAndStatus(soap, NULL, NULL, "condorSchedd:TransactionAndStatus");
	case SOAP_TYPE_condorSchedd__RequirementsAndStatus:
		return soap_in_condorSchedd__RequirementsAndStatus(soap, NULL, NULL, "condorSchedd:RequirementsAndStatus");
	case SOAP_TYPE_condorSchedd__Requirements:
		return soap_in_condorSchedd__Requirements(soap, NULL, NULL, "condorSchedd:Requirements");
	case SOAP_TYPE_condorSchedd__Transaction:
		return soap_in_condorSchedd__Transaction(soap, NULL, NULL, "condorSchedd:Transaction");
	case SOAP_TYPE_condorCore__StringAndStatus:
		return soap_in_condorCore__StringAndStatus(soap, NULL, NULL, "condorCore:StringAndStatus");
	case SOAP_TYPE_condorCore__ClassAdStructArrayAndStatus:
		return soap_in_condorCore__ClassAdStructArrayAndStatus(soap, NULL, NULL, "condorCore:ClassAdStructArrayAndStatus");
	case SOAP_TYPE_condorCore__ClassAdStructAndStatus:
		return soap_in_condorCore__ClassAdStructAndStatus(soap, NULL, NULL, "condorCore:ClassAdStructAndStatus");
	case SOAP_TYPE_ClassAdStructArray:
		return soap_in_ClassAdStructArray(soap, NULL, NULL, "condorCore:ClassAdStructAttr[]");
	case SOAP_TYPE_ClassAdStruct:
		return soap_in_ClassAdStruct(soap, NULL, NULL, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_condorCore__ClassAdStructAttr:
		return soap_in_condorCore__ClassAdStructAttr(soap, NULL, NULL, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_condorCore__Status:
		return soap_in_condorCore__Status(soap, NULL, NULL, "condorCore:Status");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_in_PointerToxsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTocondorSchedd__FileInfo:
		return soap_in_PointerTocondorSchedd__FileInfo(soap, NULL, NULL, "condorSchedd:FileInfo");
	case SOAP_TYPE_PointerTocondorSchedd__Requirement:
		return soap_in_PointerTocondorSchedd__Requirement(soap, NULL, NULL, "condorSchedd:Requirement");
	case SOAP_TYPE_condorSchedd__Requirement:
	{	char **s;
		s = soap_in_condorSchedd__Requirement(soap, NULL, NULL, "condorSchedd:Requirement");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_PointerToClassAdStruct:
		return soap_in_PointerToClassAdStruct(soap, NULL, NULL, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr:
		return soap_in_PointerTocondorCore__ClassAdStructAttr(soap, NULL, NULL, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_PointerTocondorCore__Status:
		return soap_in_PointerTocondorCore__Status(soap, NULL, NULL, "condorCore:Status");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__anyURI:
	{	char **s;
		s = soap_in_xsd__anyURI(soap, NULL, NULL, "xsd:anyURI");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_xsd__string:
	{	char **s;
		s = soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_xsd__byte;
			return soap_in_xsd__byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_long;
			return soap_in_long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_xsd__long;
			return soap_in_xsd__long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_xsd__float;
			return soap_in_xsd__float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:UniverseType"))
		{	*type = SOAP_TYPE_condorSchedd__UniverseType;
			return soap_in_condorSchedd__UniverseType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:HashType"))
		{	*type = SOAP_TYPE_condorSchedd__HashType;
			return soap_in_condorSchedd__HashType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorCore:ClassAdAttrType"))
		{	*type = SOAP_TYPE_condorCore__ClassAdAttrType;
			return soap_in_condorCore__ClassAdAttrType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorCore:StatusCode"))
		{	*type = SOAP_TYPE_condorCore__StatusCode;
			return soap_in_condorCore__StatusCode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_xsd__boolean;
			return soap_in_xsd__boolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:createJobTemplate"))
		{	*type = SOAP_TYPE_condorSchedd__createJobTemplate;
			return soap_in_condorSchedd__createJobTemplate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:discoverJobRequirements"))
		{	*type = SOAP_TYPE_condorSchedd__discoverJobRequirements;
			return soap_in_condorSchedd__discoverJobRequirements(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:listSpool"))
		{	*type = SOAP_TYPE_condorSchedd__listSpool;
			return soap_in_condorSchedd__listSpool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:closeSpool"))
		{	*type = SOAP_TYPE_condorSchedd__closeSpool;
			return soap_in_condorSchedd__closeSpool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:getFile"))
		{	*type = SOAP_TYPE_condorSchedd__getFile;
			return soap_in_condorSchedd__getFile(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:sendFile"))
		{	*type = SOAP_TYPE_condorSchedd__sendFile;
			return soap_in_condorSchedd__sendFile(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:declareFile"))
		{	*type = SOAP_TYPE_condorSchedd__declareFile;
			return soap_in_condorSchedd__declareFile(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:getJobAd"))
		{	*type = SOAP_TYPE_condorSchedd__getJobAd;
			return soap_in_condorSchedd__getJobAd(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:getJobAds"))
		{	*type = SOAP_TYPE_condorSchedd__getJobAds;
			return soap_in_condorSchedd__getJobAds(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:submit"))
		{	*type = SOAP_TYPE_condorSchedd__submit;
			return soap_in_condorSchedd__submit(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:releaseJob"))
		{	*type = SOAP_TYPE_condorSchedd__releaseJob;
			return soap_in_condorSchedd__releaseJob(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:holdJob"))
		{	*type = SOAP_TYPE_condorSchedd__holdJob;
			return soap_in_condorSchedd__holdJob(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:removeJob"))
		{	*type = SOAP_TYPE_condorSchedd__removeJob;
			return soap_in_condorSchedd__removeJob(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:newJob"))
		{	*type = SOAP_TYPE_condorSchedd__newJob;
			return soap_in_condorSchedd__newJob(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:removeCluster"))
		{	*type = SOAP_TYPE_condorSchedd__removeCluster;
			return soap_in_condorSchedd__removeCluster(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:newCluster"))
		{	*type = SOAP_TYPE_condorSchedd__newCluster;
			return soap_in_condorSchedd__newCluster(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:extendTransaction"))
		{	*type = SOAP_TYPE_condorSchedd__extendTransaction;
			return soap_in_condorSchedd__extendTransaction(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:abortTransaction"))
		{	*type = SOAP_TYPE_condorSchedd__abortTransaction;
			return soap_in_condorSchedd__abortTransaction(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:commitTransaction"))
		{	*type = SOAP_TYPE_condorSchedd__commitTransaction;
			return soap_in_condorSchedd__commitTransaction(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:beginTransaction"))
		{	*type = SOAP_TYPE_condorSchedd__beginTransaction;
			return soap_in_condorSchedd__beginTransaction(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:FileInfoArrayAndStatusResponse"))
		{	*type = SOAP_TYPE_condorSchedd__FileInfoArrayAndStatusResponse;
			return soap_in_condorSchedd__FileInfoArrayAndStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:Base64DataAndStatusResponse"))
		{	*type = SOAP_TYPE_condorSchedd__Base64DataAndStatusResponse;
			return soap_in_condorSchedd__Base64DataAndStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:ClassAdStructAndStatusResponse"))
		{	*type = SOAP_TYPE_condorSchedd__ClassAdStructAndStatusResponse;
			return soap_in_condorSchedd__ClassAdStructAndStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:ClassAdStructArrayAndStatusResponse"))
		{	*type = SOAP_TYPE_condorSchedd__ClassAdStructArrayAndStatusResponse;
			return soap_in_condorSchedd__ClassAdStructArrayAndStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:RequirementsAndStatusResponse"))
		{	*type = SOAP_TYPE_condorSchedd__RequirementsAndStatusResponse;
			return soap_in_condorSchedd__RequirementsAndStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:IntAndStatusResponse"))
		{	*type = SOAP_TYPE_condorSchedd__IntAndStatusResponse;
			return soap_in_condorSchedd__IntAndStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:TransactionAndStatusResponse"))
		{	*type = SOAP_TYPE_condorSchedd__TransactionAndStatusResponse;
			return soap_in_condorSchedd__TransactionAndStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:StatusResponse"))
		{	*type = SOAP_TYPE_condorSchedd__StatusResponse;
			return soap_in_condorSchedd__StatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:FileInfoArrayAndStatus"))
		{	*type = SOAP_TYPE_condorSchedd__FileInfoArrayAndStatus;
			return soap_in_condorSchedd__FileInfoArrayAndStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:FileInfoArray"))
		{	*type = SOAP_TYPE_condorSchedd__FileInfoArray;
			return soap_in_condorSchedd__FileInfoArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:FileInfo"))
		{	*type = SOAP_TYPE_condorSchedd__FileInfo;
			return soap_in_condorSchedd__FileInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:Base64DataAndStatus"))
		{	*type = SOAP_TYPE_condorSchedd__Base64DataAndStatus;
			return soap_in_condorSchedd__Base64DataAndStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:IntAndStatus"))
		{	*type = SOAP_TYPE_condorSchedd__IntAndStatus;
			return soap_in_condorSchedd__IntAndStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:TransactionAndStatus"))
		{	*type = SOAP_TYPE_condorSchedd__TransactionAndStatus;
			return soap_in_condorSchedd__TransactionAndStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:RequirementsAndStatus"))
		{	*type = SOAP_TYPE_condorSchedd__RequirementsAndStatus;
			return soap_in_condorSchedd__RequirementsAndStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:Requirements"))
		{	*type = SOAP_TYPE_condorSchedd__Requirements;
			return soap_in_condorSchedd__Requirements(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:Transaction"))
		{	*type = SOAP_TYPE_condorSchedd__Transaction;
			return soap_in_condorSchedd__Transaction(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorCore:StringAndStatus"))
		{	*type = SOAP_TYPE_condorCore__StringAndStatus;
			return soap_in_condorCore__StringAndStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorCore:ClassAdStructArrayAndStatus"))
		{	*type = SOAP_TYPE_condorCore__ClassAdStructArrayAndStatus;
			return soap_in_condorCore__ClassAdStructArrayAndStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorCore:ClassAdStructAndStatus"))
		{	*type = SOAP_TYPE_condorCore__ClassAdStructAndStatus;
			return soap_in_condorCore__ClassAdStructAndStatus(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "condorCore:ClassAdStructAttr[]"))
		{	*type = SOAP_TYPE_ClassAdStructArray;
			return soap_in_ClassAdStructArray(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "condorCore:ClassAdStructAttr"))
		{	*type = SOAP_TYPE_ClassAdStruct;
			return soap_in_ClassAdStruct(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorCore:ClassAdStructAttr"))
		{	*type = SOAP_TYPE_condorCore__ClassAdStructAttr;
			return soap_in_condorCore__ClassAdStructAttr(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorCore:Status"))
		{	*type = SOAP_TYPE_condorCore__Status;
			return soap_in_condorCore__Status(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condorSchedd:Requirement"))
		{	char **s;
			*type = SOAP_TYPE_condorSchedd__Requirement;
			s = soap_in_condorSchedd__Requirement(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	char **s;
			*type = SOAP_TYPE_xsd__anyURI;
			s = soap_in_xsd__anyURI(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_xsd__string;
			s = soap_in_xsd__string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{	if (soap->mode & SOAP_XML_STRICT)
		return SOAP_TAG_MISMATCH;
	if (!soap_peek_element(soap))
	{	int t;
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unknown element '%s' (level=%u, %d)\n", soap->tag, soap->level, soap->body));
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if ((soap->mode & SOAP_IO_LENGTH) ? pp->mark1 == 2 : pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_out_xsd__byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_xsd__int:
		return soap_out_xsd__int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_long:
		return soap_out_long(soap, tag, id, (const long *)ptr, "xsd:long");
	case SOAP_TYPE_xsd__long:
		return soap_out_xsd__long(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_xsd__float:
		return soap_out_xsd__float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_condorSchedd__UniverseType:
		return soap_out_condorSchedd__UniverseType(soap, tag, id, (const enum condorSchedd__UniverseType *)ptr, "condorSchedd:UniverseType");
	case SOAP_TYPE_condorSchedd__HashType:
		return soap_out_condorSchedd__HashType(soap, tag, id, (const enum condorSchedd__HashType *)ptr, "condorSchedd:HashType");
	case SOAP_TYPE_condorCore__ClassAdAttrType:
		return soap_out_condorCore__ClassAdAttrType(soap, tag, id, (const enum condorCore__ClassAdAttrType *)ptr, "condorCore:ClassAdAttrType");
	case SOAP_TYPE_condorCore__StatusCode:
		return soap_out_condorCore__StatusCode(soap, tag, id, (const enum condorCore__StatusCode *)ptr, "condorCore:StatusCode");
	case SOAP_TYPE_xsd__boolean:
		return soap_out_xsd__boolean(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_condorSchedd__createJobTemplate:
		return soap_out_condorSchedd__createJobTemplate(soap, tag, id, (const struct condorSchedd__createJobTemplate *)ptr, "condorSchedd:createJobTemplate");
	case SOAP_TYPE_condorSchedd__discoverJobRequirements:
		return soap_out_condorSchedd__discoverJobRequirements(soap, tag, id, (const struct condorSchedd__discoverJobRequirements *)ptr, "condorSchedd:discoverJobRequirements");
	case SOAP_TYPE_condorSchedd__listSpool:
		return soap_out_condorSchedd__listSpool(soap, tag, id, (const struct condorSchedd__listSpool *)ptr, "condorSchedd:listSpool");
	case SOAP_TYPE_condorSchedd__closeSpool:
		return soap_out_condorSchedd__closeSpool(soap, tag, id, (const struct condorSchedd__closeSpool *)ptr, "condorSchedd:closeSpool");
	case SOAP_TYPE_condorSchedd__getFile:
		return soap_out_condorSchedd__getFile(soap, tag, id, (const struct condorSchedd__getFile *)ptr, "condorSchedd:getFile");
	case SOAP_TYPE_condorSchedd__sendFile:
		return soap_out_condorSchedd__sendFile(soap, tag, id, (const struct condorSchedd__sendFile *)ptr, "condorSchedd:sendFile");
	case SOAP_TYPE_condorSchedd__declareFile:
		return soap_out_condorSchedd__declareFile(soap, tag, id, (const struct condorSchedd__declareFile *)ptr, "condorSchedd:declareFile");
	case SOAP_TYPE_condorSchedd__getJobAd:
		return soap_out_condorSchedd__getJobAd(soap, tag, id, (const struct condorSchedd__getJobAd *)ptr, "condorSchedd:getJobAd");
	case SOAP_TYPE_condorSchedd__getJobAds:
		return soap_out_condorSchedd__getJobAds(soap, tag, id, (const struct condorSchedd__getJobAds *)ptr, "condorSchedd:getJobAds");
	case SOAP_TYPE_condorSchedd__submit:
		return soap_out_condorSchedd__submit(soap, tag, id, (const struct condorSchedd__submit *)ptr, "condorSchedd:submit");
	case SOAP_TYPE_condorSchedd__releaseJob:
		return soap_out_condorSchedd__releaseJob(soap, tag, id, (const struct condorSchedd__releaseJob *)ptr, "condorSchedd:releaseJob");
	case SOAP_TYPE_condorSchedd__holdJob:
		return soap_out_condorSchedd__holdJob(soap, tag, id, (const struct condorSchedd__holdJob *)ptr, "condorSchedd:holdJob");
	case SOAP_TYPE_condorSchedd__removeJob:
		return soap_out_condorSchedd__removeJob(soap, tag, id, (const struct condorSchedd__removeJob *)ptr, "condorSchedd:removeJob");
	case SOAP_TYPE_condorSchedd__newJob:
		return soap_out_condorSchedd__newJob(soap, tag, id, (const struct condorSchedd__newJob *)ptr, "condorSchedd:newJob");
	case SOAP_TYPE_condorSchedd__removeCluster:
		return soap_out_condorSchedd__removeCluster(soap, tag, id, (const struct condorSchedd__removeCluster *)ptr, "condorSchedd:removeCluster");
	case SOAP_TYPE_condorSchedd__newCluster:
		return soap_out_condorSchedd__newCluster(soap, tag, id, (const struct condorSchedd__newCluster *)ptr, "condorSchedd:newCluster");
	case SOAP_TYPE_condorSchedd__extendTransaction:
		return soap_out_condorSchedd__extendTransaction(soap, tag, id, (const struct condorSchedd__extendTransaction *)ptr, "condorSchedd:extendTransaction");
	case SOAP_TYPE_condorSchedd__abortTransaction:
		return soap_out_condorSchedd__abortTransaction(soap, tag, id, (const struct condorSchedd__abortTransaction *)ptr, "condorSchedd:abortTransaction");
	case SOAP_TYPE_condorSchedd__commitTransaction:
		return soap_out_condorSchedd__commitTransaction(soap, tag, id, (const struct condorSchedd__commitTransaction *)ptr, "condorSchedd:commitTransaction");
	case SOAP_TYPE_condorSchedd__beginTransaction:
		return soap_out_condorSchedd__beginTransaction(soap, tag, id, (const struct condorSchedd__beginTransaction *)ptr, "condorSchedd:beginTransaction");
	case SOAP_TYPE_condorSchedd__FileInfoArrayAndStatusResponse:
		return soap_out_condorSchedd__FileInfoArrayAndStatusResponse(soap, tag, id, (const struct condorSchedd__FileInfoArrayAndStatusResponse *)ptr, "condorSchedd:FileInfoArrayAndStatusResponse");
	case SOAP_TYPE_condorSchedd__Base64DataAndStatusResponse:
		return soap_out_condorSchedd__Base64DataAndStatusResponse(soap, tag, id, (const struct condorSchedd__Base64DataAndStatusResponse *)ptr, "condorSchedd:Base64DataAndStatusResponse");
	case SOAP_TYPE_condorSchedd__ClassAdStructAndStatusResponse:
		return soap_out_condorSchedd__ClassAdStructAndStatusResponse(soap, tag, id, (const struct condorSchedd__ClassAdStructAndStatusResponse *)ptr, "condorSchedd:ClassAdStructAndStatusResponse");
	case SOAP_TYPE_condorSchedd__ClassAdStructArrayAndStatusResponse:
		return soap_out_condorSchedd__ClassAdStructArrayAndStatusResponse(soap, tag, id, (const struct condorSchedd__ClassAdStructArrayAndStatusResponse *)ptr, "condorSchedd:ClassAdStructArrayAndStatusResponse");
	case SOAP_TYPE_condorSchedd__RequirementsAndStatusResponse:
		return soap_out_condorSchedd__RequirementsAndStatusResponse(soap, tag, id, (const struct condorSchedd__RequirementsAndStatusResponse *)ptr, "condorSchedd:RequirementsAndStatusResponse");
	case SOAP_TYPE_condorSchedd__IntAndStatusResponse:
		return soap_out_condorSchedd__IntAndStatusResponse(soap, tag, id, (const struct condorSchedd__IntAndStatusResponse *)ptr, "condorSchedd:IntAndStatusResponse");
	case SOAP_TYPE_condorSchedd__TransactionAndStatusResponse:
		return soap_out_condorSchedd__TransactionAndStatusResponse(soap, tag, id, (const struct condorSchedd__TransactionAndStatusResponse *)ptr, "condorSchedd:TransactionAndStatusResponse");
	case SOAP_TYPE_condorSchedd__StatusResponse:
		return soap_out_condorSchedd__StatusResponse(soap, tag, id, (const struct condorSchedd__StatusResponse *)ptr, "condorSchedd:StatusResponse");
	case SOAP_TYPE_condorSchedd__FileInfoArrayAndStatus:
		return soap_out_condorSchedd__FileInfoArrayAndStatus(soap, tag, id, (const struct condorSchedd__FileInfoArrayAndStatus *)ptr, "condorSchedd:FileInfoArrayAndStatus");
	case SOAP_TYPE_condorSchedd__FileInfoArray:
		return soap_out_condorSchedd__FileInfoArray(soap, tag, id, (const struct condorSchedd__FileInfoArray *)ptr, "condorSchedd:FileInfoArray");
	case SOAP_TYPE_condorSchedd__FileInfo:
		return soap_out_condorSchedd__FileInfo(soap, tag, id, (const struct condorSchedd__FileInfo *)ptr, "condorSchedd:FileInfo");
	case SOAP_TYPE_condorSchedd__Base64DataAndStatus:
		return soap_out_condorSchedd__Base64DataAndStatus(soap, tag, id, (const struct condorSchedd__Base64DataAndStatus *)ptr, "condorSchedd:Base64DataAndStatus");
	case SOAP_TYPE_condorSchedd__IntAndStatus:
		return soap_out_condorSchedd__IntAndStatus(soap, tag, id, (const struct condorSchedd__IntAndStatus *)ptr, "condorSchedd:IntAndStatus");
	case SOAP_TYPE_condorSchedd__TransactionAndStatus:
		return soap_out_condorSchedd__TransactionAndStatus(soap, tag, id, (const struct condorSchedd__TransactionAndStatus *)ptr, "condorSchedd:TransactionAndStatus");
	case SOAP_TYPE_condorSchedd__RequirementsAndStatus:
		return soap_out_condorSchedd__RequirementsAndStatus(soap, tag, id, (const struct condorSchedd__RequirementsAndStatus *)ptr, "condorSchedd:RequirementsAndStatus");
	case SOAP_TYPE_condorSchedd__Requirements:
		return soap_out_condorSchedd__Requirements(soap, tag, id, (const struct condorSchedd__Requirements *)ptr, "condorSchedd:Requirements");
	case SOAP_TYPE_condorSchedd__Transaction:
		return soap_out_condorSchedd__Transaction(soap, tag, id, (const struct condorSchedd__Transaction *)ptr, "condorSchedd:Transaction");
	case SOAP_TYPE_condorCore__StringAndStatus:
		return soap_out_condorCore__StringAndStatus(soap, tag, id, (const struct condorCore__StringAndStatus *)ptr, "condorCore:StringAndStatus");
	case SOAP_TYPE_condorCore__ClassAdStructArrayAndStatus:
		return soap_out_condorCore__ClassAdStructArrayAndStatus(soap, tag, id, (const struct condorCore__ClassAdStructArrayAndStatus *)ptr, "condorCore:ClassAdStructArrayAndStatus");
	case SOAP_TYPE_condorCore__ClassAdStructAndStatus:
		return soap_out_condorCore__ClassAdStructAndStatus(soap, tag, id, (const struct condorCore__ClassAdStructAndStatus *)ptr, "condorCore:ClassAdStructAndStatus");
	case SOAP_TYPE_ClassAdStructArray:
		return soap_out_ClassAdStructArray(soap, tag, id, (const struct ClassAdStructArray *)ptr, "condorCore:ClassAdStructAttr[]");
	case SOAP_TYPE_ClassAdStruct:
		return soap_out_ClassAdStruct(soap, tag, id, (const struct ClassAdStruct *)ptr, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_condorCore__ClassAdStructAttr:
		return soap_out_condorCore__ClassAdStructAttr(soap, tag, id, (const struct condorCore__ClassAdStructAttr *)ptr, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_condorCore__Status:
		return soap_out_condorCore__Status(soap, tag, id, (const struct condorCore__Status *)ptr, "condorCore:Status");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_out_xsd__base64Binary(soap, tag, id, (const struct xsd__base64Binary *)ptr, "xsd:base64Binary");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_out_PointerToxsd__base64Binary(soap, tag, id, (struct xsd__base64Binary *const*)ptr, "xsd:base64Binary");
	case SOAP_TYPE_PointerTocondorSchedd__FileInfo:
		return soap_out_PointerTocondorSchedd__FileInfo(soap, tag, id, (struct condorSchedd__FileInfo *const*)ptr, "condorSchedd:FileInfo");
	case SOAP_TYPE_PointerTocondorSchedd__Requirement:
		return soap_out_PointerTocondorSchedd__Requirement(soap, tag, id, (char **const*)ptr, "condorSchedd:Requirement");
	case SOAP_TYPE_condorSchedd__Requirement:
		return soap_out_string(soap, tag, id, (char**)&ptr, "condorSchedd:Requirement");
	case SOAP_TYPE_PointerToClassAdStruct:
		return soap_out_PointerToClassAdStruct(soap, tag, id, (struct ClassAdStruct *const*)ptr, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr:
		return soap_out_PointerTocondorCore__ClassAdStructAttr(soap, tag, id, (struct condorCore__ClassAdStructAttr *const*)ptr, "condorCore:ClassAdStructAttr");
	case SOAP_TYPE_PointerTocondorCore__Status:
		return soap_out_PointerTocondorCore__Status(soap, tag, id, (struct condorCore__Status *const*)ptr, "condorCore:Status");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__anyURI:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:anyURI");
	case SOAP_TYPE_xsd__string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "QName", id, (char**)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	switch (type)
	{
	case SOAP_TYPE_condorSchedd__createJobTemplate:
		soap_mark_condorSchedd__createJobTemplate(soap, (const struct condorSchedd__createJobTemplate *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__discoverJobRequirements:
		soap_mark_condorSchedd__discoverJobRequirements(soap, (const struct condorSchedd__discoverJobRequirements *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__listSpool:
		soap_mark_condorSchedd__listSpool(soap, (const struct condorSchedd__listSpool *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__closeSpool:
		soap_mark_condorSchedd__closeSpool(soap, (const struct condorSchedd__closeSpool *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__getFile:
		soap_mark_condorSchedd__getFile(soap, (const struct condorSchedd__getFile *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__sendFile:
		soap_mark_condorSchedd__sendFile(soap, (const struct condorSchedd__sendFile *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__declareFile:
		soap_mark_condorSchedd__declareFile(soap, (const struct condorSchedd__declareFile *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__getJobAd:
		soap_mark_condorSchedd__getJobAd(soap, (const struct condorSchedd__getJobAd *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__getJobAds:
		soap_mark_condorSchedd__getJobAds(soap, (const struct condorSchedd__getJobAds *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__submit:
		soap_mark_condorSchedd__submit(soap, (const struct condorSchedd__submit *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__releaseJob:
		soap_mark_condorSchedd__releaseJob(soap, (const struct condorSchedd__releaseJob *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__holdJob:
		soap_mark_condorSchedd__holdJob(soap, (const struct condorSchedd__holdJob *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__removeJob:
		soap_mark_condorSchedd__removeJob(soap, (const struct condorSchedd__removeJob *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__newJob:
		soap_mark_condorSchedd__newJob(soap, (const struct condorSchedd__newJob *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__removeCluster:
		soap_mark_condorSchedd__removeCluster(soap, (const struct condorSchedd__removeCluster *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__newCluster:
		soap_mark_condorSchedd__newCluster(soap, (const struct condorSchedd__newCluster *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__extendTransaction:
		soap_mark_condorSchedd__extendTransaction(soap, (const struct condorSchedd__extendTransaction *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__abortTransaction:
		soap_mark_condorSchedd__abortTransaction(soap, (const struct condorSchedd__abortTransaction *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__commitTransaction:
		soap_mark_condorSchedd__commitTransaction(soap, (const struct condorSchedd__commitTransaction *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__beginTransaction:
		soap_mark_condorSchedd__beginTransaction(soap, (const struct condorSchedd__beginTransaction *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__FileInfoArrayAndStatusResponse:
		soap_mark_condorSchedd__FileInfoArrayAndStatusResponse(soap, (const struct condorSchedd__FileInfoArrayAndStatusResponse *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__Base64DataAndStatusResponse:
		soap_mark_condorSchedd__Base64DataAndStatusResponse(soap, (const struct condorSchedd__Base64DataAndStatusResponse *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__ClassAdStructAndStatusResponse:
		soap_mark_condorSchedd__ClassAdStructAndStatusResponse(soap, (const struct condorSchedd__ClassAdStructAndStatusResponse *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__ClassAdStructArrayAndStatusResponse:
		soap_mark_condorSchedd__ClassAdStructArrayAndStatusResponse(soap, (const struct condorSchedd__ClassAdStructArrayAndStatusResponse *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__RequirementsAndStatusResponse:
		soap_mark_condorSchedd__RequirementsAndStatusResponse(soap, (const struct condorSchedd__RequirementsAndStatusResponse *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__IntAndStatusResponse:
		soap_mark_condorSchedd__IntAndStatusResponse(soap, (const struct condorSchedd__IntAndStatusResponse *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__TransactionAndStatusResponse:
		soap_mark_condorSchedd__TransactionAndStatusResponse(soap, (const struct condorSchedd__TransactionAndStatusResponse *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__StatusResponse:
		soap_mark_condorSchedd__StatusResponse(soap, (const struct condorSchedd__StatusResponse *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__FileInfoArrayAndStatus:
		soap_mark_condorSchedd__FileInfoArrayAndStatus(soap, (const struct condorSchedd__FileInfoArrayAndStatus *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__FileInfoArray:
		soap_mark_condorSchedd__FileInfoArray(soap, (const struct condorSchedd__FileInfoArray *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__FileInfo:
		soap_mark_condorSchedd__FileInfo(soap, (const struct condorSchedd__FileInfo *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__Base64DataAndStatus:
		soap_mark_condorSchedd__Base64DataAndStatus(soap, (const struct condorSchedd__Base64DataAndStatus *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__IntAndStatus:
		soap_mark_condorSchedd__IntAndStatus(soap, (const struct condorSchedd__IntAndStatus *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__TransactionAndStatus:
		soap_mark_condorSchedd__TransactionAndStatus(soap, (const struct condorSchedd__TransactionAndStatus *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__RequirementsAndStatus:
		soap_mark_condorSchedd__RequirementsAndStatus(soap, (const struct condorSchedd__RequirementsAndStatus *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__Requirements:
		soap_mark_condorSchedd__Requirements(soap, (const struct condorSchedd__Requirements *)ptr);
		break;
	case SOAP_TYPE_condorSchedd__Transaction:
		soap_mark_condorSchedd__Transaction(soap, (const struct condorSchedd__Transaction *)ptr);
		break;
	case SOAP_TYPE_condorCore__StringAndStatus:
		soap_mark_condorCore__StringAndStatus(soap, (const struct condorCore__StringAndStatus *)ptr);
		break;
	case SOAP_TYPE_condorCore__ClassAdStructArrayAndStatus:
		soap_mark_condorCore__ClassAdStructArrayAndStatus(soap, (const struct condorCore__ClassAdStructArrayAndStatus *)ptr);
		break;
	case SOAP_TYPE_condorCore__ClassAdStructAndStatus:
		soap_mark_condorCore__ClassAdStructAndStatus(soap, (const struct condorCore__ClassAdStructAndStatus *)ptr);
		break;
	case SOAP_TYPE_ClassAdStructArray:
		soap_mark_ClassAdStructArray(soap, (const struct ClassAdStructArray *)ptr);
		break;
	case SOAP_TYPE_ClassAdStruct:
		soap_mark_ClassAdStruct(soap, (const struct ClassAdStruct *)ptr);
		break;
	case SOAP_TYPE_condorCore__ClassAdStructAttr:
		soap_mark_condorCore__ClassAdStructAttr(soap, (const struct condorCore__ClassAdStructAttr *)ptr);
		break;
	case SOAP_TYPE_condorCore__Status:
		soap_mark_condorCore__Status(soap, (const struct condorCore__Status *)ptr);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		soap_mark_xsd__base64Binary(soap, (const struct xsd__base64Binary *)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__base64Binary:
		soap_mark_PointerToxsd__base64Binary(soap, (struct xsd__base64Binary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTocondorSchedd__FileInfo:
		soap_mark_PointerTocondorSchedd__FileInfo(soap, (struct condorSchedd__FileInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTocondorSchedd__Requirement:
		soap_mark_PointerTocondorSchedd__Requirement(soap, (char **const*)ptr);
		break;
	case SOAP_TYPE_condorSchedd__Requirement:
		soap_mark_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE_PointerToClassAdStruct:
		soap_mark_PointerToClassAdStruct(soap, (struct ClassAdStruct *const*)ptr);
		break;
	case SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr:
		soap_mark_PointerTocondorCore__ClassAdStructAttr(soap, (struct condorCore__ClassAdStructAttr *const*)ptr);
		break;
	case SOAP_TYPE_PointerTocondorCore__Status:
		soap_mark_PointerTocondorCore__Status(soap, (struct condorCore__Status *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_mark_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE_xsd__anyURI:
		soap_mark_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE_xsd__string:
		soap_mark_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_mark_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_mark_string(soap, (char**)&ptr);
		break;
	}
}

#ifndef WITH_LEANER
SOAP_FMAC3 int SOAP_FMAC4 soap_getattachments(struct soap *soap)
{
	if (!(soap->mode & SOAP_ENC_DIME))
		return SOAP_OK;
	while (soap->dime_flags & SOAP_DIME_CF)
	{	if (soap_getdimehdr(soap))
			return soap->error;
		if (soap_move(soap, soap->dime_size))
			return soap->error = SOAP_EOF;
	}
	if (soap_move(soap, ((soap->dime_size+3)&(~3))-soap_tell(soap)))
		return soap->error = SOAP_EOF;
	for (;;)
	{	if (soap_getdime(soap) || !soap->dime_id)
			break;
		switch (soap_lookup_type(soap, soap->dime_id))
		{
		case SOAP_TYPE_xsd__base64Binary:
		{	struct xsd__base64Binary * a;
			a = (struct xsd__base64Binary *)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE_xsd__base64Binary, sizeof(struct xsd__base64Binary), 0);
			if (a)
			{	a->__ptr = (unsigned char*)soap->dime_ptr;
				a->__size = soap->dime_size;
			}
			break;
		}
		case SOAP_TYPE_condorSchedd__Requirement:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE_condorSchedd__Requirement, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		case SOAP_TYPE_xsd__anyURI:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE_xsd__anyURI, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		case SOAP_TYPE_xsd__string:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE_xsd__string, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		case SOAP_TYPE__QName:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE__QName, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		case SOAP_TYPE_string:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE_string, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		default:
			soap->error = SOAP_DIME_ERROR;
		}
		if (soap->error)
			break;
	}
	if (soap->error == SOAP_EOD)
		soap->error = SOAP_OK;
	return soap->error;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putattachments(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (!(soap->mode & SOAP_ENC_DIME))
		return SOAP_OK;
	for (i = 0; i < SOAP_PTRHASH; i++)
		for (pp = soap->pht[i]; pp; pp = pp->next)
			if (pp->mark2 == 3)
				switch (pp->type)
				{
				}
		
	return SOAP_OK;
}
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__byte(struct soap *soap, char *a)
{
#ifdef SOAP_DEFAULT_xsd__byte
	*a = SOAP_DEFAULT_xsd__byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__byte(struct soap *soap, char const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__byte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap *soap, char *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__byte);
	soap_out_xsd__byte(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_xsd__byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_xsd__byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_byte(struct soap *soap, char const*a)
{
	soap_reference(soap, a, SOAP_TYPE_byte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, char *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_byte);
	soap_out_byte(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__int(struct soap *soap, int *a)
{
#ifdef SOAP_DEFAULT_xsd__int
	*a = SOAP_DEFAULT_xsd__int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__int(struct soap *soap, int const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap *soap, int *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__int);
	soap_out_xsd__int(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_int(struct soap *soap, int const*a)
{
	soap_reference(soap, a, SOAP_TYPE_int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, int *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_int);
	soap_out_int(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_long(struct soap *soap, long *a)
{
#ifdef SOAP_DEFAULT_long
	*a = SOAP_DEFAULT_long;
#else
	*a = (long)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_long(struct soap *soap, long const*a)
{
	soap_reference(soap, a, SOAP_TYPE_long);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap *soap, long *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_long);
	soap_out_long(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_long);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_long(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap *soap, const char *tag, long *a, const char *type)
{
	return soap_inlong(soap, tag, a, type, SOAP_TYPE_long);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__long(struct soap *soap, LONG64 *a)
{
#ifdef SOAP_DEFAULT_xsd__long
	*a = SOAP_DEFAULT_xsd__long;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__long(struct soap *soap, LONG64 const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__long(struct soap *soap, LONG64 *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__long);
	soap_out_xsd__long(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__long(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__long(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_xsd__long(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	return soap_inLONG64(soap, tag, a, type, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_LONG64(struct soap *soap, LONG64 const*a)
{
	soap_reference(soap, a, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, LONG64 *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_LONG64);
	soap_out_LONG64(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	return soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__float(struct soap *soap, float *a)
{
#ifdef SOAP_DEFAULT_xsd__float
	*a = SOAP_DEFAULT_xsd__float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__float(struct soap *soap, float const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__float(struct soap *soap, float *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__float);
	soap_out_xsd__float(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_xsd__float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__float(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_xsd__float(struct soap *soap, const char *tag, float *a, const char *type)
{
	return soap_infloat(soap, tag, a, type, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_float(struct soap *soap, float const*a)
{
	soap_reference(soap, a, SOAP_TYPE_float);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, float *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_float);
	soap_out_float(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{
	return soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_unsignedByte(struct soap *soap, unsigned char const*a)
{
	soap_reference(soap, a, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, unsigned char *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_unsignedByte);
	soap_out_unsignedByte(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	return soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_unsignedInt(struct soap *soap, unsigned int const*a)
{
	soap_reference(soap, a, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, unsigned int *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_unsignedInt);
	soap_out_unsignedInt(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	return soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__UniverseType(struct soap *soap, enum condorSchedd__UniverseType *a)
{
#ifdef SOAP_DEFAULT_condorSchedd__UniverseType
	*a = SOAP_DEFAULT_condorSchedd__UniverseType;
#else
	*a = (enum condorSchedd__UniverseType)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__UniverseType(struct soap *soap, enum condorSchedd__UniverseType const*a)
{
	soap_reference(soap, a, SOAP_TYPE_condorSchedd__UniverseType);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__UniverseType(struct soap *soap, enum condorSchedd__UniverseType *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__UniverseType);
	soap_out_condorSchedd__UniverseType(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_condorSchedd__UniverseType[] =
{	{ (long)STANDARD, "STANDARD" },
	{ (long)PVM, "PVM" },
	{ (long)VANILLA, "VANILLA" },
	{ (long)SCHEDULER, "SCHEDULER" },
	{ (long)MPI, "MPI" },
	{ (long)GLOBUS, "GLOBUS" },
	{ (long)JAVA, "JAVA" },
	{ 0, NULL }
};

SOAP_FMAC3 const char* SOAP_FMAC4 soap_condorSchedd__UniverseType2s(struct soap *soap, enum condorSchedd__UniverseType n)
{	const char *s = soap_str_code(soap_codes_condorSchedd__UniverseType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__UniverseType(struct soap *soap, const char *tag, int id, const enum condorSchedd__UniverseType *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__UniverseType), type);
	soap_send(soap, soap_condorSchedd__UniverseType2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum condorSchedd__UniverseType * SOAP_FMAC4 soap_get_condorSchedd__UniverseType(struct soap *soap, enum condorSchedd__UniverseType *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__UniverseType(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_s2condorSchedd__UniverseType(struct soap *soap, const char *s, enum condorSchedd__UniverseType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_condorSchedd__UniverseType, s);
	if (map)
		*a = (enum condorSchedd__UniverseType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n))
				return soap->error;
			*a = (enum condorSchedd__UniverseType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum condorSchedd__UniverseType * SOAP_FMAC4 soap_in_condorSchedd__UniverseType(struct soap *soap, const char *tag, enum condorSchedd__UniverseType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
	soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (soap->body && !*soap->href)
	{	a = (enum condorSchedd__UniverseType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__UniverseType, sizeof(enum condorSchedd__UniverseType), 0);
		if (!a || soap_s2condorSchedd__UniverseType(soap, soap_value(soap), a))
			return NULL;
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum condorSchedd__UniverseType *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__UniverseType, sizeof(enum condorSchedd__UniverseType), 0), SOAP_TYPE_condorSchedd__UniverseType, sizeof(enum condorSchedd__UniverseType));
		if (soap->alloced)
			soap_default_condorSchedd__UniverseType(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__HashType(struct soap *soap, enum condorSchedd__HashType *a)
{
#ifdef SOAP_DEFAULT_condorSchedd__HashType
	*a = SOAP_DEFAULT_condorSchedd__HashType;
#else
	*a = (enum condorSchedd__HashType)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__HashType(struct soap *soap, enum condorSchedd__HashType const*a)
{
	soap_reference(soap, a, SOAP_TYPE_condorSchedd__HashType);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__HashType(struct soap *soap, enum condorSchedd__HashType *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__HashType);
	soap_out_condorSchedd__HashType(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_condorSchedd__HashType[] =
{	{ (long)NOHASH, "NOHASH" },
	{ (long)MD5, "MD5" },
	{ 0, NULL }
};

SOAP_FMAC3 const char* SOAP_FMAC4 soap_condorSchedd__HashType2s(struct soap *soap, enum condorSchedd__HashType n)
{	const char *s = soap_str_code(soap_codes_condorSchedd__HashType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__HashType(struct soap *soap, const char *tag, int id, const enum condorSchedd__HashType *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__HashType), type);
	soap_send(soap, soap_condorSchedd__HashType2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum condorSchedd__HashType * SOAP_FMAC4 soap_get_condorSchedd__HashType(struct soap *soap, enum condorSchedd__HashType *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__HashType(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_s2condorSchedd__HashType(struct soap *soap, const char *s, enum condorSchedd__HashType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_condorSchedd__HashType, s);
	if (map)
		*a = (enum condorSchedd__HashType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n))
				return soap->error;
			*a = (enum condorSchedd__HashType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum condorSchedd__HashType * SOAP_FMAC4 soap_in_condorSchedd__HashType(struct soap *soap, const char *tag, enum condorSchedd__HashType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
	soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (soap->body && !*soap->href)
	{	a = (enum condorSchedd__HashType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__HashType, sizeof(enum condorSchedd__HashType), 0);
		if (!a || soap_s2condorSchedd__HashType(soap, soap_value(soap), a))
			return NULL;
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum condorSchedd__HashType *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__HashType, sizeof(enum condorSchedd__HashType), 0), SOAP_TYPE_condorSchedd__HashType, sizeof(enum condorSchedd__HashType));
		if (soap->alloced)
			soap_default_condorSchedd__HashType(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__ClassAdAttrType(struct soap *soap, enum condorCore__ClassAdAttrType *a)
{
#ifdef SOAP_DEFAULT_condorCore__ClassAdAttrType
	*a = SOAP_DEFAULT_condorCore__ClassAdAttrType;
#else
	*a = (enum condorCore__ClassAdAttrType)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__ClassAdAttrType(struct soap *soap, enum condorCore__ClassAdAttrType const*a)
{
	soap_reference(soap, a, SOAP_TYPE_condorCore__ClassAdAttrType);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__ClassAdAttrType(struct soap *soap, enum condorCore__ClassAdAttrType *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__ClassAdAttrType);
	soap_out_condorCore__ClassAdAttrType(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_condorCore__ClassAdAttrType[] =
{	{ (long)INTEGER_ATTR, "INTEGER-ATTR" },
	{ (long)FLOAT_ATTR, "FLOAT-ATTR" },
	{ (long)STRING_ATTR, "STRING-ATTR" },
	{ (long)EXPRESSION_ATTR, "EXPRESSION-ATTR" },
	{ (long)BOOLEAN_ATTR, "BOOLEAN-ATTR" },
	{ (long)UNDEFINED_ATTR, "UNDEFINED-ATTR" },
	{ (long)ERROR_ATTR, "ERROR-ATTR" },
	{ 0, NULL }
};

SOAP_FMAC3 const char* SOAP_FMAC4 soap_condorCore__ClassAdAttrType2s(struct soap *soap, enum condorCore__ClassAdAttrType n)
{	const char *s = soap_str_code(soap_codes_condorCore__ClassAdAttrType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__ClassAdAttrType(struct soap *soap, const char *tag, int id, const enum condorCore__ClassAdAttrType *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__ClassAdAttrType), type);
	soap_send(soap, soap_condorCore__ClassAdAttrType2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum condorCore__ClassAdAttrType * SOAP_FMAC4 soap_get_condorCore__ClassAdAttrType(struct soap *soap, enum condorCore__ClassAdAttrType *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__ClassAdAttrType(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_s2condorCore__ClassAdAttrType(struct soap *soap, const char *s, enum condorCore__ClassAdAttrType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_condorCore__ClassAdAttrType, s);
	if (map)
		*a = (enum condorCore__ClassAdAttrType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n))
				return soap->error;
			*a = (enum condorCore__ClassAdAttrType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum condorCore__ClassAdAttrType * SOAP_FMAC4 soap_in_condorCore__ClassAdAttrType(struct soap *soap, const char *tag, enum condorCore__ClassAdAttrType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
	soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (soap->body && !*soap->href)
	{	a = (enum condorCore__ClassAdAttrType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__ClassAdAttrType, sizeof(enum condorCore__ClassAdAttrType), 0);
		if (!a || soap_s2condorCore__ClassAdAttrType(soap, soap_value(soap), a))
			return NULL;
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum condorCore__ClassAdAttrType *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__ClassAdAttrType, sizeof(enum condorCore__ClassAdAttrType), 0), SOAP_TYPE_condorCore__ClassAdAttrType, sizeof(enum condorCore__ClassAdAttrType));
		if (soap->alloced)
			soap_default_condorCore__ClassAdAttrType(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__StatusCode(struct soap *soap, enum condorCore__StatusCode *a)
{
#ifdef SOAP_DEFAULT_condorCore__StatusCode
	*a = SOAP_DEFAULT_condorCore__StatusCode;
#else
	*a = (enum condorCore__StatusCode)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__StatusCode(struct soap *soap, enum condorCore__StatusCode const*a)
{
	soap_reference(soap, a, SOAP_TYPE_condorCore__StatusCode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__StatusCode(struct soap *soap, enum condorCore__StatusCode *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__StatusCode);
	soap_out_condorCore__StatusCode(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_condorCore__StatusCode[] =
{	{ (long)SUCCESS, "SUCCESS" },
	{ (long)FAIL, "FAIL" },
	{ (long)INVALIDTRANSACTION, "INVALIDTRANSACTION" },
	{ (long)UNKNOWNCLUSTER, "UNKNOWNCLUSTER" },
	{ (long)UNKNOWNJOB, "UNKNOWNJOB" },
	{ (long)UNKNOWNFILE, "UNKNOWNFILE" },
	{ (long)INCOMPLETE, "INCOMPLETE" },
	{ (long)INVALIDOFFSET, "INVALIDOFFSET" },
	{ (long)ALREADYEXISTS, "ALREADYEXISTS" },
	{ 0, NULL }
};

SOAP_FMAC3 const char* SOAP_FMAC4 soap_condorCore__StatusCode2s(struct soap *soap, enum condorCore__StatusCode n)
{	const char *s = soap_str_code(soap_codes_condorCore__StatusCode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__StatusCode(struct soap *soap, const char *tag, int id, const enum condorCore__StatusCode *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__StatusCode), type);
	soap_send(soap, soap_condorCore__StatusCode2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum condorCore__StatusCode * SOAP_FMAC4 soap_get_condorCore__StatusCode(struct soap *soap, enum condorCore__StatusCode *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__StatusCode(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_s2condorCore__StatusCode(struct soap *soap, const char *s, enum condorCore__StatusCode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_condorCore__StatusCode, s);
	if (map)
		*a = (enum condorCore__StatusCode)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n))
				return soap->error;
			*a = (enum condorCore__StatusCode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum condorCore__StatusCode * SOAP_FMAC4 soap_in_condorCore__StatusCode(struct soap *soap, const char *tag, enum condorCore__StatusCode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
	soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (soap->body && !*soap->href)
	{	a = (enum condorCore__StatusCode *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__StatusCode, sizeof(enum condorCore__StatusCode), 0);
		if (!a || soap_s2condorCore__StatusCode(soap, soap_value(soap), a))
			return NULL;
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum condorCore__StatusCode *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__StatusCode, sizeof(enum condorCore__StatusCode), 0), SOAP_TYPE_condorCore__StatusCode, sizeof(enum condorCore__StatusCode));
		if (soap->alloced)
			soap_default_condorCore__StatusCode(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__boolean(struct soap *soap, bool *a)
{
#ifdef SOAP_DEFAULT_xsd__boolean
	*a = SOAP_DEFAULT_xsd__boolean;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__boolean(struct soap *soap, bool const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__boolean);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__boolean(struct soap *soap, bool *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__boolean);
	soap_out_xsd__boolean(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_xsd__boolean[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3 const char* SOAP_FMAC4 soap_xsd__boolean2s(struct soap *soap, bool n)
{	const char *s = soap_str_code(soap_codes_xsd__boolean, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xsd__boolean), type);
	soap_send(soap, soap_xsd__boolean2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_xsd__boolean(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__boolean(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_s2xsd__boolean(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_xsd__boolean, s);
	if (map)
		*a = (bool)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n))
				return soap->error;
			*a = (bool)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_xsd__boolean(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
	soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (soap->body && !*soap->href)
	{	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(bool), 0);
		if (!a || soap_s2xsd__boolean(soap, soap_value(soap), a))
			return NULL;
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(bool), 0), SOAP_TYPE_xsd__boolean, sizeof(bool));
		if (soap->alloced)
			soap_default_xsd__boolean(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_bool(struct soap *soap, bool const*a)
{
	soap_reference(soap, a, SOAP_TYPE_bool);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, bool *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_bool);
	soap_out_bool(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3 const char* SOAP_FMAC4 soap_bool2s(struct soap *soap, bool n)
{	const char *s = soap_str_code(soap_codes_bool, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type);
	soap_send(soap, soap_bool2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n))
				return soap->error;
			*a = (bool)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
	soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (soap->body && !*soap->href)
	{	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0);
		if (!a || soap_s2bool(soap, soap_value(soap), a))
			return NULL;
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0), SOAP_TYPE_bool, sizeof(bool));
		if (soap->alloced)
			soap_default_bool(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_SOAP_ENV__Fault))
		soap_mark_SOAP_ENV__Fault(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	soap_embedded(soap, &a->faultcode, SOAP_TYPE__QName);
	soap_mark__QName(soap, &a->faultcode);
	soap_embedded(soap, &a->faultstring, SOAP_TYPE_string);
	soap_mark_string(soap, &a->faultstring);
	soap_embedded(soap, &a->faultactor, SOAP_TYPE_string);
	soap_mark_string(soap, &a->faultactor);
	soap_embedded(soap, &a->detail, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	soap_mark_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_embedded(soap, &a->SOAP_ENV__Code, SOAP_TYPE_PointerToSOAP_ENV__Code);
	soap_mark_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_embedded(soap, &a->SOAP_ENV__Reason, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Reason);
	soap_embedded(soap, &a->SOAP_ENV__Detail, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	soap_mark_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	soap_default_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_default_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_default_string(soap, &a->SOAP_ENV__Reason);
	soap_default_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_SOAP_ENV__Fault);
	soap_out_SOAP_ENV__Fault(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type);
	soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, "");
	soap_out_string(soap, "faultstring", -1, &a->faultstring, "");
	soap_out_string(soap, "faultactor", -1, &a->faultactor, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, "");
	soap_out_string(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_SOAP_ENV__Fault(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode = 0;
					continue;
				}
			if (soap_flag_faultstring && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "faultstring", &a->faultstring, ""))
				{	soap_flag_faultstring = 0;
					continue;
				}
			if (soap_flag_faultactor && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "faultactor", &a->faultactor, ""))
				{	soap_flag_faultactor = 0;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0), SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault));
		if (soap->alloced)
			soap_default_SOAP_ENV__Fault(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_mark_SOAP_ENV__Detail(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	soap_markelement(soap, a->value, a->__type);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	a->__type = 0;
	a->value = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_SOAP_ENV__Detail);
	soap_out_SOAP_ENV__Detail(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type);
	soap_putelement(soap, a->value, "value", -1, a->__type);
	soap_outliteral(soap, "-any", &a->__any);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_value = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_SOAP_ENV__Detail(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_value && soap->error == SOAP_TAG_MISMATCH)
				if ((a->value = soap_getelement(soap, &a->__type)))
				{	soap_flag_value = 0;
					continue;
				}
			if (soap_flag___any && soap->error == SOAP_TAG_MISMATCH)
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0), SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail));
		if (soap->alloced)
			soap_default_SOAP_ENV__Detail(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_SOAP_ENV__Code))
		soap_mark_SOAP_ENV__Code(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	soap_embedded(soap, &a->SOAP_ENV__Value, SOAP_TYPE__QName);
	soap_mark__QName(soap, &a->SOAP_ENV__Value);
	soap_embedded(soap, &a->SOAP_ENV__Node, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Node);
	soap_embedded(soap, &a->SOAP_ENV__Role, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Role);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_SOAP_ENV__Code);
	soap_out_SOAP_ENV__Code(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type);
	soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, "");
	soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, "");
	soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_SOAP_ENV__Code(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, ""))
				{	soap_flag_SOAP_ENV__Node = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, ""))
				{	soap_flag_SOAP_ENV__Role = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0), SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code));
		if (soap->alloced)
			soap_default_SOAP_ENV__Code(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_SOAP_ENV__Header))
		soap_mark_SOAP_ENV__Header(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	/* transient dummy skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	/* transient dummy skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_SOAP_ENV__Header);
	soap_out_SOAP_ENV__Header(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type);
	/* transient dummy skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_SOAP_ENV__Header(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
		/* transient dummy skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0), SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header));
		if (soap->alloced)
			soap_default_SOAP_ENV__Header(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__createJobTemplate(struct soap *soap, struct condorSchedd__createJobTemplate const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__createJobTemplate))
		soap_mark_condorSchedd__createJobTemplate(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__createJobTemplate(struct soap *soap, const struct condorSchedd__createJobTemplate *a)
{
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->jobId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->owner, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->owner);
	soap_embedded(soap, &a->type, SOAP_TYPE_condorSchedd__UniverseType);
	soap_embedded(soap, &a->cmd, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->cmd);
	soap_embedded(soap, &a->args, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->args);
	soap_embedded(soap, &a->requirements, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->requirements);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__createJobTemplate(struct soap *soap, struct condorSchedd__createJobTemplate *a)
{
	soap_default_xsd__int(soap, &a->clusterId);
	soap_default_xsd__int(soap, &a->jobId);
	soap_default_xsd__string(soap, &a->owner);
	soap_default_condorSchedd__UniverseType(soap, &a->type);
	soap_default_xsd__string(soap, &a->cmd);
	soap_default_xsd__string(soap, &a->args);
	soap_default_xsd__string(soap, &a->requirements);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__createJobTemplate(struct soap *soap, struct condorSchedd__createJobTemplate *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__createJobTemplate);
	soap_out_condorSchedd__createJobTemplate(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__createJobTemplate(struct soap *soap, const char *tag, int id, const struct condorSchedd__createJobTemplate *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__createJobTemplate), type);
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_out_xsd__int(soap, "jobId", -1, &a->jobId, "xsd:int");
	soap_out_xsd__string(soap, "owner", -1, &a->owner, "xsd:string");
	soap_out_condorSchedd__UniverseType(soap, "type", -1, &a->type, "condorSchedd:UniverseType");
	soap_out_xsd__string(soap, "cmd", -1, &a->cmd, "xsd:string");
	soap_out_xsd__string(soap, "args", -1, &a->args, "xsd:string");
	soap_out_xsd__string(soap, "requirements", -1, &a->requirements, "xsd:string");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__createJobTemplate * SOAP_FMAC4 soap_get_condorSchedd__createJobTemplate(struct soap *soap, struct condorSchedd__createJobTemplate *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__createJobTemplate(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__createJobTemplate * SOAP_FMAC4 soap_in_condorSchedd__createJobTemplate(struct soap *soap, const char *tag, struct condorSchedd__createJobTemplate *a, const char *type)
{
	short soap_flag_clusterId = 1, soap_flag_jobId = 1, soap_flag_owner = 1, soap_flag_type = 1, soap_flag_cmd = 1, soap_flag_args = 1, soap_flag_requirements = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__createJobTemplate *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__createJobTemplate, sizeof(struct condorSchedd__createJobTemplate), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__createJobTemplate(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap_flag_jobId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "jobId", &a->jobId, "xsd:int"))
				{	soap_flag_jobId = 0;
					continue;
				}
			if (soap_flag_owner && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "owner", &a->owner, "xsd:string"))
				{	soap_flag_owner = 0;
					continue;
				}
			if (soap_flag_type && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__UniverseType(soap, "type", &a->type, "condorSchedd:UniverseType"))
				{	soap_flag_type = 0;
					continue;
				}
			if (soap_flag_cmd && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "cmd", &a->cmd, "xsd:string"))
				{	soap_flag_cmd = 0;
					continue;
				}
			if (soap_flag_args && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "args", &a->args, "xsd:string"))
				{	soap_flag_args = 0;
					continue;
				}
			if (soap_flag_requirements && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "requirements", &a->requirements, "xsd:string"))
				{	soap_flag_requirements = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_clusterId || soap_flag_jobId || soap_flag_owner || soap_flag_type || soap_flag_cmd || soap_flag_args || soap_flag_requirements))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__createJobTemplate *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__createJobTemplate, sizeof(struct condorSchedd__createJobTemplate), 0), SOAP_TYPE_condorSchedd__createJobTemplate, sizeof(struct condorSchedd__createJobTemplate));
		if (soap->alloced)
			soap_default_condorSchedd__createJobTemplate(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__discoverJobRequirements(struct soap *soap, struct condorSchedd__discoverJobRequirements const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__discoverJobRequirements))
		soap_mark_condorSchedd__discoverJobRequirements(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__discoverJobRequirements(struct soap *soap, const struct condorSchedd__discoverJobRequirements *a)
{
	soap_embedded(soap, &a->jobAd, SOAP_TYPE_PointerToClassAdStruct);
	soap_mark_PointerToClassAdStruct(soap, &a->jobAd);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__discoverJobRequirements(struct soap *soap, struct condorSchedd__discoverJobRequirements *a)
{
	soap_default_PointerToClassAdStruct(soap, &a->jobAd);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__discoverJobRequirements(struct soap *soap, struct condorSchedd__discoverJobRequirements *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__discoverJobRequirements);
	soap_out_condorSchedd__discoverJobRequirements(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__discoverJobRequirements(struct soap *soap, const char *tag, int id, const struct condorSchedd__discoverJobRequirements *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__discoverJobRequirements), type);
	soap_out_PointerToClassAdStruct(soap, "jobAd", -1, &a->jobAd, "condorCore:ClassAdStructAttr");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__discoverJobRequirements * SOAP_FMAC4 soap_get_condorSchedd__discoverJobRequirements(struct soap *soap, struct condorSchedd__discoverJobRequirements *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__discoverJobRequirements(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__discoverJobRequirements * SOAP_FMAC4 soap_in_condorSchedd__discoverJobRequirements(struct soap *soap, const char *tag, struct condorSchedd__discoverJobRequirements *a, const char *type)
{
	short soap_flag_jobAd = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__discoverJobRequirements *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__discoverJobRequirements, sizeof(struct condorSchedd__discoverJobRequirements), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__discoverJobRequirements(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_jobAd && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToClassAdStruct(soap, "jobAd", &a->jobAd, "condorCore:ClassAdStructAttr"))
				{	soap_flag_jobAd = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_jobAd))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__discoverJobRequirements *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__discoverJobRequirements, sizeof(struct condorSchedd__discoverJobRequirements), 0), SOAP_TYPE_condorSchedd__discoverJobRequirements, sizeof(struct condorSchedd__discoverJobRequirements));
		if (soap->alloced)
			soap_default_condorSchedd__discoverJobRequirements(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__listSpool(struct soap *soap, struct condorSchedd__listSpool const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__listSpool))
		soap_mark_condorSchedd__listSpool(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__listSpool(struct soap *soap, const struct condorSchedd__listSpool *a)
{
	soap_embedded(soap, &a->transaction, SOAP_TYPE_condorSchedd__Transaction);
	soap_mark_condorSchedd__Transaction(soap, &a->transaction);
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->jobId, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__listSpool(struct soap *soap, struct condorSchedd__listSpool *a)
{
	soap_default_condorSchedd__Transaction(soap, &a->transaction);
	soap_default_xsd__int(soap, &a->clusterId);
	soap_default_xsd__int(soap, &a->jobId);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__listSpool(struct soap *soap, struct condorSchedd__listSpool *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__listSpool);
	soap_out_condorSchedd__listSpool(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__listSpool(struct soap *soap, const char *tag, int id, const struct condorSchedd__listSpool *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__listSpool), type);
	soap_out_condorSchedd__Transaction(soap, "transaction", -1, &a->transaction, "condorSchedd:Transaction");
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_out_xsd__int(soap, "jobId", -1, &a->jobId, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__listSpool * SOAP_FMAC4 soap_get_condorSchedd__listSpool(struct soap *soap, struct condorSchedd__listSpool *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__listSpool(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__listSpool * SOAP_FMAC4 soap_in_condorSchedd__listSpool(struct soap *soap, const char *tag, struct condorSchedd__listSpool *a, const char *type)
{
	short soap_flag_transaction = 1, soap_flag_clusterId = 1, soap_flag_jobId = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__listSpool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__listSpool, sizeof(struct condorSchedd__listSpool), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__listSpool(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Transaction(soap, "transaction", &a->transaction, "condorSchedd:Transaction"))
				{	soap_flag_transaction = 0;
					continue;
				}
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap_flag_jobId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "jobId", &a->jobId, "xsd:int"))
				{	soap_flag_jobId = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_transaction || soap_flag_clusterId || soap_flag_jobId))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__listSpool *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__listSpool, sizeof(struct condorSchedd__listSpool), 0), SOAP_TYPE_condorSchedd__listSpool, sizeof(struct condorSchedd__listSpool));
		if (soap->alloced)
			soap_default_condorSchedd__listSpool(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__closeSpool(struct soap *soap, struct condorSchedd__closeSpool const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__closeSpool))
		soap_mark_condorSchedd__closeSpool(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__closeSpool(struct soap *soap, const struct condorSchedd__closeSpool *a)
{
	soap_embedded(soap, &a->transaction, SOAP_TYPE_condorSchedd__Transaction);
	soap_mark_condorSchedd__Transaction(soap, &a->transaction);
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->jobId, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__closeSpool(struct soap *soap, struct condorSchedd__closeSpool *a)
{
	soap_default_condorSchedd__Transaction(soap, &a->transaction);
	soap_default_xsd__int(soap, &a->clusterId);
	soap_default_xsd__int(soap, &a->jobId);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__closeSpool(struct soap *soap, struct condorSchedd__closeSpool *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__closeSpool);
	soap_out_condorSchedd__closeSpool(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__closeSpool(struct soap *soap, const char *tag, int id, const struct condorSchedd__closeSpool *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__closeSpool), type);
	soap_out_condorSchedd__Transaction(soap, "transaction", -1, &a->transaction, "condorSchedd:Transaction");
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_out_xsd__int(soap, "jobId", -1, &a->jobId, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__closeSpool * SOAP_FMAC4 soap_get_condorSchedd__closeSpool(struct soap *soap, struct condorSchedd__closeSpool *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__closeSpool(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__closeSpool * SOAP_FMAC4 soap_in_condorSchedd__closeSpool(struct soap *soap, const char *tag, struct condorSchedd__closeSpool *a, const char *type)
{
	short soap_flag_transaction = 1, soap_flag_clusterId = 1, soap_flag_jobId = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__closeSpool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__closeSpool, sizeof(struct condorSchedd__closeSpool), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__closeSpool(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Transaction(soap, "transaction", &a->transaction, "condorSchedd:Transaction"))
				{	soap_flag_transaction = 0;
					continue;
				}
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap_flag_jobId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "jobId", &a->jobId, "xsd:int"))
				{	soap_flag_jobId = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_transaction || soap_flag_clusterId || soap_flag_jobId))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__closeSpool *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__closeSpool, sizeof(struct condorSchedd__closeSpool), 0), SOAP_TYPE_condorSchedd__closeSpool, sizeof(struct condorSchedd__closeSpool));
		if (soap->alloced)
			soap_default_condorSchedd__closeSpool(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__getFile(struct soap *soap, struct condorSchedd__getFile const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__getFile))
		soap_mark_condorSchedd__getFile(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__getFile(struct soap *soap, const struct condorSchedd__getFile *a)
{
	soap_embedded(soap, &a->transaction, SOAP_TYPE_condorSchedd__Transaction);
	soap_mark_condorSchedd__Transaction(soap, &a->transaction);
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->jobId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->name, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->name);
	soap_embedded(soap, &a->offset, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->length, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__getFile(struct soap *soap, struct condorSchedd__getFile *a)
{
	soap_default_condorSchedd__Transaction(soap, &a->transaction);
	soap_default_xsd__int(soap, &a->clusterId);
	soap_default_xsd__int(soap, &a->jobId);
	soap_default_xsd__string(soap, &a->name);
	soap_default_xsd__int(soap, &a->offset);
	soap_default_xsd__int(soap, &a->length);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__getFile(struct soap *soap, struct condorSchedd__getFile *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__getFile);
	soap_out_condorSchedd__getFile(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__getFile(struct soap *soap, const char *tag, int id, const struct condorSchedd__getFile *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__getFile), type);
	soap_out_condorSchedd__Transaction(soap, "transaction", -1, &a->transaction, "condorSchedd:Transaction");
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_out_xsd__int(soap, "jobId", -1, &a->jobId, "xsd:int");
	soap_out_xsd__string(soap, "name", -1, &a->name, "xsd:string");
	soap_out_xsd__int(soap, "offset", -1, &a->offset, "xsd:int");
	soap_out_xsd__int(soap, "length", -1, &a->length, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__getFile * SOAP_FMAC4 soap_get_condorSchedd__getFile(struct soap *soap, struct condorSchedd__getFile *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__getFile(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__getFile * SOAP_FMAC4 soap_in_condorSchedd__getFile(struct soap *soap, const char *tag, struct condorSchedd__getFile *a, const char *type)
{
	short soap_flag_transaction = 1, soap_flag_clusterId = 1, soap_flag_jobId = 1, soap_flag_name = 1, soap_flag_offset = 1, soap_flag_length = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__getFile *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__getFile, sizeof(struct condorSchedd__getFile), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__getFile(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Transaction(soap, "transaction", &a->transaction, "condorSchedd:Transaction"))
				{	soap_flag_transaction = 0;
					continue;
				}
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap_flag_jobId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "jobId", &a->jobId, "xsd:int"))
				{	soap_flag_jobId = 0;
					continue;
				}
			if (soap_flag_name && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name = 0;
					continue;
				}
			if (soap_flag_offset && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "offset", &a->offset, "xsd:int"))
				{	soap_flag_offset = 0;
					continue;
				}
			if (soap_flag_length && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "length", &a->length, "xsd:int"))
				{	soap_flag_length = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_transaction || soap_flag_clusterId || soap_flag_jobId || soap_flag_name || soap_flag_offset || soap_flag_length))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__getFile *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__getFile, sizeof(struct condorSchedd__getFile), 0), SOAP_TYPE_condorSchedd__getFile, sizeof(struct condorSchedd__getFile));
		if (soap->alloced)
			soap_default_condorSchedd__getFile(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__sendFile(struct soap *soap, struct condorSchedd__sendFile const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__sendFile))
		soap_mark_condorSchedd__sendFile(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__sendFile(struct soap *soap, const struct condorSchedd__sendFile *a)
{
	soap_embedded(soap, &a->transaction, SOAP_TYPE_condorSchedd__Transaction);
	soap_mark_condorSchedd__Transaction(soap, &a->transaction);
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->jobId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->name, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->name);
	soap_embedded(soap, &a->offset, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->data, SOAP_TYPE_PointerToxsd__base64Binary);
	soap_mark_PointerToxsd__base64Binary(soap, &a->data);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__sendFile(struct soap *soap, struct condorSchedd__sendFile *a)
{
	soap_default_condorSchedd__Transaction(soap, &a->transaction);
	soap_default_xsd__int(soap, &a->clusterId);
	soap_default_xsd__int(soap, &a->jobId);
	soap_default_xsd__string(soap, &a->name);
	soap_default_xsd__int(soap, &a->offset);
	soap_default_PointerToxsd__base64Binary(soap, &a->data);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__sendFile(struct soap *soap, struct condorSchedd__sendFile *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__sendFile);
	soap_out_condorSchedd__sendFile(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__sendFile(struct soap *soap, const char *tag, int id, const struct condorSchedd__sendFile *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__sendFile), type);
	soap_out_condorSchedd__Transaction(soap, "transaction", -1, &a->transaction, "condorSchedd:Transaction");
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_out_xsd__int(soap, "jobId", -1, &a->jobId, "xsd:int");
	soap_out_xsd__string(soap, "name", -1, &a->name, "xsd:string");
	soap_out_xsd__int(soap, "offset", -1, &a->offset, "xsd:int");
	soap_out_PointerToxsd__base64Binary(soap, "data", -1, &a->data, "xsd:base64Binary");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__sendFile * SOAP_FMAC4 soap_get_condorSchedd__sendFile(struct soap *soap, struct condorSchedd__sendFile *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__sendFile(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__sendFile * SOAP_FMAC4 soap_in_condorSchedd__sendFile(struct soap *soap, const char *tag, struct condorSchedd__sendFile *a, const char *type)
{
	short soap_flag_transaction = 1, soap_flag_clusterId = 1, soap_flag_jobId = 1, soap_flag_name = 1, soap_flag_offset = 1, soap_flag_data = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__sendFile *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__sendFile, sizeof(struct condorSchedd__sendFile), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__sendFile(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Transaction(soap, "transaction", &a->transaction, "condorSchedd:Transaction"))
				{	soap_flag_transaction = 0;
					continue;
				}
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap_flag_jobId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "jobId", &a->jobId, "xsd:int"))
				{	soap_flag_jobId = 0;
					continue;
				}
			if (soap_flag_name && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name = 0;
					continue;
				}
			if (soap_flag_offset && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "offset", &a->offset, "xsd:int"))
				{	soap_flag_offset = 0;
					continue;
				}
			if (soap_flag_data && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "data", &a->data, "xsd:base64Binary"))
				{	soap_flag_data = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_transaction || soap_flag_clusterId || soap_flag_jobId || soap_flag_name || soap_flag_offset || soap_flag_data))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__sendFile *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__sendFile, sizeof(struct condorSchedd__sendFile), 0), SOAP_TYPE_condorSchedd__sendFile, sizeof(struct condorSchedd__sendFile));
		if (soap->alloced)
			soap_default_condorSchedd__sendFile(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__declareFile(struct soap *soap, struct condorSchedd__declareFile const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__declareFile))
		soap_mark_condorSchedd__declareFile(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__declareFile(struct soap *soap, const struct condorSchedd__declareFile *a)
{
	soap_embedded(soap, &a->transaction, SOAP_TYPE_condorSchedd__Transaction);
	soap_mark_condorSchedd__Transaction(soap, &a->transaction);
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->jobId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->name, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->name);
	soap_embedded(soap, &a->size, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->hashType, SOAP_TYPE_condorSchedd__HashType);
	soap_embedded(soap, &a->hash, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->hash);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__declareFile(struct soap *soap, struct condorSchedd__declareFile *a)
{
	soap_default_condorSchedd__Transaction(soap, &a->transaction);
	soap_default_xsd__int(soap, &a->clusterId);
	soap_default_xsd__int(soap, &a->jobId);
	soap_default_xsd__string(soap, &a->name);
	soap_default_xsd__int(soap, &a->size);
	soap_default_condorSchedd__HashType(soap, &a->hashType);
	soap_default_xsd__string(soap, &a->hash);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__declareFile(struct soap *soap, struct condorSchedd__declareFile *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__declareFile);
	soap_out_condorSchedd__declareFile(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__declareFile(struct soap *soap, const char *tag, int id, const struct condorSchedd__declareFile *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__declareFile), type);
	soap_out_condorSchedd__Transaction(soap, "transaction", -1, &a->transaction, "condorSchedd:Transaction");
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_out_xsd__int(soap, "jobId", -1, &a->jobId, "xsd:int");
	soap_out_xsd__string(soap, "name", -1, &a->name, "xsd:string");
	soap_out_xsd__int(soap, "size", -1, &a->size, "xsd:int");
	soap_out_condorSchedd__HashType(soap, "hashType", -1, &a->hashType, "condorSchedd:HashType");
	soap_out_xsd__string(soap, "hash", -1, &a->hash, "xsd:string");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__declareFile * SOAP_FMAC4 soap_get_condorSchedd__declareFile(struct soap *soap, struct condorSchedd__declareFile *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__declareFile(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__declareFile * SOAP_FMAC4 soap_in_condorSchedd__declareFile(struct soap *soap, const char *tag, struct condorSchedd__declareFile *a, const char *type)
{
	short soap_flag_transaction = 1, soap_flag_clusterId = 1, soap_flag_jobId = 1, soap_flag_name = 1, soap_flag_size = 1, soap_flag_hashType = 1, soap_flag_hash = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__declareFile *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__declareFile, sizeof(struct condorSchedd__declareFile), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__declareFile(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Transaction(soap, "transaction", &a->transaction, "condorSchedd:Transaction"))
				{	soap_flag_transaction = 0;
					continue;
				}
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap_flag_jobId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "jobId", &a->jobId, "xsd:int"))
				{	soap_flag_jobId = 0;
					continue;
				}
			if (soap_flag_name && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name = 0;
					continue;
				}
			if (soap_flag_size && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "size", &a->size, "xsd:int"))
				{	soap_flag_size = 0;
					continue;
				}
			if (soap_flag_hashType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__HashType(soap, "hashType", &a->hashType, "condorSchedd:HashType"))
				{	soap_flag_hashType = 0;
					continue;
				}
			if (soap_flag_hash && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "hash", &a->hash, "xsd:string"))
				{	soap_flag_hash = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_transaction || soap_flag_clusterId || soap_flag_jobId || soap_flag_name || soap_flag_size || soap_flag_hashType || soap_flag_hash))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__declareFile *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__declareFile, sizeof(struct condorSchedd__declareFile), 0), SOAP_TYPE_condorSchedd__declareFile, sizeof(struct condorSchedd__declareFile));
		if (soap->alloced)
			soap_default_condorSchedd__declareFile(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__getJobAd(struct soap *soap, struct condorSchedd__getJobAd const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__getJobAd))
		soap_mark_condorSchedd__getJobAd(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__getJobAd(struct soap *soap, const struct condorSchedd__getJobAd *a)
{
	soap_embedded(soap, &a->transaction, SOAP_TYPE_condorSchedd__Transaction);
	soap_mark_condorSchedd__Transaction(soap, &a->transaction);
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->jobId, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__getJobAd(struct soap *soap, struct condorSchedd__getJobAd *a)
{
	soap_default_condorSchedd__Transaction(soap, &a->transaction);
	soap_default_xsd__int(soap, &a->clusterId);
	soap_default_xsd__int(soap, &a->jobId);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__getJobAd(struct soap *soap, struct condorSchedd__getJobAd *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__getJobAd);
	soap_out_condorSchedd__getJobAd(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__getJobAd(struct soap *soap, const char *tag, int id, const struct condorSchedd__getJobAd *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__getJobAd), type);
	soap_out_condorSchedd__Transaction(soap, "transaction", -1, &a->transaction, "condorSchedd:Transaction");
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_out_xsd__int(soap, "jobId", -1, &a->jobId, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__getJobAd * SOAP_FMAC4 soap_get_condorSchedd__getJobAd(struct soap *soap, struct condorSchedd__getJobAd *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__getJobAd(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__getJobAd * SOAP_FMAC4 soap_in_condorSchedd__getJobAd(struct soap *soap, const char *tag, struct condorSchedd__getJobAd *a, const char *type)
{
	short soap_flag_transaction = 1, soap_flag_clusterId = 1, soap_flag_jobId = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__getJobAd *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__getJobAd, sizeof(struct condorSchedd__getJobAd), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__getJobAd(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Transaction(soap, "transaction", &a->transaction, "condorSchedd:Transaction"))
				{	soap_flag_transaction = 0;
					continue;
				}
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap_flag_jobId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "jobId", &a->jobId, "xsd:int"))
				{	soap_flag_jobId = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_transaction || soap_flag_clusterId || soap_flag_jobId))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__getJobAd *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__getJobAd, sizeof(struct condorSchedd__getJobAd), 0), SOAP_TYPE_condorSchedd__getJobAd, sizeof(struct condorSchedd__getJobAd));
		if (soap->alloced)
			soap_default_condorSchedd__getJobAd(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__getJobAds(struct soap *soap, struct condorSchedd__getJobAds const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__getJobAds))
		soap_mark_condorSchedd__getJobAds(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__getJobAds(struct soap *soap, const struct condorSchedd__getJobAds *a)
{
	soap_embedded(soap, &a->transaction, SOAP_TYPE_condorSchedd__Transaction);
	soap_mark_condorSchedd__Transaction(soap, &a->transaction);
	soap_embedded(soap, &a->constraint, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->constraint);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__getJobAds(struct soap *soap, struct condorSchedd__getJobAds *a)
{
	soap_default_condorSchedd__Transaction(soap, &a->transaction);
	soap_default_xsd__string(soap, &a->constraint);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__getJobAds(struct soap *soap, struct condorSchedd__getJobAds *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__getJobAds);
	soap_out_condorSchedd__getJobAds(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__getJobAds(struct soap *soap, const char *tag, int id, const struct condorSchedd__getJobAds *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__getJobAds), type);
	soap_out_condorSchedd__Transaction(soap, "transaction", -1, &a->transaction, "condorSchedd:Transaction");
	soap_out_xsd__string(soap, "constraint", -1, &a->constraint, "xsd:string");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__getJobAds * SOAP_FMAC4 soap_get_condorSchedd__getJobAds(struct soap *soap, struct condorSchedd__getJobAds *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__getJobAds(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__getJobAds * SOAP_FMAC4 soap_in_condorSchedd__getJobAds(struct soap *soap, const char *tag, struct condorSchedd__getJobAds *a, const char *type)
{
	short soap_flag_transaction = 1, soap_flag_constraint = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__getJobAds *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__getJobAds, sizeof(struct condorSchedd__getJobAds), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__getJobAds(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Transaction(soap, "transaction", &a->transaction, "condorSchedd:Transaction"))
				{	soap_flag_transaction = 0;
					continue;
				}
			if (soap_flag_constraint && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "constraint", &a->constraint, "xsd:string"))
				{	soap_flag_constraint = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_transaction || soap_flag_constraint))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__getJobAds *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__getJobAds, sizeof(struct condorSchedd__getJobAds), 0), SOAP_TYPE_condorSchedd__getJobAds, sizeof(struct condorSchedd__getJobAds));
		if (soap->alloced)
			soap_default_condorSchedd__getJobAds(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__submit(struct soap *soap, struct condorSchedd__submit const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__submit))
		soap_mark_condorSchedd__submit(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__submit(struct soap *soap, const struct condorSchedd__submit *a)
{
	soap_embedded(soap, &a->transaction, SOAP_TYPE_condorSchedd__Transaction);
	soap_mark_condorSchedd__Transaction(soap, &a->transaction);
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->jobId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->jobAd, SOAP_TYPE_PointerToClassAdStruct);
	soap_mark_PointerToClassAdStruct(soap, &a->jobAd);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__submit(struct soap *soap, struct condorSchedd__submit *a)
{
	soap_default_condorSchedd__Transaction(soap, &a->transaction);
	soap_default_xsd__int(soap, &a->clusterId);
	soap_default_xsd__int(soap, &a->jobId);
	soap_default_PointerToClassAdStruct(soap, &a->jobAd);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__submit(struct soap *soap, struct condorSchedd__submit *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__submit);
	soap_out_condorSchedd__submit(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__submit(struct soap *soap, const char *tag, int id, const struct condorSchedd__submit *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__submit), type);
	soap_out_condorSchedd__Transaction(soap, "transaction", -1, &a->transaction, "condorSchedd:Transaction");
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_out_xsd__int(soap, "jobId", -1, &a->jobId, "xsd:int");
	soap_out_PointerToClassAdStruct(soap, "jobAd", -1, &a->jobAd, "condorCore:ClassAdStructAttr");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__submit * SOAP_FMAC4 soap_get_condorSchedd__submit(struct soap *soap, struct condorSchedd__submit *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__submit(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__submit * SOAP_FMAC4 soap_in_condorSchedd__submit(struct soap *soap, const char *tag, struct condorSchedd__submit *a, const char *type)
{
	short soap_flag_transaction = 1, soap_flag_clusterId = 1, soap_flag_jobId = 1, soap_flag_jobAd = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__submit *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__submit, sizeof(struct condorSchedd__submit), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__submit(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Transaction(soap, "transaction", &a->transaction, "condorSchedd:Transaction"))
				{	soap_flag_transaction = 0;
					continue;
				}
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap_flag_jobId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "jobId", &a->jobId, "xsd:int"))
				{	soap_flag_jobId = 0;
					continue;
				}
			if (soap_flag_jobAd && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToClassAdStruct(soap, "jobAd", &a->jobAd, "condorCore:ClassAdStructAttr"))
				{	soap_flag_jobAd = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_transaction || soap_flag_clusterId || soap_flag_jobId || soap_flag_jobAd))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__submit *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__submit, sizeof(struct condorSchedd__submit), 0), SOAP_TYPE_condorSchedd__submit, sizeof(struct condorSchedd__submit));
		if (soap->alloced)
			soap_default_condorSchedd__submit(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__releaseJob(struct soap *soap, struct condorSchedd__releaseJob const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__releaseJob))
		soap_mark_condorSchedd__releaseJob(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__releaseJob(struct soap *soap, const struct condorSchedd__releaseJob *a)
{
	soap_embedded(soap, &a->transaction, SOAP_TYPE_condorSchedd__Transaction);
	soap_mark_condorSchedd__Transaction(soap, &a->transaction);
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->jobId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->reason, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->reason);
	soap_embedded(soap, &a->email_user, SOAP_TYPE_xsd__boolean);
	soap_embedded(soap, &a->email_admin, SOAP_TYPE_xsd__boolean);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__releaseJob(struct soap *soap, struct condorSchedd__releaseJob *a)
{
	soap_default_condorSchedd__Transaction(soap, &a->transaction);
	soap_default_xsd__int(soap, &a->clusterId);
	soap_default_xsd__int(soap, &a->jobId);
	soap_default_xsd__string(soap, &a->reason);
	soap_default_xsd__boolean(soap, &a->email_user);
	soap_default_xsd__boolean(soap, &a->email_admin);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__releaseJob(struct soap *soap, struct condorSchedd__releaseJob *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__releaseJob);
	soap_out_condorSchedd__releaseJob(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__releaseJob(struct soap *soap, const char *tag, int id, const struct condorSchedd__releaseJob *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__releaseJob), type);
	soap_out_condorSchedd__Transaction(soap, "transaction", -1, &a->transaction, "condorSchedd:Transaction");
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_out_xsd__int(soap, "jobId", -1, &a->jobId, "xsd:int");
	soap_out_xsd__string(soap, "reason", -1, &a->reason, "xsd:string");
	soap_out_xsd__boolean(soap, "email-user", -1, &a->email_user, "xsd:boolean");
	soap_out_xsd__boolean(soap, "email-admin", -1, &a->email_admin, "xsd:boolean");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__releaseJob * SOAP_FMAC4 soap_get_condorSchedd__releaseJob(struct soap *soap, struct condorSchedd__releaseJob *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__releaseJob(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__releaseJob * SOAP_FMAC4 soap_in_condorSchedd__releaseJob(struct soap *soap, const char *tag, struct condorSchedd__releaseJob *a, const char *type)
{
	short soap_flag_transaction = 1, soap_flag_clusterId = 1, soap_flag_jobId = 1, soap_flag_reason = 1, soap_flag_email_user = 1, soap_flag_email_admin = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__releaseJob *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__releaseJob, sizeof(struct condorSchedd__releaseJob), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__releaseJob(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Transaction(soap, "transaction", &a->transaction, "condorSchedd:Transaction"))
				{	soap_flag_transaction = 0;
					continue;
				}
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap_flag_jobId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "jobId", &a->jobId, "xsd:int"))
				{	soap_flag_jobId = 0;
					continue;
				}
			if (soap_flag_reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "reason", &a->reason, "xsd:string"))
				{	soap_flag_reason = 0;
					continue;
				}
			if (soap_flag_email_user && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "email-user", &a->email_user, "xsd:boolean"))
				{	soap_flag_email_user = 0;
					continue;
				}
			if (soap_flag_email_admin && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "email-admin", &a->email_admin, "xsd:boolean"))
				{	soap_flag_email_admin = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_transaction || soap_flag_clusterId || soap_flag_jobId || soap_flag_reason || soap_flag_email_user || soap_flag_email_admin))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__releaseJob *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__releaseJob, sizeof(struct condorSchedd__releaseJob), 0), SOAP_TYPE_condorSchedd__releaseJob, sizeof(struct condorSchedd__releaseJob));
		if (soap->alloced)
			soap_default_condorSchedd__releaseJob(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__holdJob(struct soap *soap, struct condorSchedd__holdJob const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__holdJob))
		soap_mark_condorSchedd__holdJob(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__holdJob(struct soap *soap, const struct condorSchedd__holdJob *a)
{
	soap_embedded(soap, &a->transaction, SOAP_TYPE_condorSchedd__Transaction);
	soap_mark_condorSchedd__Transaction(soap, &a->transaction);
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->jobId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->reason, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->reason);
	soap_embedded(soap, &a->email_user, SOAP_TYPE_xsd__boolean);
	soap_embedded(soap, &a->email_admin, SOAP_TYPE_xsd__boolean);
	soap_embedded(soap, &a->system_hold, SOAP_TYPE_xsd__boolean);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__holdJob(struct soap *soap, struct condorSchedd__holdJob *a)
{
	soap_default_condorSchedd__Transaction(soap, &a->transaction);
	soap_default_xsd__int(soap, &a->clusterId);
	soap_default_xsd__int(soap, &a->jobId);
	soap_default_xsd__string(soap, &a->reason);
	soap_default_xsd__boolean(soap, &a->email_user);
	soap_default_xsd__boolean(soap, &a->email_admin);
	soap_default_xsd__boolean(soap, &a->system_hold);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__holdJob(struct soap *soap, struct condorSchedd__holdJob *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__holdJob);
	soap_out_condorSchedd__holdJob(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__holdJob(struct soap *soap, const char *tag, int id, const struct condorSchedd__holdJob *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__holdJob), type);
	soap_out_condorSchedd__Transaction(soap, "transaction", -1, &a->transaction, "condorSchedd:Transaction");
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_out_xsd__int(soap, "jobId", -1, &a->jobId, "xsd:int");
	soap_out_xsd__string(soap, "reason", -1, &a->reason, "xsd:string");
	soap_out_xsd__boolean(soap, "email-user", -1, &a->email_user, "xsd:boolean");
	soap_out_xsd__boolean(soap, "email-admin", -1, &a->email_admin, "xsd:boolean");
	soap_out_xsd__boolean(soap, "system-hold", -1, &a->system_hold, "xsd:boolean");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__holdJob * SOAP_FMAC4 soap_get_condorSchedd__holdJob(struct soap *soap, struct condorSchedd__holdJob *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__holdJob(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__holdJob * SOAP_FMAC4 soap_in_condorSchedd__holdJob(struct soap *soap, const char *tag, struct condorSchedd__holdJob *a, const char *type)
{
	short soap_flag_transaction = 1, soap_flag_clusterId = 1, soap_flag_jobId = 1, soap_flag_reason = 1, soap_flag_email_user = 1, soap_flag_email_admin = 1, soap_flag_system_hold = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__holdJob *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__holdJob, sizeof(struct condorSchedd__holdJob), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__holdJob(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Transaction(soap, "transaction", &a->transaction, "condorSchedd:Transaction"))
				{	soap_flag_transaction = 0;
					continue;
				}
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap_flag_jobId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "jobId", &a->jobId, "xsd:int"))
				{	soap_flag_jobId = 0;
					continue;
				}
			if (soap_flag_reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "reason", &a->reason, "xsd:string"))
				{	soap_flag_reason = 0;
					continue;
				}
			if (soap_flag_email_user && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "email-user", &a->email_user, "xsd:boolean"))
				{	soap_flag_email_user = 0;
					continue;
				}
			if (soap_flag_email_admin && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "email-admin", &a->email_admin, "xsd:boolean"))
				{	soap_flag_email_admin = 0;
					continue;
				}
			if (soap_flag_system_hold && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "system-hold", &a->system_hold, "xsd:boolean"))
				{	soap_flag_system_hold = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_transaction || soap_flag_clusterId || soap_flag_jobId || soap_flag_reason || soap_flag_email_user || soap_flag_email_admin || soap_flag_system_hold))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__holdJob *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__holdJob, sizeof(struct condorSchedd__holdJob), 0), SOAP_TYPE_condorSchedd__holdJob, sizeof(struct condorSchedd__holdJob));
		if (soap->alloced)
			soap_default_condorSchedd__holdJob(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__removeJob(struct soap *soap, struct condorSchedd__removeJob const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__removeJob))
		soap_mark_condorSchedd__removeJob(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__removeJob(struct soap *soap, const struct condorSchedd__removeJob *a)
{
	soap_embedded(soap, &a->transaction, SOAP_TYPE_condorSchedd__Transaction);
	soap_mark_condorSchedd__Transaction(soap, &a->transaction);
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->jobId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->reason, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->reason);
	soap_embedded(soap, &a->force_removal, SOAP_TYPE_xsd__boolean);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__removeJob(struct soap *soap, struct condorSchedd__removeJob *a)
{
	soap_default_condorSchedd__Transaction(soap, &a->transaction);
	soap_default_xsd__int(soap, &a->clusterId);
	soap_default_xsd__int(soap, &a->jobId);
	soap_default_xsd__string(soap, &a->reason);
	soap_default_xsd__boolean(soap, &a->force_removal);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__removeJob(struct soap *soap, struct condorSchedd__removeJob *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__removeJob);
	soap_out_condorSchedd__removeJob(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__removeJob(struct soap *soap, const char *tag, int id, const struct condorSchedd__removeJob *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__removeJob), type);
	soap_out_condorSchedd__Transaction(soap, "transaction", -1, &a->transaction, "condorSchedd:Transaction");
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_out_xsd__int(soap, "jobId", -1, &a->jobId, "xsd:int");
	soap_out_xsd__string(soap, "reason", -1, &a->reason, "xsd:string");
	soap_out_xsd__boolean(soap, "force-removal", -1, &a->force_removal, "xsd:boolean");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__removeJob * SOAP_FMAC4 soap_get_condorSchedd__removeJob(struct soap *soap, struct condorSchedd__removeJob *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__removeJob(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__removeJob * SOAP_FMAC4 soap_in_condorSchedd__removeJob(struct soap *soap, const char *tag, struct condorSchedd__removeJob *a, const char *type)
{
	short soap_flag_transaction = 1, soap_flag_clusterId = 1, soap_flag_jobId = 1, soap_flag_reason = 1, soap_flag_force_removal = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__removeJob *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__removeJob, sizeof(struct condorSchedd__removeJob), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__removeJob(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Transaction(soap, "transaction", &a->transaction, "condorSchedd:Transaction"))
				{	soap_flag_transaction = 0;
					continue;
				}
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap_flag_jobId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "jobId", &a->jobId, "xsd:int"))
				{	soap_flag_jobId = 0;
					continue;
				}
			if (soap_flag_reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "reason", &a->reason, "xsd:string"))
				{	soap_flag_reason = 0;
					continue;
				}
			if (soap_flag_force_removal && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "force-removal", &a->force_removal, "xsd:boolean"))
				{	soap_flag_force_removal = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_transaction || soap_flag_clusterId || soap_flag_jobId || soap_flag_reason || soap_flag_force_removal))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__removeJob *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__removeJob, sizeof(struct condorSchedd__removeJob), 0), SOAP_TYPE_condorSchedd__removeJob, sizeof(struct condorSchedd__removeJob));
		if (soap->alloced)
			soap_default_condorSchedd__removeJob(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__newJob(struct soap *soap, struct condorSchedd__newJob const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__newJob))
		soap_mark_condorSchedd__newJob(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__newJob(struct soap *soap, const struct condorSchedd__newJob *a)
{
	soap_embedded(soap, &a->transaction, SOAP_TYPE_condorSchedd__Transaction);
	soap_mark_condorSchedd__Transaction(soap, &a->transaction);
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__newJob(struct soap *soap, struct condorSchedd__newJob *a)
{
	soap_default_condorSchedd__Transaction(soap, &a->transaction);
	soap_default_xsd__int(soap, &a->clusterId);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__newJob(struct soap *soap, struct condorSchedd__newJob *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__newJob);
	soap_out_condorSchedd__newJob(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__newJob(struct soap *soap, const char *tag, int id, const struct condorSchedd__newJob *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__newJob), type);
	soap_out_condorSchedd__Transaction(soap, "transaction", -1, &a->transaction, "condorSchedd:Transaction");
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__newJob * SOAP_FMAC4 soap_get_condorSchedd__newJob(struct soap *soap, struct condorSchedd__newJob *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__newJob(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__newJob * SOAP_FMAC4 soap_in_condorSchedd__newJob(struct soap *soap, const char *tag, struct condorSchedd__newJob *a, const char *type)
{
	short soap_flag_transaction = 1, soap_flag_clusterId = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__newJob *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__newJob, sizeof(struct condorSchedd__newJob), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__newJob(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Transaction(soap, "transaction", &a->transaction, "condorSchedd:Transaction"))
				{	soap_flag_transaction = 0;
					continue;
				}
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_transaction || soap_flag_clusterId))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__newJob *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__newJob, sizeof(struct condorSchedd__newJob), 0), SOAP_TYPE_condorSchedd__newJob, sizeof(struct condorSchedd__newJob));
		if (soap->alloced)
			soap_default_condorSchedd__newJob(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__removeCluster(struct soap *soap, struct condorSchedd__removeCluster const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__removeCluster))
		soap_mark_condorSchedd__removeCluster(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__removeCluster(struct soap *soap, const struct condorSchedd__removeCluster *a)
{
	soap_embedded(soap, &a->transaction, SOAP_TYPE_condorSchedd__Transaction);
	soap_mark_condorSchedd__Transaction(soap, &a->transaction);
	soap_embedded(soap, &a->clusterId, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->reason, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->reason);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__removeCluster(struct soap *soap, struct condorSchedd__removeCluster *a)
{
	soap_default_condorSchedd__Transaction(soap, &a->transaction);
	soap_default_xsd__int(soap, &a->clusterId);
	soap_default_xsd__string(soap, &a->reason);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__removeCluster(struct soap *soap, struct condorSchedd__removeCluster *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__removeCluster);
	soap_out_condorSchedd__removeCluster(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__removeCluster(struct soap *soap, const char *tag, int id, const struct condorSchedd__removeCluster *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__removeCluster), type);
	soap_out_condorSchedd__Transaction(soap, "transaction", -1, &a->transaction, "condorSchedd:Transaction");
	soap_out_xsd__int(soap, "clusterId", -1, &a->clusterId, "xsd:int");
	soap_out_xsd__string(soap, "reason", -1, &a->reason, "xsd:string");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__removeCluster * SOAP_FMAC4 soap_get_condorSchedd__removeCluster(struct soap *soap, struct condorSchedd__removeCluster *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__removeCluster(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__removeCluster * SOAP_FMAC4 soap_in_condorSchedd__removeCluster(struct soap *soap, const char *tag, struct condorSchedd__removeCluster *a, const char *type)
{
	short soap_flag_transaction = 1, soap_flag_clusterId = 1, soap_flag_reason = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__removeCluster *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__removeCluster, sizeof(struct condorSchedd__removeCluster), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__removeCluster(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Transaction(soap, "transaction", &a->transaction, "condorSchedd:Transaction"))
				{	soap_flag_transaction = 0;
					continue;
				}
			if (soap_flag_clusterId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "clusterId", &a->clusterId, "xsd:int"))
				{	soap_flag_clusterId = 0;
					continue;
				}
			if (soap_flag_reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "reason", &a->reason, "xsd:string"))
				{	soap_flag_reason = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_transaction || soap_flag_clusterId || soap_flag_reason))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__removeCluster *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__removeCluster, sizeof(struct condorSchedd__removeCluster), 0), SOAP_TYPE_condorSchedd__removeCluster, sizeof(struct condorSchedd__removeCluster));
		if (soap->alloced)
			soap_default_condorSchedd__removeCluster(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__newCluster(struct soap *soap, struct condorSchedd__newCluster const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__newCluster))
		soap_mark_condorSchedd__newCluster(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__newCluster(struct soap *soap, const struct condorSchedd__newCluster *a)
{
	soap_embedded(soap, &a->transaction, SOAP_TYPE_condorSchedd__Transaction);
	soap_mark_condorSchedd__Transaction(soap, &a->transaction);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__newCluster(struct soap *soap, struct condorSchedd__newCluster *a)
{
	soap_default_condorSchedd__Transaction(soap, &a->transaction);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__newCluster(struct soap *soap, struct condorSchedd__newCluster *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__newCluster);
	soap_out_condorSchedd__newCluster(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__newCluster(struct soap *soap, const char *tag, int id, const struct condorSchedd__newCluster *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__newCluster), type);
	soap_out_condorSchedd__Transaction(soap, "transaction", -1, &a->transaction, "condorSchedd:Transaction");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__newCluster * SOAP_FMAC4 soap_get_condorSchedd__newCluster(struct soap *soap, struct condorSchedd__newCluster *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__newCluster(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__newCluster * SOAP_FMAC4 soap_in_condorSchedd__newCluster(struct soap *soap, const char *tag, struct condorSchedd__newCluster *a, const char *type)
{
	short soap_flag_transaction = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__newCluster *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__newCluster, sizeof(struct condorSchedd__newCluster), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__newCluster(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Transaction(soap, "transaction", &a->transaction, "condorSchedd:Transaction"))
				{	soap_flag_transaction = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_transaction))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__newCluster *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__newCluster, sizeof(struct condorSchedd__newCluster), 0), SOAP_TYPE_condorSchedd__newCluster, sizeof(struct condorSchedd__newCluster));
		if (soap->alloced)
			soap_default_condorSchedd__newCluster(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__extendTransaction(struct soap *soap, struct condorSchedd__extendTransaction const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__extendTransaction))
		soap_mark_condorSchedd__extendTransaction(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__extendTransaction(struct soap *soap, const struct condorSchedd__extendTransaction *a)
{
	soap_embedded(soap, &a->transaction, SOAP_TYPE_condorSchedd__Transaction);
	soap_mark_condorSchedd__Transaction(soap, &a->transaction);
	soap_embedded(soap, &a->duration, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__extendTransaction(struct soap *soap, struct condorSchedd__extendTransaction *a)
{
	soap_default_condorSchedd__Transaction(soap, &a->transaction);
	soap_default_xsd__int(soap, &a->duration);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__extendTransaction(struct soap *soap, struct condorSchedd__extendTransaction *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__extendTransaction);
	soap_out_condorSchedd__extendTransaction(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__extendTransaction(struct soap *soap, const char *tag, int id, const struct condorSchedd__extendTransaction *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__extendTransaction), type);
	soap_out_condorSchedd__Transaction(soap, "transaction", -1, &a->transaction, "condorSchedd:Transaction");
	soap_out_xsd__int(soap, "duration", -1, &a->duration, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__extendTransaction * SOAP_FMAC4 soap_get_condorSchedd__extendTransaction(struct soap *soap, struct condorSchedd__extendTransaction *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__extendTransaction(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__extendTransaction * SOAP_FMAC4 soap_in_condorSchedd__extendTransaction(struct soap *soap, const char *tag, struct condorSchedd__extendTransaction *a, const char *type)
{
	short soap_flag_transaction = 1, soap_flag_duration = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__extendTransaction *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__extendTransaction, sizeof(struct condorSchedd__extendTransaction), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__extendTransaction(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Transaction(soap, "transaction", &a->transaction, "condorSchedd:Transaction"))
				{	soap_flag_transaction = 0;
					continue;
				}
			if (soap_flag_duration && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "duration", &a->duration, "xsd:int"))
				{	soap_flag_duration = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_transaction || soap_flag_duration))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__extendTransaction *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__extendTransaction, sizeof(struct condorSchedd__extendTransaction), 0), SOAP_TYPE_condorSchedd__extendTransaction, sizeof(struct condorSchedd__extendTransaction));
		if (soap->alloced)
			soap_default_condorSchedd__extendTransaction(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__abortTransaction(struct soap *soap, struct condorSchedd__abortTransaction const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__abortTransaction))
		soap_mark_condorSchedd__abortTransaction(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__abortTransaction(struct soap *soap, const struct condorSchedd__abortTransaction *a)
{
	soap_embedded(soap, &a->transaction, SOAP_TYPE_condorSchedd__Transaction);
	soap_mark_condorSchedd__Transaction(soap, &a->transaction);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__abortTransaction(struct soap *soap, struct condorSchedd__abortTransaction *a)
{
	soap_default_condorSchedd__Transaction(soap, &a->transaction);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__abortTransaction(struct soap *soap, struct condorSchedd__abortTransaction *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__abortTransaction);
	soap_out_condorSchedd__abortTransaction(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__abortTransaction(struct soap *soap, const char *tag, int id, const struct condorSchedd__abortTransaction *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__abortTransaction), type);
	soap_out_condorSchedd__Transaction(soap, "transaction", -1, &a->transaction, "condorSchedd:Transaction");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__abortTransaction * SOAP_FMAC4 soap_get_condorSchedd__abortTransaction(struct soap *soap, struct condorSchedd__abortTransaction *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__abortTransaction(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__abortTransaction * SOAP_FMAC4 soap_in_condorSchedd__abortTransaction(struct soap *soap, const char *tag, struct condorSchedd__abortTransaction *a, const char *type)
{
	short soap_flag_transaction = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__abortTransaction *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__abortTransaction, sizeof(struct condorSchedd__abortTransaction), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__abortTransaction(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Transaction(soap, "transaction", &a->transaction, "condorSchedd:Transaction"))
				{	soap_flag_transaction = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_transaction))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__abortTransaction *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__abortTransaction, sizeof(struct condorSchedd__abortTransaction), 0), SOAP_TYPE_condorSchedd__abortTransaction, sizeof(struct condorSchedd__abortTransaction));
		if (soap->alloced)
			soap_default_condorSchedd__abortTransaction(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__commitTransaction(struct soap *soap, struct condorSchedd__commitTransaction const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__commitTransaction))
		soap_mark_condorSchedd__commitTransaction(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__commitTransaction(struct soap *soap, const struct condorSchedd__commitTransaction *a)
{
	soap_embedded(soap, &a->transaction, SOAP_TYPE_condorSchedd__Transaction);
	soap_mark_condorSchedd__Transaction(soap, &a->transaction);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__commitTransaction(struct soap *soap, struct condorSchedd__commitTransaction *a)
{
	soap_default_condorSchedd__Transaction(soap, &a->transaction);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__commitTransaction(struct soap *soap, struct condorSchedd__commitTransaction *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__commitTransaction);
	soap_out_condorSchedd__commitTransaction(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__commitTransaction(struct soap *soap, const char *tag, int id, const struct condorSchedd__commitTransaction *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__commitTransaction), type);
	soap_out_condorSchedd__Transaction(soap, "transaction", -1, &a->transaction, "condorSchedd:Transaction");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__commitTransaction * SOAP_FMAC4 soap_get_condorSchedd__commitTransaction(struct soap *soap, struct condorSchedd__commitTransaction *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__commitTransaction(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__commitTransaction * SOAP_FMAC4 soap_in_condorSchedd__commitTransaction(struct soap *soap, const char *tag, struct condorSchedd__commitTransaction *a, const char *type)
{
	short soap_flag_transaction = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__commitTransaction *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__commitTransaction, sizeof(struct condorSchedd__commitTransaction), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__commitTransaction(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Transaction(soap, "transaction", &a->transaction, "condorSchedd:Transaction"))
				{	soap_flag_transaction = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_transaction))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__commitTransaction *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__commitTransaction, sizeof(struct condorSchedd__commitTransaction), 0), SOAP_TYPE_condorSchedd__commitTransaction, sizeof(struct condorSchedd__commitTransaction));
		if (soap->alloced)
			soap_default_condorSchedd__commitTransaction(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__beginTransaction(struct soap *soap, struct condorSchedd__beginTransaction const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__beginTransaction))
		soap_mark_condorSchedd__beginTransaction(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__beginTransaction(struct soap *soap, const struct condorSchedd__beginTransaction *a)
{
	soap_embedded(soap, &a->duration, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__beginTransaction(struct soap *soap, struct condorSchedd__beginTransaction *a)
{
	soap_default_xsd__int(soap, &a->duration);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__beginTransaction(struct soap *soap, struct condorSchedd__beginTransaction *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__beginTransaction);
	soap_out_condorSchedd__beginTransaction(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__beginTransaction(struct soap *soap, const char *tag, int id, const struct condorSchedd__beginTransaction *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__beginTransaction), type);
	soap_out_xsd__int(soap, "duration", -1, &a->duration, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__beginTransaction * SOAP_FMAC4 soap_get_condorSchedd__beginTransaction(struct soap *soap, struct condorSchedd__beginTransaction *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__beginTransaction(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__beginTransaction * SOAP_FMAC4 soap_in_condorSchedd__beginTransaction(struct soap *soap, const char *tag, struct condorSchedd__beginTransaction *a, const char *type)
{
	short soap_flag_duration = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__beginTransaction *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__beginTransaction, sizeof(struct condorSchedd__beginTransaction), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__beginTransaction(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_duration && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "duration", &a->duration, "xsd:int"))
				{	soap_flag_duration = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_duration))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__beginTransaction *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__beginTransaction, sizeof(struct condorSchedd__beginTransaction), 0), SOAP_TYPE_condorSchedd__beginTransaction, sizeof(struct condorSchedd__beginTransaction));
		if (soap->alloced)
			soap_default_condorSchedd__beginTransaction(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__FileInfoArrayAndStatusResponse(struct soap *soap, struct condorSchedd__FileInfoArrayAndStatusResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__FileInfoArrayAndStatusResponse))
		soap_mark_condorSchedd__FileInfoArrayAndStatusResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__FileInfoArrayAndStatusResponse(struct soap *soap, const struct condorSchedd__FileInfoArrayAndStatusResponse *a)
{
	soap_embedded(soap, &a->response, SOAP_TYPE_condorSchedd__FileInfoArrayAndStatus);
	soap_mark_condorSchedd__FileInfoArrayAndStatus(soap, &a->response);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__FileInfoArrayAndStatusResponse(struct soap *soap, struct condorSchedd__FileInfoArrayAndStatusResponse *a)
{
	soap_default_condorSchedd__FileInfoArrayAndStatus(soap, &a->response);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__FileInfoArrayAndStatusResponse(struct soap *soap, struct condorSchedd__FileInfoArrayAndStatusResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__FileInfoArrayAndStatusResponse);
	soap_out_condorSchedd__FileInfoArrayAndStatusResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__FileInfoArrayAndStatusResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__FileInfoArrayAndStatusResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__FileInfoArrayAndStatusResponse), type);
	soap_element_result(soap, "response");
	soap_out_condorSchedd__FileInfoArrayAndStatus(soap, "response", -1, &a->response, "condorSchedd:FileInfoArrayAndStatus");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__FileInfoArrayAndStatusResponse * SOAP_FMAC4 soap_get_condorSchedd__FileInfoArrayAndStatusResponse(struct soap *soap, struct condorSchedd__FileInfoArrayAndStatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__FileInfoArrayAndStatusResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__FileInfoArrayAndStatusResponse * SOAP_FMAC4 soap_in_condorSchedd__FileInfoArrayAndStatusResponse(struct soap *soap, const char *tag, struct condorSchedd__FileInfoArrayAndStatusResponse *a, const char *type)
{
	short soap_flag_response = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__FileInfoArrayAndStatusResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__FileInfoArrayAndStatusResponse, sizeof(struct condorSchedd__FileInfoArrayAndStatusResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__FileInfoArrayAndStatusResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__FileInfoArrayAndStatus(soap, "response", &a->response, "condorSchedd:FileInfoArrayAndStatus"))
				{	soap_flag_response = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__FileInfoArrayAndStatusResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__FileInfoArrayAndStatusResponse, sizeof(struct condorSchedd__FileInfoArrayAndStatusResponse), 0), SOAP_TYPE_condorSchedd__FileInfoArrayAndStatusResponse, sizeof(struct condorSchedd__FileInfoArrayAndStatusResponse));
		if (soap->alloced)
			soap_default_condorSchedd__FileInfoArrayAndStatusResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__Base64DataAndStatusResponse(struct soap *soap, struct condorSchedd__Base64DataAndStatusResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__Base64DataAndStatusResponse))
		soap_mark_condorSchedd__Base64DataAndStatusResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__Base64DataAndStatusResponse(struct soap *soap, const struct condorSchedd__Base64DataAndStatusResponse *a)
{
	soap_embedded(soap, &a->response, SOAP_TYPE_condorSchedd__Base64DataAndStatus);
	soap_mark_condorSchedd__Base64DataAndStatus(soap, &a->response);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__Base64DataAndStatusResponse(struct soap *soap, struct condorSchedd__Base64DataAndStatusResponse *a)
{
	soap_default_condorSchedd__Base64DataAndStatus(soap, &a->response);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__Base64DataAndStatusResponse(struct soap *soap, struct condorSchedd__Base64DataAndStatusResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__Base64DataAndStatusResponse);
	soap_out_condorSchedd__Base64DataAndStatusResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__Base64DataAndStatusResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__Base64DataAndStatusResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__Base64DataAndStatusResponse), type);
	soap_element_result(soap, "response");
	soap_out_condorSchedd__Base64DataAndStatus(soap, "response", -1, &a->response, "condorSchedd:Base64DataAndStatus");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__Base64DataAndStatusResponse * SOAP_FMAC4 soap_get_condorSchedd__Base64DataAndStatusResponse(struct soap *soap, struct condorSchedd__Base64DataAndStatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__Base64DataAndStatusResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__Base64DataAndStatusResponse * SOAP_FMAC4 soap_in_condorSchedd__Base64DataAndStatusResponse(struct soap *soap, const char *tag, struct condorSchedd__Base64DataAndStatusResponse *a, const char *type)
{
	short soap_flag_response = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__Base64DataAndStatusResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__Base64DataAndStatusResponse, sizeof(struct condorSchedd__Base64DataAndStatusResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__Base64DataAndStatusResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Base64DataAndStatus(soap, "response", &a->response, "condorSchedd:Base64DataAndStatus"))
				{	soap_flag_response = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__Base64DataAndStatusResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__Base64DataAndStatusResponse, sizeof(struct condorSchedd__Base64DataAndStatusResponse), 0), SOAP_TYPE_condorSchedd__Base64DataAndStatusResponse, sizeof(struct condorSchedd__Base64DataAndStatusResponse));
		if (soap->alloced)
			soap_default_condorSchedd__Base64DataAndStatusResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__ClassAdStructAndStatusResponse(struct soap *soap, struct condorSchedd__ClassAdStructAndStatusResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__ClassAdStructAndStatusResponse))
		soap_mark_condorSchedd__ClassAdStructAndStatusResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__ClassAdStructAndStatusResponse(struct soap *soap, const struct condorSchedd__ClassAdStructAndStatusResponse *a)
{
	soap_embedded(soap, &a->response, SOAP_TYPE_condorCore__ClassAdStructAndStatus);
	soap_mark_condorCore__ClassAdStructAndStatus(soap, &a->response);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__ClassAdStructAndStatusResponse(struct soap *soap, struct condorSchedd__ClassAdStructAndStatusResponse *a)
{
	soap_default_condorCore__ClassAdStructAndStatus(soap, &a->response);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__ClassAdStructAndStatusResponse(struct soap *soap, struct condorSchedd__ClassAdStructAndStatusResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__ClassAdStructAndStatusResponse);
	soap_out_condorSchedd__ClassAdStructAndStatusResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__ClassAdStructAndStatusResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__ClassAdStructAndStatusResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__ClassAdStructAndStatusResponse), type);
	soap_element_result(soap, "response");
	soap_out_condorCore__ClassAdStructAndStatus(soap, "response", -1, &a->response, "condorCore:ClassAdStructAndStatus");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__ClassAdStructAndStatusResponse * SOAP_FMAC4 soap_get_condorSchedd__ClassAdStructAndStatusResponse(struct soap *soap, struct condorSchedd__ClassAdStructAndStatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__ClassAdStructAndStatusResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__ClassAdStructAndStatusResponse * SOAP_FMAC4 soap_in_condorSchedd__ClassAdStructAndStatusResponse(struct soap *soap, const char *tag, struct condorSchedd__ClassAdStructAndStatusResponse *a, const char *type)
{
	short soap_flag_response = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__ClassAdStructAndStatusResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__ClassAdStructAndStatusResponse, sizeof(struct condorSchedd__ClassAdStructAndStatusResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__ClassAdStructAndStatusResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorCore__ClassAdStructAndStatus(soap, "response", &a->response, "condorCore:ClassAdStructAndStatus"))
				{	soap_flag_response = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__ClassAdStructAndStatusResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__ClassAdStructAndStatusResponse, sizeof(struct condorSchedd__ClassAdStructAndStatusResponse), 0), SOAP_TYPE_condorSchedd__ClassAdStructAndStatusResponse, sizeof(struct condorSchedd__ClassAdStructAndStatusResponse));
		if (soap->alloced)
			soap_default_condorSchedd__ClassAdStructAndStatusResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__ClassAdStructArrayAndStatusResponse(struct soap *soap, struct condorSchedd__ClassAdStructArrayAndStatusResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__ClassAdStructArrayAndStatusResponse))
		soap_mark_condorSchedd__ClassAdStructArrayAndStatusResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__ClassAdStructArrayAndStatusResponse(struct soap *soap, const struct condorSchedd__ClassAdStructArrayAndStatusResponse *a)
{
	soap_embedded(soap, &a->response, SOAP_TYPE_condorCore__ClassAdStructArrayAndStatus);
	soap_mark_condorCore__ClassAdStructArrayAndStatus(soap, &a->response);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__ClassAdStructArrayAndStatusResponse(struct soap *soap, struct condorSchedd__ClassAdStructArrayAndStatusResponse *a)
{
	soap_default_condorCore__ClassAdStructArrayAndStatus(soap, &a->response);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__ClassAdStructArrayAndStatusResponse(struct soap *soap, struct condorSchedd__ClassAdStructArrayAndStatusResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__ClassAdStructArrayAndStatusResponse);
	soap_out_condorSchedd__ClassAdStructArrayAndStatusResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__ClassAdStructArrayAndStatusResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__ClassAdStructArrayAndStatusResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__ClassAdStructArrayAndStatusResponse), type);
	soap_element_result(soap, "response");
	soap_out_condorCore__ClassAdStructArrayAndStatus(soap, "response", -1, &a->response, "condorCore:ClassAdStructArrayAndStatus");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__ClassAdStructArrayAndStatusResponse * SOAP_FMAC4 soap_get_condorSchedd__ClassAdStructArrayAndStatusResponse(struct soap *soap, struct condorSchedd__ClassAdStructArrayAndStatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__ClassAdStructArrayAndStatusResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__ClassAdStructArrayAndStatusResponse * SOAP_FMAC4 soap_in_condorSchedd__ClassAdStructArrayAndStatusResponse(struct soap *soap, const char *tag, struct condorSchedd__ClassAdStructArrayAndStatusResponse *a, const char *type)
{
	short soap_flag_response = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__ClassAdStructArrayAndStatusResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__ClassAdStructArrayAndStatusResponse, sizeof(struct condorSchedd__ClassAdStructArrayAndStatusResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__ClassAdStructArrayAndStatusResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorCore__ClassAdStructArrayAndStatus(soap, "response", &a->response, "condorCore:ClassAdStructArrayAndStatus"))
				{	soap_flag_response = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__ClassAdStructArrayAndStatusResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__ClassAdStructArrayAndStatusResponse, sizeof(struct condorSchedd__ClassAdStructArrayAndStatusResponse), 0), SOAP_TYPE_condorSchedd__ClassAdStructArrayAndStatusResponse, sizeof(struct condorSchedd__ClassAdStructArrayAndStatusResponse));
		if (soap->alloced)
			soap_default_condorSchedd__ClassAdStructArrayAndStatusResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__RequirementsAndStatusResponse(struct soap *soap, struct condorSchedd__RequirementsAndStatusResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__RequirementsAndStatusResponse))
		soap_mark_condorSchedd__RequirementsAndStatusResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__RequirementsAndStatusResponse(struct soap *soap, const struct condorSchedd__RequirementsAndStatusResponse *a)
{
	soap_embedded(soap, &a->response, SOAP_TYPE_condorSchedd__RequirementsAndStatus);
	soap_mark_condorSchedd__RequirementsAndStatus(soap, &a->response);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__RequirementsAndStatusResponse(struct soap *soap, struct condorSchedd__RequirementsAndStatusResponse *a)
{
	soap_default_condorSchedd__RequirementsAndStatus(soap, &a->response);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__RequirementsAndStatusResponse(struct soap *soap, struct condorSchedd__RequirementsAndStatusResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__RequirementsAndStatusResponse);
	soap_out_condorSchedd__RequirementsAndStatusResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__RequirementsAndStatusResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__RequirementsAndStatusResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__RequirementsAndStatusResponse), type);
	soap_element_result(soap, "response");
	soap_out_condorSchedd__RequirementsAndStatus(soap, "response", -1, &a->response, "condorSchedd:RequirementsAndStatus");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__RequirementsAndStatusResponse * SOAP_FMAC4 soap_get_condorSchedd__RequirementsAndStatusResponse(struct soap *soap, struct condorSchedd__RequirementsAndStatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__RequirementsAndStatusResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__RequirementsAndStatusResponse * SOAP_FMAC4 soap_in_condorSchedd__RequirementsAndStatusResponse(struct soap *soap, const char *tag, struct condorSchedd__RequirementsAndStatusResponse *a, const char *type)
{
	short soap_flag_response = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__RequirementsAndStatusResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__RequirementsAndStatusResponse, sizeof(struct condorSchedd__RequirementsAndStatusResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__RequirementsAndStatusResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__RequirementsAndStatus(soap, "response", &a->response, "condorSchedd:RequirementsAndStatus"))
				{	soap_flag_response = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__RequirementsAndStatusResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__RequirementsAndStatusResponse, sizeof(struct condorSchedd__RequirementsAndStatusResponse), 0), SOAP_TYPE_condorSchedd__RequirementsAndStatusResponse, sizeof(struct condorSchedd__RequirementsAndStatusResponse));
		if (soap->alloced)
			soap_default_condorSchedd__RequirementsAndStatusResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__IntAndStatusResponse(struct soap *soap, struct condorSchedd__IntAndStatusResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__IntAndStatusResponse))
		soap_mark_condorSchedd__IntAndStatusResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__IntAndStatusResponse(struct soap *soap, const struct condorSchedd__IntAndStatusResponse *a)
{
	soap_embedded(soap, &a->response, SOAP_TYPE_condorSchedd__IntAndStatus);
	soap_mark_condorSchedd__IntAndStatus(soap, &a->response);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__IntAndStatusResponse(struct soap *soap, struct condorSchedd__IntAndStatusResponse *a)
{
	soap_default_condorSchedd__IntAndStatus(soap, &a->response);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__IntAndStatusResponse(struct soap *soap, struct condorSchedd__IntAndStatusResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__IntAndStatusResponse);
	soap_out_condorSchedd__IntAndStatusResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__IntAndStatusResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__IntAndStatusResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__IntAndStatusResponse), type);
	soap_element_result(soap, "response");
	soap_out_condorSchedd__IntAndStatus(soap, "response", -1, &a->response, "condorSchedd:IntAndStatus");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__IntAndStatusResponse * SOAP_FMAC4 soap_get_condorSchedd__IntAndStatusResponse(struct soap *soap, struct condorSchedd__IntAndStatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__IntAndStatusResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__IntAndStatusResponse * SOAP_FMAC4 soap_in_condorSchedd__IntAndStatusResponse(struct soap *soap, const char *tag, struct condorSchedd__IntAndStatusResponse *a, const char *type)
{
	short soap_flag_response = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__IntAndStatusResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__IntAndStatusResponse, sizeof(struct condorSchedd__IntAndStatusResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__IntAndStatusResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__IntAndStatus(soap, "response", &a->response, "condorSchedd:IntAndStatus"))
				{	soap_flag_response = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__IntAndStatusResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__IntAndStatusResponse, sizeof(struct condorSchedd__IntAndStatusResponse), 0), SOAP_TYPE_condorSchedd__IntAndStatusResponse, sizeof(struct condorSchedd__IntAndStatusResponse));
		if (soap->alloced)
			soap_default_condorSchedd__IntAndStatusResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__TransactionAndStatusResponse(struct soap *soap, struct condorSchedd__TransactionAndStatusResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__TransactionAndStatusResponse))
		soap_mark_condorSchedd__TransactionAndStatusResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__TransactionAndStatusResponse(struct soap *soap, const struct condorSchedd__TransactionAndStatusResponse *a)
{
	soap_embedded(soap, &a->response, SOAP_TYPE_condorSchedd__TransactionAndStatus);
	soap_mark_condorSchedd__TransactionAndStatus(soap, &a->response);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__TransactionAndStatusResponse(struct soap *soap, struct condorSchedd__TransactionAndStatusResponse *a)
{
	soap_default_condorSchedd__TransactionAndStatus(soap, &a->response);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__TransactionAndStatusResponse(struct soap *soap, struct condorSchedd__TransactionAndStatusResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__TransactionAndStatusResponse);
	soap_out_condorSchedd__TransactionAndStatusResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__TransactionAndStatusResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__TransactionAndStatusResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__TransactionAndStatusResponse), type);
	soap_element_result(soap, "response");
	soap_out_condorSchedd__TransactionAndStatus(soap, "response", -1, &a->response, "condorSchedd:TransactionAndStatus");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__TransactionAndStatusResponse * SOAP_FMAC4 soap_get_condorSchedd__TransactionAndStatusResponse(struct soap *soap, struct condorSchedd__TransactionAndStatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__TransactionAndStatusResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__TransactionAndStatusResponse * SOAP_FMAC4 soap_in_condorSchedd__TransactionAndStatusResponse(struct soap *soap, const char *tag, struct condorSchedd__TransactionAndStatusResponse *a, const char *type)
{
	short soap_flag_response = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__TransactionAndStatusResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__TransactionAndStatusResponse, sizeof(struct condorSchedd__TransactionAndStatusResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__TransactionAndStatusResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__TransactionAndStatus(soap, "response", &a->response, "condorSchedd:TransactionAndStatus"))
				{	soap_flag_response = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__TransactionAndStatusResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__TransactionAndStatusResponse, sizeof(struct condorSchedd__TransactionAndStatusResponse), 0), SOAP_TYPE_condorSchedd__TransactionAndStatusResponse, sizeof(struct condorSchedd__TransactionAndStatusResponse));
		if (soap->alloced)
			soap_default_condorSchedd__TransactionAndStatusResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__StatusResponse(struct soap *soap, struct condorSchedd__StatusResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__StatusResponse))
		soap_mark_condorSchedd__StatusResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__StatusResponse(struct soap *soap, const struct condorSchedd__StatusResponse *a)
{
	soap_embedded(soap, &a->response, SOAP_TYPE_condorCore__Status);
	soap_mark_condorCore__Status(soap, &a->response);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__StatusResponse(struct soap *soap, struct condorSchedd__StatusResponse *a)
{
	soap_default_condorCore__Status(soap, &a->response);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__StatusResponse(struct soap *soap, struct condorSchedd__StatusResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__StatusResponse);
	soap_out_condorSchedd__StatusResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__StatusResponse(struct soap *soap, const char *tag, int id, const struct condorSchedd__StatusResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__StatusResponse), type);
	soap_element_result(soap, "response");
	soap_out_condorCore__Status(soap, "response", -1, &a->response, "condorCore:Status");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__StatusResponse * SOAP_FMAC4 soap_get_condorSchedd__StatusResponse(struct soap *soap, struct condorSchedd__StatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__StatusResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__StatusResponse * SOAP_FMAC4 soap_in_condorSchedd__StatusResponse(struct soap *soap, const char *tag, struct condorSchedd__StatusResponse *a, const char *type)
{
	short soap_flag_response = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__StatusResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__StatusResponse, sizeof(struct condorSchedd__StatusResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__StatusResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorCore__Status(soap, "response", &a->response, "condorCore:Status"))
				{	soap_flag_response = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__StatusResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__StatusResponse, sizeof(struct condorSchedd__StatusResponse), 0), SOAP_TYPE_condorSchedd__StatusResponse, sizeof(struct condorSchedd__StatusResponse));
		if (soap->alloced)
			soap_default_condorSchedd__StatusResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__FileInfoArrayAndStatus(struct soap *soap, struct condorSchedd__FileInfoArrayAndStatus const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__FileInfoArrayAndStatus))
		soap_mark_condorSchedd__FileInfoArrayAndStatus(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__FileInfoArrayAndStatus(struct soap *soap, const struct condorSchedd__FileInfoArrayAndStatus *a)
{
	soap_embedded(soap, &a->status, SOAP_TYPE_condorCore__Status);
	soap_mark_condorCore__Status(soap, &a->status);
	soap_embedded(soap, &a->info, SOAP_TYPE_condorSchedd__FileInfoArray);
	soap_mark_condorSchedd__FileInfoArray(soap, &a->info);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__FileInfoArrayAndStatus(struct soap *soap, struct condorSchedd__FileInfoArrayAndStatus *a)
{
	soap_default_condorCore__Status(soap, &a->status);
	soap_default_condorSchedd__FileInfoArray(soap, &a->info);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__FileInfoArrayAndStatus(struct soap *soap, struct condorSchedd__FileInfoArrayAndStatus *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__FileInfoArrayAndStatus);
	soap_out_condorSchedd__FileInfoArrayAndStatus(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__FileInfoArrayAndStatus(struct soap *soap, const char *tag, int id, const struct condorSchedd__FileInfoArrayAndStatus *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__FileInfoArrayAndStatus), type);
	soap_out_condorCore__Status(soap, "status", -1, &a->status, "condorCore:Status");
	soap_out_condorSchedd__FileInfoArray(soap, "info", -1, &a->info, "condorSchedd:FileInfoArray");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__FileInfoArrayAndStatus * SOAP_FMAC4 soap_get_condorSchedd__FileInfoArrayAndStatus(struct soap *soap, struct condorSchedd__FileInfoArrayAndStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__FileInfoArrayAndStatus(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__FileInfoArrayAndStatus * SOAP_FMAC4 soap_in_condorSchedd__FileInfoArrayAndStatus(struct soap *soap, const char *tag, struct condorSchedd__FileInfoArrayAndStatus *a, const char *type)
{
	short soap_flag_status = 1, soap_flag_info = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__FileInfoArrayAndStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__FileInfoArrayAndStatus, sizeof(struct condorSchedd__FileInfoArrayAndStatus), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__FileInfoArrayAndStatus(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorCore__Status(soap, "status", &a->status, "condorCore:Status"))
				{	soap_flag_status = 0;
					continue;
				}
			if (soap_flag_info && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__FileInfoArray(soap, "info", &a->info, "condorSchedd:FileInfoArray"))
				{	soap_flag_info = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_status))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__FileInfoArrayAndStatus *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__FileInfoArrayAndStatus, sizeof(struct condorSchedd__FileInfoArrayAndStatus), 0), SOAP_TYPE_condorSchedd__FileInfoArrayAndStatus, sizeof(struct condorSchedd__FileInfoArrayAndStatus));
		if (soap->alloced)
			soap_default_condorSchedd__FileInfoArrayAndStatus(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__FileInfoArray(struct soap *soap, struct condorSchedd__FileInfoArray const*a)
{
	soap_mark_condorSchedd__FileInfoArray(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__FileInfoArray(struct soap *soap, struct condorSchedd__FileInfoArray const*a)
{
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, a->__size, SOAP_TYPE_condorSchedd__FileInfoArray))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_condorSchedd__FileInfo);
			soap_mark_condorSchedd__FileInfo(soap, a->__ptr + i);
		}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__FileInfoArray(struct soap *soap, struct condorSchedd__FileInfoArray *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__FileInfoArray(struct soap *soap, struct condorSchedd__FileInfoArray *a, const char *tag, const char *type)
{
	int i = soap_embed_array(soap, (void*)a, (struct soap_array*)&a->__ptr, a->__size, tag, SOAP_TYPE_condorSchedd__FileInfoArray);
	soap_out_condorSchedd__FileInfoArray(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__FileInfoArray(struct soap *soap, const char *tag, int id, const struct condorSchedd__FileInfoArray *a, const char *type)
{
	int i;
	struct soap_plist *pp;
	int n = a->__size;
	i = soap_array_pointer_lookup(soap, a, (struct soap_array*)&a->__ptr, n, SOAP_TYPE_condorSchedd__FileInfoArray, &pp);
	if (!a->__ptr)
	{	soap_element_null(soap, tag, i, type);
		return SOAP_OK;
	}
	if (id <= 0 && i)
	{	if (soap_is_embedded(soap, pp))
		{	soap_element_ref(soap, tag, 0, i);
			return SOAP_OK;
		}
		if (soap_is_single(soap, pp))
			i = 0;
	}
	else if (id > 0)
		i = id;
	soap_element_begin_out(soap, tag, i, "condorSchedd:FileInfoArray");
	if (i)
		soap_set_embedded(soap, pp);
	for (i = 0; i < n; i++)
	{
		soap_out_condorSchedd__FileInfo(soap, "item", 0, &a->__ptr[i], "condorSchedd:FileInfo");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__FileInfoArray * SOAP_FMAC4 soap_get_condorSchedd__FileInfoArray(struct soap *soap, struct condorSchedd__FileInfoArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__FileInfoArray(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__FileInfoArray * SOAP_FMAC4 soap_in_condorSchedd__FileInfoArray(struct soap *soap, const char *tag, struct condorSchedd__FileInfoArray *a, const char *type)
{	int i, j;
	struct condorSchedd__FileInfo *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if ((a = (struct condorSchedd__FileInfoArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__FileInfoArray, sizeof(struct condorSchedd__FileInfoArray), 0)))
			soap_default_condorSchedd__FileInfoArray(soap, a);
			if (soap->body && soap_element_end_in(soap, tag))
				return NULL;
	}
	else if (!*soap->href)
	{	if (!(a = (struct condorSchedd__FileInfoArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__FileInfoArray, sizeof(struct condorSchedd__FileInfoArray), 0)))
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__FileInfoArray(soap, a);
		if (soap->body)
		{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (struct condorSchedd__FileInfo *)soap_malloc(soap, sizeof(struct condorSchedd__FileInfo) * a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_condorSchedd__FileInfo(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
					return NULL;
					}
				}
				if (!soap_in_condorSchedd__FileInfo(soap, NULL, a->__ptr + i, "condorSchedd:FileInfo"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (struct condorSchedd__FileInfo *)soap_push_block(soap, sizeof(struct condorSchedd__FileInfo));
				if (!p)
					return NULL;
				soap_default_condorSchedd__FileInfo(soap, p);
				if (!soap_in_condorSchedd__FileInfo(soap, NULL, p, "condorSchedd:FileInfo"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
			soap_pop_block(soap);
			a->__ptr = (struct condorSchedd__FileInfo *)soap_malloc(soap, soap->blist->size);
			soap_store_block(soap, (char*)a->__ptr);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__FileInfoArray *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__FileInfoArray, sizeof(struct condorSchedd__FileInfoArray), 0), SOAP_TYPE_condorSchedd__FileInfoArray, sizeof(struct condorSchedd__FileInfoArray));
		if (soap->alloced)
			soap_default_condorSchedd__FileInfoArray(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__FileInfo(struct soap *soap, struct condorSchedd__FileInfo const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__FileInfo))
		soap_mark_condorSchedd__FileInfo(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__FileInfo(struct soap *soap, const struct condorSchedd__FileInfo *a)
{
	soap_embedded(soap, &a->name, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->name);
	soap_embedded(soap, &a->size, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__FileInfo(struct soap *soap, struct condorSchedd__FileInfo *a)
{
	soap_default_xsd__string(soap, &a->name);
	soap_default_xsd__long(soap, &a->size);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__FileInfo(struct soap *soap, struct condorSchedd__FileInfo *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__FileInfo);
	soap_out_condorSchedd__FileInfo(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__FileInfo(struct soap *soap, const char *tag, int id, const struct condorSchedd__FileInfo *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__FileInfo), type);
	soap_out_xsd__string(soap, "name", -1, &a->name, "xsd:string");
	soap_out_xsd__long(soap, "size", -1, &a->size, "xsd:long");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__FileInfo * SOAP_FMAC4 soap_get_condorSchedd__FileInfo(struct soap *soap, struct condorSchedd__FileInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__FileInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__FileInfo * SOAP_FMAC4 soap_in_condorSchedd__FileInfo(struct soap *soap, const char *tag, struct condorSchedd__FileInfo *a, const char *type)
{
	short soap_flag_name = 1, soap_flag_size = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__FileInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__FileInfo, sizeof(struct condorSchedd__FileInfo), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__FileInfo(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name = 0;
					continue;
				}
			if (soap_flag_size && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__long(soap, "size", &a->size, "xsd:long"))
				{	soap_flag_size = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_name || soap_flag_size))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__FileInfo *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__FileInfo, sizeof(struct condorSchedd__FileInfo), 0), SOAP_TYPE_condorSchedd__FileInfo, sizeof(struct condorSchedd__FileInfo));
		if (soap->alloced)
			soap_default_condorSchedd__FileInfo(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__Base64DataAndStatus(struct soap *soap, struct condorSchedd__Base64DataAndStatus const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__Base64DataAndStatus))
		soap_mark_condorSchedd__Base64DataAndStatus(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__Base64DataAndStatus(struct soap *soap, const struct condorSchedd__Base64DataAndStatus *a)
{
	soap_embedded(soap, &a->status, SOAP_TYPE_condorCore__Status);
	soap_mark_condorCore__Status(soap, &a->status);
	soap_embedded(soap, &a->data, SOAP_TYPE_xsd__base64Binary);
	soap_mark_xsd__base64Binary(soap, &a->data);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__Base64DataAndStatus(struct soap *soap, struct condorSchedd__Base64DataAndStatus *a)
{
	soap_default_condorCore__Status(soap, &a->status);
	soap_default_xsd__base64Binary(soap, &a->data);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__Base64DataAndStatus(struct soap *soap, struct condorSchedd__Base64DataAndStatus *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__Base64DataAndStatus);
	soap_out_condorSchedd__Base64DataAndStatus(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__Base64DataAndStatus(struct soap *soap, const char *tag, int id, const struct condorSchedd__Base64DataAndStatus *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__Base64DataAndStatus), type);
	soap_out_condorCore__Status(soap, "status", -1, &a->status, "condorCore:Status");
	soap_out_xsd__base64Binary(soap, "data", -1, &a->data, "xsd:base64Binary");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__Base64DataAndStatus * SOAP_FMAC4 soap_get_condorSchedd__Base64DataAndStatus(struct soap *soap, struct condorSchedd__Base64DataAndStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__Base64DataAndStatus(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__Base64DataAndStatus * SOAP_FMAC4 soap_in_condorSchedd__Base64DataAndStatus(struct soap *soap, const char *tag, struct condorSchedd__Base64DataAndStatus *a, const char *type)
{
	short soap_flag_status = 1, soap_flag_data = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__Base64DataAndStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__Base64DataAndStatus, sizeof(struct condorSchedd__Base64DataAndStatus), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__Base64DataAndStatus(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorCore__Status(soap, "status", &a->status, "condorCore:Status"))
				{	soap_flag_status = 0;
					continue;
				}
			if (soap_flag_data && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__base64Binary(soap, "data", &a->data, "xsd:base64Binary"))
				{	soap_flag_data = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_status))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__Base64DataAndStatus *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__Base64DataAndStatus, sizeof(struct condorSchedd__Base64DataAndStatus), 0), SOAP_TYPE_condorSchedd__Base64DataAndStatus, sizeof(struct condorSchedd__Base64DataAndStatus));
		if (soap->alloced)
			soap_default_condorSchedd__Base64DataAndStatus(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__IntAndStatus(struct soap *soap, struct condorSchedd__IntAndStatus const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__IntAndStatus))
		soap_mark_condorSchedd__IntAndStatus(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__IntAndStatus(struct soap *soap, const struct condorSchedd__IntAndStatus *a)
{
	soap_embedded(soap, &a->status, SOAP_TYPE_condorCore__Status);
	soap_mark_condorCore__Status(soap, &a->status);
	soap_embedded(soap, &a->integer, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__IntAndStatus(struct soap *soap, struct condorSchedd__IntAndStatus *a)
{
	soap_default_condorCore__Status(soap, &a->status);
	soap_default_xsd__int(soap, &a->integer);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__IntAndStatus(struct soap *soap, struct condorSchedd__IntAndStatus *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__IntAndStatus);
	soap_out_condorSchedd__IntAndStatus(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__IntAndStatus(struct soap *soap, const char *tag, int id, const struct condorSchedd__IntAndStatus *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__IntAndStatus), type);
	soap_out_condorCore__Status(soap, "status", -1, &a->status, "condorCore:Status");
	soap_out_xsd__int(soap, "integer", -1, &a->integer, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__IntAndStatus * SOAP_FMAC4 soap_get_condorSchedd__IntAndStatus(struct soap *soap, struct condorSchedd__IntAndStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__IntAndStatus(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__IntAndStatus * SOAP_FMAC4 soap_in_condorSchedd__IntAndStatus(struct soap *soap, const char *tag, struct condorSchedd__IntAndStatus *a, const char *type)
{
	short soap_flag_status = 1, soap_flag_integer = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__IntAndStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__IntAndStatus, sizeof(struct condorSchedd__IntAndStatus), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__IntAndStatus(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorCore__Status(soap, "status", &a->status, "condorCore:Status"))
				{	soap_flag_status = 0;
					continue;
				}
			if (soap_flag_integer && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "integer", &a->integer, "xsd:int"))
				{	soap_flag_integer = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_status))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__IntAndStatus *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__IntAndStatus, sizeof(struct condorSchedd__IntAndStatus), 0), SOAP_TYPE_condorSchedd__IntAndStatus, sizeof(struct condorSchedd__IntAndStatus));
		if (soap->alloced)
			soap_default_condorSchedd__IntAndStatus(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__TransactionAndStatus(struct soap *soap, struct condorSchedd__TransactionAndStatus const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__TransactionAndStatus))
		soap_mark_condorSchedd__TransactionAndStatus(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__TransactionAndStatus(struct soap *soap, const struct condorSchedd__TransactionAndStatus *a)
{
	soap_embedded(soap, &a->status, SOAP_TYPE_condorCore__Status);
	soap_mark_condorCore__Status(soap, &a->status);
	soap_embedded(soap, &a->transaction, SOAP_TYPE_condorSchedd__Transaction);
	soap_mark_condorSchedd__Transaction(soap, &a->transaction);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__TransactionAndStatus(struct soap *soap, struct condorSchedd__TransactionAndStatus *a)
{
	soap_default_condorCore__Status(soap, &a->status);
	soap_default_condorSchedd__Transaction(soap, &a->transaction);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__TransactionAndStatus(struct soap *soap, struct condorSchedd__TransactionAndStatus *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__TransactionAndStatus);
	soap_out_condorSchedd__TransactionAndStatus(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__TransactionAndStatus(struct soap *soap, const char *tag, int id, const struct condorSchedd__TransactionAndStatus *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__TransactionAndStatus), type);
	soap_out_condorCore__Status(soap, "status", -1, &a->status, "condorCore:Status");
	soap_out_condorSchedd__Transaction(soap, "transaction", -1, &a->transaction, "condorSchedd:Transaction");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__TransactionAndStatus * SOAP_FMAC4 soap_get_condorSchedd__TransactionAndStatus(struct soap *soap, struct condorSchedd__TransactionAndStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__TransactionAndStatus(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__TransactionAndStatus * SOAP_FMAC4 soap_in_condorSchedd__TransactionAndStatus(struct soap *soap, const char *tag, struct condorSchedd__TransactionAndStatus *a, const char *type)
{
	short soap_flag_status = 1, soap_flag_transaction = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__TransactionAndStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__TransactionAndStatus, sizeof(struct condorSchedd__TransactionAndStatus), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__TransactionAndStatus(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorCore__Status(soap, "status", &a->status, "condorCore:Status"))
				{	soap_flag_status = 0;
					continue;
				}
			if (soap_flag_transaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Transaction(soap, "transaction", &a->transaction, "condorSchedd:Transaction"))
				{	soap_flag_transaction = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_status))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__TransactionAndStatus *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__TransactionAndStatus, sizeof(struct condorSchedd__TransactionAndStatus), 0), SOAP_TYPE_condorSchedd__TransactionAndStatus, sizeof(struct condorSchedd__TransactionAndStatus));
		if (soap->alloced)
			soap_default_condorSchedd__TransactionAndStatus(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__RequirementsAndStatus(struct soap *soap, struct condorSchedd__RequirementsAndStatus const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__RequirementsAndStatus))
		soap_mark_condorSchedd__RequirementsAndStatus(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__RequirementsAndStatus(struct soap *soap, const struct condorSchedd__RequirementsAndStatus *a)
{
	soap_embedded(soap, &a->status, SOAP_TYPE_condorCore__Status);
	soap_mark_condorCore__Status(soap, &a->status);
	soap_embedded(soap, &a->requirements, SOAP_TYPE_condorSchedd__Requirements);
	soap_mark_condorSchedd__Requirements(soap, &a->requirements);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__RequirementsAndStatus(struct soap *soap, struct condorSchedd__RequirementsAndStatus *a)
{
	soap_default_condorCore__Status(soap, &a->status);
	soap_default_condorSchedd__Requirements(soap, &a->requirements);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__RequirementsAndStatus(struct soap *soap, struct condorSchedd__RequirementsAndStatus *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__RequirementsAndStatus);
	soap_out_condorSchedd__RequirementsAndStatus(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__RequirementsAndStatus(struct soap *soap, const char *tag, int id, const struct condorSchedd__RequirementsAndStatus *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__RequirementsAndStatus), type);
	soap_out_condorCore__Status(soap, "status", -1, &a->status, "condorCore:Status");
	soap_out_condorSchedd__Requirements(soap, "requirements", -1, &a->requirements, "condorSchedd:Requirements");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__RequirementsAndStatus * SOAP_FMAC4 soap_get_condorSchedd__RequirementsAndStatus(struct soap *soap, struct condorSchedd__RequirementsAndStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__RequirementsAndStatus(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__RequirementsAndStatus * SOAP_FMAC4 soap_in_condorSchedd__RequirementsAndStatus(struct soap *soap, const char *tag, struct condorSchedd__RequirementsAndStatus *a, const char *type)
{
	short soap_flag_status = 1, soap_flag_requirements = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__RequirementsAndStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__RequirementsAndStatus, sizeof(struct condorSchedd__RequirementsAndStatus), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__RequirementsAndStatus(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorCore__Status(soap, "status", &a->status, "condorCore:Status"))
				{	soap_flag_status = 0;
					continue;
				}
			if (soap_flag_requirements && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorSchedd__Requirements(soap, "requirements", &a->requirements, "condorSchedd:Requirements"))
				{	soap_flag_requirements = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_status))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__RequirementsAndStatus *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__RequirementsAndStatus, sizeof(struct condorSchedd__RequirementsAndStatus), 0), SOAP_TYPE_condorSchedd__RequirementsAndStatus, sizeof(struct condorSchedd__RequirementsAndStatus));
		if (soap->alloced)
			soap_default_condorSchedd__RequirementsAndStatus(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__Requirements(struct soap *soap, struct condorSchedd__Requirements const*a)
{
	soap_mark_condorSchedd__Requirements(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__Requirements(struct soap *soap, struct condorSchedd__Requirements const*a)
{
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, a->__size, SOAP_TYPE_condorSchedd__Requirements))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_condorSchedd__Requirement);
			soap_mark_condorSchedd__Requirement(soap, a->__ptr + i);
		}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__Requirements(struct soap *soap, struct condorSchedd__Requirements *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__Requirements(struct soap *soap, struct condorSchedd__Requirements *a, const char *tag, const char *type)
{
	int i = soap_embed_array(soap, (void*)a, (struct soap_array*)&a->__ptr, a->__size, tag, SOAP_TYPE_condorSchedd__Requirements);
	soap_out_condorSchedd__Requirements(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__Requirements(struct soap *soap, const char *tag, int id, const struct condorSchedd__Requirements *a, const char *type)
{
	int i;
	struct soap_plist *pp;
	int n = a->__size;
	i = soap_array_pointer_lookup(soap, a, (struct soap_array*)&a->__ptr, n, SOAP_TYPE_condorSchedd__Requirements, &pp);
	if (!a->__ptr)
	{	soap_element_null(soap, tag, i, type);
		return SOAP_OK;
	}
	if (id <= 0 && i)
	{	if (soap_is_embedded(soap, pp))
		{	soap_element_ref(soap, tag, 0, i);
			return SOAP_OK;
		}
		if (soap_is_single(soap, pp))
			i = 0;
	}
	else if (id > 0)
		i = id;
	soap_element_begin_out(soap, tag, i, "condorSchedd:Requirements");
	if (i)
		soap_set_embedded(soap, pp);
	for (i = 0; i < n; i++)
	{
		soap_out_condorSchedd__Requirement(soap, "item", 0, &a->__ptr[i], "condorSchedd:Requirement");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__Requirements * SOAP_FMAC4 soap_get_condorSchedd__Requirements(struct soap *soap, struct condorSchedd__Requirements *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__Requirements(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__Requirements * SOAP_FMAC4 soap_in_condorSchedd__Requirements(struct soap *soap, const char *tag, struct condorSchedd__Requirements *a, const char *type)
{	int i, j;
	char **p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if ((a = (struct condorSchedd__Requirements *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__Requirements, sizeof(struct condorSchedd__Requirements), 0)))
			soap_default_condorSchedd__Requirements(soap, a);
			if (soap->body && soap_element_end_in(soap, tag))
				return NULL;
	}
	else if (!*soap->href)
	{	if (!(a = (struct condorSchedd__Requirements *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__Requirements, sizeof(struct condorSchedd__Requirements), 0)))
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__Requirements(soap, a);
		if (soap->body)
		{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (char **)soap_malloc(soap, sizeof(char *) * a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_condorSchedd__Requirement(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
					return NULL;
					}
				}
				if (!soap_in_condorSchedd__Requirement(soap, NULL, a->__ptr + i, "condorSchedd:Requirement"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (char **)soap_push_block(soap, sizeof(char *));
				if (!p)
					return NULL;
				soap_default_condorSchedd__Requirement(soap, p);
				if (!soap_in_condorSchedd__Requirement(soap, NULL, p, "condorSchedd:Requirement"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
			soap_pop_block(soap);
			a->__ptr = (char **)soap_malloc(soap, soap->blist->size);
			soap_store_block(soap, (char*)a->__ptr);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__Requirements *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__Requirements, sizeof(struct condorSchedd__Requirements), 0), SOAP_TYPE_condorSchedd__Requirements, sizeof(struct condorSchedd__Requirements));
		if (soap->alloced)
			soap_default_condorSchedd__Requirements(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__Transaction(struct soap *soap, struct condorSchedd__Transaction const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorSchedd__Transaction))
		soap_mark_condorSchedd__Transaction(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__Transaction(struct soap *soap, const struct condorSchedd__Transaction *a)
{
	soap_embedded(soap, &a->id, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->duration, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__Transaction(struct soap *soap, struct condorSchedd__Transaction *a)
{
	soap_default_xsd__int(soap, &a->id);
	soap_default_xsd__int(soap, &a->duration);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__Transaction(struct soap *soap, struct condorSchedd__Transaction *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__Transaction);
	soap_out_condorSchedd__Transaction(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__Transaction(struct soap *soap, const char *tag, int id, const struct condorSchedd__Transaction *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorSchedd__Transaction), type);
	soap_out_xsd__int(soap, "id", -1, &a->id, "xsd:int");
	soap_out_xsd__int(soap, "duration", -1, &a->duration, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorSchedd__Transaction * SOAP_FMAC4 soap_get_condorSchedd__Transaction(struct soap *soap, struct condorSchedd__Transaction *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__Transaction(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__Transaction * SOAP_FMAC4 soap_in_condorSchedd__Transaction(struct soap *soap, const char *tag, struct condorSchedd__Transaction *a, const char *type)
{
	short soap_flag_id = 1, soap_flag_duration = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorSchedd__Transaction *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__Transaction, sizeof(struct condorSchedd__Transaction), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorSchedd__Transaction(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "id", &a->id, "xsd:int"))
				{	soap_flag_id = 0;
					continue;
				}
			if (soap_flag_duration && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "duration", &a->duration, "xsd:int"))
				{	soap_flag_duration = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id || soap_flag_duration))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorSchedd__Transaction *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorSchedd__Transaction, sizeof(struct condorSchedd__Transaction), 0), SOAP_TYPE_condorSchedd__Transaction, sizeof(struct condorSchedd__Transaction));
		if (soap->alloced)
			soap_default_condorSchedd__Transaction(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__StringAndStatus(struct soap *soap, struct condorCore__StringAndStatus const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorCore__StringAndStatus))
		soap_mark_condorCore__StringAndStatus(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorCore__StringAndStatus(struct soap *soap, const struct condorCore__StringAndStatus *a)
{
	soap_embedded(soap, &a->status, SOAP_TYPE_condorCore__Status);
	soap_mark_condorCore__Status(soap, &a->status);
	soap_embedded(soap, &a->message, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->message);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__StringAndStatus(struct soap *soap, struct condorCore__StringAndStatus *a)
{
	soap_default_condorCore__Status(soap, &a->status);
	soap_default_xsd__string(soap, &a->message);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__StringAndStatus(struct soap *soap, struct condorCore__StringAndStatus *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__StringAndStatus);
	soap_out_condorCore__StringAndStatus(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__StringAndStatus(struct soap *soap, const char *tag, int id, const struct condorCore__StringAndStatus *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__StringAndStatus), type);
	soap_out_condorCore__Status(soap, "status", -1, &a->status, "condorCore:Status");
	soap_out_xsd__string(soap, "message", -1, &a->message, "xsd:string");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorCore__StringAndStatus * SOAP_FMAC4 soap_get_condorCore__StringAndStatus(struct soap *soap, struct condorCore__StringAndStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__StringAndStatus(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__StringAndStatus * SOAP_FMAC4 soap_in_condorCore__StringAndStatus(struct soap *soap, const char *tag, struct condorCore__StringAndStatus *a, const char *type)
{
	short soap_flag_status = 1, soap_flag_message = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorCore__StringAndStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__StringAndStatus, sizeof(struct condorCore__StringAndStatus), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorCore__StringAndStatus(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorCore__Status(soap, "status", &a->status, "condorCore:Status"))
				{	soap_flag_status = 0;
					continue;
				}
			if (soap_flag_message && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "message", &a->message, "xsd:string"))
				{	soap_flag_message = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_status))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorCore__StringAndStatus *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__StringAndStatus, sizeof(struct condorCore__StringAndStatus), 0), SOAP_TYPE_condorCore__StringAndStatus, sizeof(struct condorCore__StringAndStatus));
		if (soap->alloced)
			soap_default_condorCore__StringAndStatus(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__ClassAdStructArrayAndStatus(struct soap *soap, struct condorCore__ClassAdStructArrayAndStatus const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorCore__ClassAdStructArrayAndStatus))
		soap_mark_condorCore__ClassAdStructArrayAndStatus(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorCore__ClassAdStructArrayAndStatus(struct soap *soap, const struct condorCore__ClassAdStructArrayAndStatus *a)
{
	soap_embedded(soap, &a->status, SOAP_TYPE_condorCore__Status);
	soap_mark_condorCore__Status(soap, &a->status);
	soap_embedded(soap, &a->classAdArray, SOAP_TYPE_ClassAdStructArray);
	soap_mark_ClassAdStructArray(soap, &a->classAdArray);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__ClassAdStructArrayAndStatus(struct soap *soap, struct condorCore__ClassAdStructArrayAndStatus *a)
{
	soap_default_condorCore__Status(soap, &a->status);
	soap_default_ClassAdStructArray(soap, &a->classAdArray);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__ClassAdStructArrayAndStatus(struct soap *soap, struct condorCore__ClassAdStructArrayAndStatus *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__ClassAdStructArrayAndStatus);
	soap_out_condorCore__ClassAdStructArrayAndStatus(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__ClassAdStructArrayAndStatus(struct soap *soap, const char *tag, int id, const struct condorCore__ClassAdStructArrayAndStatus *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__ClassAdStructArrayAndStatus), type);
	soap_out_condorCore__Status(soap, "status", -1, &a->status, "condorCore:Status");
	soap_out_ClassAdStructArray(soap, "classAdArray", -1, &a->classAdArray, "condorCore:ClassAdStructAttr[]");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorCore__ClassAdStructArrayAndStatus * SOAP_FMAC4 soap_get_condorCore__ClassAdStructArrayAndStatus(struct soap *soap, struct condorCore__ClassAdStructArrayAndStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__ClassAdStructArrayAndStatus(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__ClassAdStructArrayAndStatus * SOAP_FMAC4 soap_in_condorCore__ClassAdStructArrayAndStatus(struct soap *soap, const char *tag, struct condorCore__ClassAdStructArrayAndStatus *a, const char *type)
{
	short soap_flag_status = 1, soap_flag_classAdArray = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorCore__ClassAdStructArrayAndStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__ClassAdStructArrayAndStatus, sizeof(struct condorCore__ClassAdStructArrayAndStatus), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorCore__ClassAdStructArrayAndStatus(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorCore__Status(soap, "status", &a->status, "condorCore:Status"))
				{	soap_flag_status = 0;
					continue;
				}
			if (soap_flag_classAdArray && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ClassAdStructArray(soap, "classAdArray", &a->classAdArray, "condorCore:ClassAdStructAttr[]"))
				{	soap_flag_classAdArray = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_status))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorCore__ClassAdStructArrayAndStatus *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__ClassAdStructArrayAndStatus, sizeof(struct condorCore__ClassAdStructArrayAndStatus), 0), SOAP_TYPE_condorCore__ClassAdStructArrayAndStatus, sizeof(struct condorCore__ClassAdStructArrayAndStatus));
		if (soap->alloced)
			soap_default_condorCore__ClassAdStructArrayAndStatus(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__ClassAdStructAndStatus(struct soap *soap, struct condorCore__ClassAdStructAndStatus const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorCore__ClassAdStructAndStatus))
		soap_mark_condorCore__ClassAdStructAndStatus(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorCore__ClassAdStructAndStatus(struct soap *soap, const struct condorCore__ClassAdStructAndStatus *a)
{
	soap_embedded(soap, &a->status, SOAP_TYPE_condorCore__Status);
	soap_mark_condorCore__Status(soap, &a->status);
	soap_embedded(soap, &a->classAd, SOAP_TYPE_ClassAdStruct);
	soap_mark_ClassAdStruct(soap, &a->classAd);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__ClassAdStructAndStatus(struct soap *soap, struct condorCore__ClassAdStructAndStatus *a)
{
	soap_default_condorCore__Status(soap, &a->status);
	soap_default_ClassAdStruct(soap, &a->classAd);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__ClassAdStructAndStatus(struct soap *soap, struct condorCore__ClassAdStructAndStatus *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__ClassAdStructAndStatus);
	soap_out_condorCore__ClassAdStructAndStatus(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__ClassAdStructAndStatus(struct soap *soap, const char *tag, int id, const struct condorCore__ClassAdStructAndStatus *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__ClassAdStructAndStatus), type);
	soap_out_condorCore__Status(soap, "status", -1, &a->status, "condorCore:Status");
	soap_out_ClassAdStruct(soap, "classAd", -1, &a->classAd, "condorCore:ClassAdStructAttr");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorCore__ClassAdStructAndStatus * SOAP_FMAC4 soap_get_condorCore__ClassAdStructAndStatus(struct soap *soap, struct condorCore__ClassAdStructAndStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__ClassAdStructAndStatus(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__ClassAdStructAndStatus * SOAP_FMAC4 soap_in_condorCore__ClassAdStructAndStatus(struct soap *soap, const char *tag, struct condorCore__ClassAdStructAndStatus *a, const char *type)
{
	short soap_flag_status = 1, soap_flag_classAd = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorCore__ClassAdStructAndStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__ClassAdStructAndStatus, sizeof(struct condorCore__ClassAdStructAndStatus), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorCore__ClassAdStructAndStatus(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorCore__Status(soap, "status", &a->status, "condorCore:Status"))
				{	soap_flag_status = 0;
					continue;
				}
			if (soap_flag_classAd && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ClassAdStruct(soap, "classAd", &a->classAd, "condorCore:ClassAdStructAttr"))
				{	soap_flag_classAd = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_status))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorCore__ClassAdStructAndStatus *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__ClassAdStructAndStatus, sizeof(struct condorCore__ClassAdStructAndStatus), 0), SOAP_TYPE_condorCore__ClassAdStructAndStatus, sizeof(struct condorCore__ClassAdStructAndStatus));
		if (soap->alloced)
			soap_default_condorCore__ClassAdStructAndStatus(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ClassAdStructArray(struct soap *soap, struct ClassAdStructArray const*a)
{
	soap_mark_ClassAdStructArray(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_ClassAdStructArray(struct soap *soap, struct ClassAdStructArray const*a)
{
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, a->__size, SOAP_TYPE_ClassAdStructArray))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_ClassAdStruct);
			soap_mark_ClassAdStruct(soap, a->__ptr + i);
		}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ClassAdStructArray(struct soap *soap, struct ClassAdStructArray *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ClassAdStructArray(struct soap *soap, struct ClassAdStructArray *a, const char *tag, const char *type)
{
	int i = soap_embed_array(soap, (void*)a, (struct soap_array*)&a->__ptr, a->__size, tag, SOAP_TYPE_ClassAdStructArray);
	soap_out_ClassAdStructArray(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ClassAdStructArray(struct soap *soap, const char *tag, int id, const struct ClassAdStructArray *a, const char *type)
{
	int i;
	struct soap_plist *pp;
	int n = a->__size;
	char *t = soap_putsize(soap, type, a->__size);
	i = soap_array_pointer_lookup(soap, a, (struct soap_array*)&a->__ptr, n, SOAP_TYPE_ClassAdStructArray, &pp);
	if (!a->__ptr)
	{	soap_element_null(soap, tag, i, t);
		return SOAP_OK;
	}
	if (id <= 0 && i)
	{	if (soap_is_embedded(soap, pp))
		{	soap_element_ref(soap, tag, 0, i);
			return SOAP_OK;
		}
		if (soap_is_single(soap, pp))
			i = 0;
	}
	else if (id > 0)
		i = id;
	soap_array_begin_out(soap, tag, i, t, NULL);
	if (i)
		soap_set_embedded(soap, pp);
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_ClassAdStruct(soap, "item", 0, &a->__ptr[i], "condorCore:ClassAdStructAttr");
	}
	soap->position = 0;
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ClassAdStructArray * SOAP_FMAC4 soap_get_ClassAdStructArray(struct soap *soap, struct ClassAdStructArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_ClassAdStructArray(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ClassAdStructArray * SOAP_FMAC4 soap_in_ClassAdStructArray(struct soap *soap, const char *tag, struct ClassAdStructArray *a, const char *type)
{	int i, j;
	struct ClassAdStruct *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if ((a = (struct ClassAdStructArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStructArray, sizeof(struct ClassAdStructArray), 0)))
			soap_default_ClassAdStructArray(soap, a);
			if (soap->body && soap_element_end_in(soap, tag))
				return NULL;
	}
	else if (!*soap->href)
	{	if (!(a = (struct ClassAdStructArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStructArray, sizeof(struct ClassAdStructArray), 0)))
			return NULL;
		if (soap->alloced)
			soap_default_ClassAdStructArray(soap, a);
		if (soap->body)
		{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (struct ClassAdStruct *)soap_malloc(soap, sizeof(struct ClassAdStruct) * a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_ClassAdStruct(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
					return NULL;
					}
				}
				if (!soap_in_ClassAdStruct(soap, NULL, a->__ptr + i, "condorCore:ClassAdStructAttr"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (struct ClassAdStruct *)soap_push_block(soap, sizeof(struct ClassAdStruct));
				if (!p)
					return NULL;
				soap_default_ClassAdStruct(soap, p);
				if (!soap_in_ClassAdStruct(soap, NULL, p, "condorCore:ClassAdStructAttr"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
			soap_pop_block(soap);
			a->__ptr = (struct ClassAdStruct *)soap_malloc(soap, soap->blist->size);
			soap_store_block(soap, (char*)a->__ptr);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct ClassAdStructArray *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStructArray, sizeof(struct ClassAdStructArray), 0), SOAP_TYPE_ClassAdStructArray, sizeof(struct ClassAdStructArray));
		if (soap->alloced)
			soap_default_ClassAdStructArray(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ClassAdStruct(struct soap *soap, struct ClassAdStruct const*a)
{
	soap_mark_ClassAdStruct(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_ClassAdStruct(struct soap *soap, struct ClassAdStruct const*a)
{
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, a->__size, SOAP_TYPE_ClassAdStruct))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_condorCore__ClassAdStructAttr);
			soap_mark_condorCore__ClassAdStructAttr(soap, a->__ptr + i);
		}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ClassAdStruct(struct soap *soap, struct ClassAdStruct *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ClassAdStruct(struct soap *soap, struct ClassAdStruct *a, const char *tag, const char *type)
{
	int i = soap_embed_array(soap, (void*)a, (struct soap_array*)&a->__ptr, a->__size, tag, SOAP_TYPE_ClassAdStruct);
	soap_out_ClassAdStruct(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ClassAdStruct(struct soap *soap, const char *tag, int id, const struct ClassAdStruct *a, const char *type)
{
	int i;
	struct soap_plist *pp;
	int n = a->__size;
	char *t = soap_putsize(soap, type, a->__size);
	i = soap_array_pointer_lookup(soap, a, (struct soap_array*)&a->__ptr, n, SOAP_TYPE_ClassAdStruct, &pp);
	if (!a->__ptr)
	{	soap_element_null(soap, tag, i, t);
		return SOAP_OK;
	}
	if (id <= 0 && i)
	{	if (soap_is_embedded(soap, pp))
		{	soap_element_ref(soap, tag, 0, i);
			return SOAP_OK;
		}
		if (soap_is_single(soap, pp))
			i = 0;
	}
	else if (id > 0)
		i = id;
	soap_array_begin_out(soap, tag, i, t, NULL);
	if (i)
		soap_set_embedded(soap, pp);
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_condorCore__ClassAdStructAttr(soap, "item", 0, &a->__ptr[i], "condorCore:ClassAdStructAttr");
	}
	soap->position = 0;
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ClassAdStruct * SOAP_FMAC4 soap_get_ClassAdStruct(struct soap *soap, struct ClassAdStruct *p, const char *tag, const char *type)
{
	if ((p = soap_in_ClassAdStruct(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ClassAdStruct * SOAP_FMAC4 soap_in_ClassAdStruct(struct soap *soap, const char *tag, struct ClassAdStruct *a, const char *type)
{	int i, j;
	struct condorCore__ClassAdStructAttr *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if ((a = (struct ClassAdStruct *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct), 0)))
			soap_default_ClassAdStruct(soap, a);
			if (soap->body && soap_element_end_in(soap, tag))
				return NULL;
	}
	else if (!*soap->href)
	{	if (!(a = (struct ClassAdStruct *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct), 0)))
			return NULL;
		if (soap->alloced)
			soap_default_ClassAdStruct(soap, a);
		if (soap->body)
		{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (struct condorCore__ClassAdStructAttr *)soap_malloc(soap, sizeof(struct condorCore__ClassAdStructAttr) * a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_condorCore__ClassAdStructAttr(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
					return NULL;
					}
				}
				if (!soap_in_condorCore__ClassAdStructAttr(soap, NULL, a->__ptr + i, "condorCore:ClassAdStructAttr"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (struct condorCore__ClassAdStructAttr *)soap_push_block(soap, sizeof(struct condorCore__ClassAdStructAttr));
				if (!p)
					return NULL;
				soap_default_condorCore__ClassAdStructAttr(soap, p);
				if (!soap_in_condorCore__ClassAdStructAttr(soap, NULL, p, "condorCore:ClassAdStructAttr"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
			soap_pop_block(soap);
			a->__ptr = (struct condorCore__ClassAdStructAttr *)soap_malloc(soap, soap->blist->size);
			soap_store_block(soap, (char*)a->__ptr);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct ClassAdStruct *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct), 0), SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct));
		if (soap->alloced)
			soap_default_ClassAdStruct(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorCore__ClassAdStructAttr))
		soap_mark_condorCore__ClassAdStructAttr(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorCore__ClassAdStructAttr(struct soap *soap, const struct condorCore__ClassAdStructAttr *a)
{
	soap_embedded(soap, &a->name, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->name);
	soap_embedded(soap, &a->type, SOAP_TYPE_condorCore__ClassAdAttrType);
	soap_embedded(soap, &a->value, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->value);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr *a)
{
	soap_default_xsd__string(soap, &a->name);
	soap_default_condorCore__ClassAdAttrType(soap, &a->type);
	soap_default_xsd__string(soap, &a->value);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__ClassAdStructAttr);
	soap_out_condorCore__ClassAdStructAttr(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__ClassAdStructAttr(struct soap *soap, const char *tag, int id, const struct condorCore__ClassAdStructAttr *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__ClassAdStructAttr), type);
	soap_out_xsd__string(soap, "name", -1, &a->name, "xsd:string");
	soap_out_condorCore__ClassAdAttrType(soap, "type", -1, &a->type, "condorCore:ClassAdAttrType");
	soap_out_xsd__string(soap, "value", -1, &a->value, "xsd:string");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorCore__ClassAdStructAttr * SOAP_FMAC4 soap_get_condorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__ClassAdStructAttr(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__ClassAdStructAttr * SOAP_FMAC4 soap_in_condorCore__ClassAdStructAttr(struct soap *soap, const char *tag, struct condorCore__ClassAdStructAttr *a, const char *type)
{
	short soap_flag_name = 1, soap_flag_type = 1, soap_flag_value = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorCore__ClassAdStructAttr *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorCore__ClassAdStructAttr(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name = 0;
					continue;
				}
			if (soap_flag_type && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorCore__ClassAdAttrType(soap, "type", &a->type, "condorCore:ClassAdAttrType"))
				{	soap_flag_type = 0;
					continue;
				}
			if (soap_flag_value && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "value", &a->value, "xsd:string"))
				{	soap_flag_value = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_name || soap_flag_type || soap_flag_value))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorCore__ClassAdStructAttr *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr), 0), SOAP_TYPE_condorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr));
		if (soap->alloced)
			soap_default_condorCore__ClassAdStructAttr(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorCore__Status(struct soap *soap, struct condorCore__Status const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condorCore__Status))
		soap_mark_condorCore__Status(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorCore__Status(struct soap *soap, const struct condorCore__Status *a)
{
	soap_embedded(soap, &a->code, SOAP_TYPE_condorCore__StatusCode);
	soap_embedded(soap, &a->message, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->message);
	soap_embedded(soap, &a->next, SOAP_TYPE_PointerTocondorCore__Status);
	soap_mark_PointerTocondorCore__Status(soap, &a->next);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorCore__Status(struct soap *soap, struct condorCore__Status *a)
{
	soap_default_condorCore__StatusCode(soap, &a->code);
	soap_default_xsd__string(soap, &a->message);
	soap_default_PointerTocondorCore__Status(soap, &a->next);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorCore__Status(struct soap *soap, struct condorCore__Status *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorCore__Status);
	soap_out_condorCore__Status(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorCore__Status(struct soap *soap, const char *tag, int id, const struct condorCore__Status *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condorCore__Status), type);
	soap_out_condorCore__StatusCode(soap, "code", -1, &a->code, "condorCore:StatusCode");
	soap_out_xsd__string(soap, "message", -1, &a->message, "xsd:string");
	soap_out_PointerTocondorCore__Status(soap, "next", -1, &a->next, "condorCore:Status");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condorCore__Status * SOAP_FMAC4 soap_get_condorCore__Status(struct soap *soap, struct condorCore__Status *p, const char *tag, const char *type)
{
	if ((p = soap_in_condorCore__Status(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__Status * SOAP_FMAC4 soap_in_condorCore__Status(struct soap *soap, const char *tag, struct condorCore__Status *a, const char *type)
{
	short soap_flag_code = 1, soap_flag_message = 1, soap_flag_next = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condorCore__Status *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__Status, sizeof(struct condorCore__Status), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condorCore__Status(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condorCore__StatusCode(soap, "code", &a->code, "condorCore:StatusCode"))
				{	soap_flag_code = 0;
					continue;
				}
			if (soap_flag_message && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "message", &a->message, "xsd:string"))
				{	soap_flag_message = 0;
					continue;
				}
			if (soap_flag_next && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocondorCore__Status(soap, "next", &a->next, "condorCore:Status"))
				{	soap_flag_next = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_code))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condorCore__Status *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condorCore__Status, sizeof(struct condorCore__Status), 0), SOAP_TYPE_condorCore__Status, sizeof(struct condorCore__Status));
		if (soap->alloced)
			soap_default_condorCore__Status(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__base64Binary(struct soap *soap, struct xsd__base64Binary const*a)
{
	soap_mark_xsd__base64Binary(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_xsd__base64Binary(struct soap *soap, struct xsd__base64Binary const*a)
{
	if (a->__ptr)
		soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, a->__size, SOAP_TYPE_xsd__base64Binary);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__base64Binary(struct soap *soap, struct xsd__base64Binary *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__base64Binary(struct soap *soap, struct xsd__base64Binary *a, const char *tag, const char *type)
{
	int i = soap_embed_array(soap, (void*)a, (struct soap_array*)&a->__ptr, a->__size, tag, SOAP_TYPE_xsd__base64Binary);
	soap_out_xsd__base64Binary(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const struct xsd__base64Binary *a, const char *type)
{
	int i;
	struct soap_plist *pp;
	int n = a->__size;
	i = soap_array_pointer_lookup(soap, a, (struct soap_array*)&a->__ptr, n, SOAP_TYPE_xsd__base64Binary, &pp);
	if (!a->__ptr)
	{	soap_element_null(soap, tag, i, type);
		return SOAP_OK;
	}
	if (id <= 0 && i)
	{	if (soap_is_embedded(soap, pp))
		{	soap_element_ref(soap, tag, 0, i);
			return SOAP_OK;
		}
		if (soap_is_single(soap, pp))
			i = 0;
	}
	else if (id > 0)
		i = id;
	soap_element_begin_out(soap, tag, i, "xsd:base64Binary");
	if (i)
		soap_set_embedded(soap, pp);
	soap_putbase64(soap, a->__ptr, a->__size);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, struct xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, struct xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, "SOAP-ENC:base64") && soap_match_tag(soap, soap->type, "SOAP-ENC:base64Binary"))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if ((a = (struct xsd__base64Binary *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(struct xsd__base64Binary), 0)))
			soap_default_xsd__base64Binary(soap, a);
			if (soap->body && soap_element_end_in(soap, tag))
				return NULL;
	}
	else if (!*soap->href)
	{	if (!(a = (struct xsd__base64Binary *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(struct xsd__base64Binary), 0)))
			return NULL;
		if (soap->alloced)
			soap_default_xsd__base64Binary(soap, a);
		if (soap->body)
		{
		a->__ptr = soap_getbase64(soap, (size_t*)&a->__size, 0);
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct xsd__base64Binary *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(struct xsd__base64Binary), 0), SOAP_TYPE_xsd__base64Binary, sizeof(struct xsd__base64Binary));
		if (soap->alloced)
			soap_default_xsd__base64Binary(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	}
	return a;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToSOAP_ENV__Code))
		soap_mark_PointerToSOAP_ENV__Code(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_mark_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	soap_out_PointerToSOAP_ENV__Code(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_SOAP_ENV__Code, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_SOAP_ENV__Code(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_SOAP_ENV__Code(soap, tag, i, *a, type);
	}
	return soap_out_SOAP_ENV__Code(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_SOAP_ENV__Code, &pp), *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	struct SOAP_ENV__Code *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct SOAP_ENV__Code **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToSOAP_ENV__Code, sizeof(struct SOAP_ENV__Code *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_SOAP_ENV__Code(soap, tag, NULL, type)))
		{	a = (struct SOAP_ENV__Code **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToSOAP_ENV__Code, sizeof(struct SOAP_ENV__Code *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToSOAP_ENV__Code, sizeof(struct SOAP_ENV__Code *), 1), SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToSOAP_ENV__Detail))
		soap_mark_PointerToSOAP_ENV__Detail(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_mark_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	soap_out_PointerToSOAP_ENV__Detail(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_SOAP_ENV__Detail, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_SOAP_ENV__Detail(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_SOAP_ENV__Detail(soap, tag, i, *a, type);
	}
	return soap_out_SOAP_ENV__Detail(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_SOAP_ENV__Detail, &pp), *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	struct SOAP_ENV__Detail *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct SOAP_ENV__Detail **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToSOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_SOAP_ENV__Detail(soap, tag, NULL, type)))
		{	a = (struct SOAP_ENV__Detail **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToSOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToSOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail *), 1), SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap *soap, struct xsd__base64Binary *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToxsd__base64Binary))
		soap_mark_PointerToxsd__base64Binary(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToxsd__base64Binary(struct soap *soap, struct xsd__base64Binary *const*a)
{
	if (*a && !soap_array_reference(soap, *a, (struct soap_array*)&(*a)->__ptr, (*a)->__size, SOAP_TYPE_xsd__base64Binary))
		soap_mark_xsd__base64Binary(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToxsd__base64Binary(struct soap *soap, struct xsd__base64Binary **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap *soap, struct xsd__base64Binary **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToxsd__base64Binary);
	soap_out_PointerToxsd__base64Binary(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap *soap, const char *tag, int id, struct xsd__base64Binary *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToxsd__base64Binary);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_array_pointer_lookup(soap, *a, (struct soap_array*)&(*a)->__ptr, (*a)->__size, SOAP_TYPE_xsd__base64Binary, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_xsd__base64Binary(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_xsd__base64Binary(soap, tag, i, *a, type);
	}
	return soap_out_xsd__base64Binary(soap, tag, soap_array_pointer_enter(soap, *a, (struct soap_array*)&(*a)->__ptr, SOAP_TYPE_xsd__base64Binary, &pp), *a, type);
}

SOAP_FMAC3 struct xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap *soap, struct xsd__base64Binary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__base64Binary(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap *soap, const char *tag, struct xsd__base64Binary **a, const char *type)
{
	struct xsd__base64Binary *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct xsd__base64Binary **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToxsd__base64Binary, sizeof(struct xsd__base64Binary *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_xsd__base64Binary(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_xsd__base64Binary(soap, tag, NULL, type)))
		{	a = (struct xsd__base64Binary **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToxsd__base64Binary, sizeof(struct xsd__base64Binary *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct xsd__base64Binary **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToxsd__base64Binary, sizeof(struct xsd__base64Binary *), 1), SOAP_TYPE_xsd__base64Binary, sizeof(struct xsd__base64Binary), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocondorSchedd__FileInfo(struct soap *soap, struct condorSchedd__FileInfo *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerTocondorSchedd__FileInfo))
		soap_mark_PointerTocondorSchedd__FileInfo(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerTocondorSchedd__FileInfo(struct soap *soap, struct condorSchedd__FileInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_condorSchedd__FileInfo))
		soap_mark_condorSchedd__FileInfo(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerTocondorSchedd__FileInfo(struct soap *soap, struct condorSchedd__FileInfo **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocondorSchedd__FileInfo(struct soap *soap, struct condorSchedd__FileInfo **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerTocondorSchedd__FileInfo);
	soap_out_PointerTocondorSchedd__FileInfo(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocondorSchedd__FileInfo(struct soap *soap, const char *tag, int id, struct condorSchedd__FileInfo *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerTocondorSchedd__FileInfo);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_condorSchedd__FileInfo, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_condorSchedd__FileInfo(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_condorSchedd__FileInfo(soap, tag, i, *a, type);
	}
	return soap_out_condorSchedd__FileInfo(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_condorSchedd__FileInfo, &pp), *a, type);
}

SOAP_FMAC3 struct condorSchedd__FileInfo ** SOAP_FMAC4 soap_get_PointerTocondorSchedd__FileInfo(struct soap *soap, struct condorSchedd__FileInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocondorSchedd__FileInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorSchedd__FileInfo ** SOAP_FMAC4 soap_in_PointerTocondorSchedd__FileInfo(struct soap *soap, const char *tag, struct condorSchedd__FileInfo **a, const char *type)
{
	struct condorSchedd__FileInfo *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct condorSchedd__FileInfo **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTocondorSchedd__FileInfo, sizeof(struct condorSchedd__FileInfo *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_condorSchedd__FileInfo(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_condorSchedd__FileInfo(soap, tag, NULL, type)))
		{	a = (struct condorSchedd__FileInfo **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerTocondorSchedd__FileInfo, sizeof(struct condorSchedd__FileInfo *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct condorSchedd__FileInfo **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTocondorSchedd__FileInfo, sizeof(struct condorSchedd__FileInfo *), 1), SOAP_TYPE_condorSchedd__FileInfo, sizeof(struct condorSchedd__FileInfo), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocondorSchedd__Requirement(struct soap *soap, char **const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerTocondorSchedd__Requirement))
		soap_mark_PointerTocondorSchedd__Requirement(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerTocondorSchedd__Requirement(struct soap *soap, char **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_condorSchedd__Requirement))
		soap_mark_condorSchedd__Requirement(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerTocondorSchedd__Requirement(struct soap *soap, char ***a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocondorSchedd__Requirement(struct soap *soap, char ***a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerTocondorSchedd__Requirement);
	soap_out_PointerTocondorSchedd__Requirement(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocondorSchedd__Requirement(struct soap *soap, const char *tag, int id, char **const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerTocondorSchedd__Requirement);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_condorSchedd__Requirement, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_condorSchedd__Requirement(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_condorSchedd__Requirement(soap, tag, i, *a, type);
	}
	return soap_out_condorSchedd__Requirement(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_condorSchedd__Requirement, &pp), *a, type);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTocondorSchedd__Requirement(struct soap *soap, char ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocondorSchedd__Requirement(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTocondorSchedd__Requirement(struct soap *soap, const char *tag, char ***a, const char *type)
{
	char **p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (char ***)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTocondorSchedd__Requirement, sizeof(char **), 2);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_condorSchedd__Requirement(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_condorSchedd__Requirement(soap, tag, NULL, type)))
		{	a = (char ***)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerTocondorSchedd__Requirement, sizeof(char **), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (char ***)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTocondorSchedd__Requirement, sizeof(char **), 2), SOAP_TYPE_condorSchedd__Requirement, sizeof(char *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condorSchedd__Requirement(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT_condorSchedd__Requirement
	*a = SOAP_DEFAULT_condorSchedd__Requirement;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condorSchedd__Requirement(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_condorSchedd__Requirement);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condorSchedd__Requirement(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_condorSchedd__Requirement);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condorSchedd__Requirement(struct soap *soap, char **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condorSchedd__Requirement);
	soap_out_condorSchedd__Requirement(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condorSchedd__Requirement(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_condorSchedd__Requirement);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_condorSchedd__Requirement(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_condorSchedd__Requirement(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_condorSchedd__Requirement(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_condorSchedd__Requirement, 1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToClassAdStruct))
		soap_mark_PointerToClassAdStruct(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct *const*a)
{
	if (*a && !soap_array_reference(soap, *a, (struct soap_array*)&(*a)->__ptr, (*a)->__size, SOAP_TYPE_ClassAdStruct))
		soap_mark_ClassAdStruct(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToClassAdStruct);
	soap_out_PointerToClassAdStruct(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToClassAdStruct(struct soap *soap, const char *tag, int id, struct ClassAdStruct *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToClassAdStruct);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_array_pointer_lookup(soap, *a, (struct soap_array*)&(*a)->__ptr, (*a)->__size, SOAP_TYPE_ClassAdStruct, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_ClassAdStruct(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_ClassAdStruct(soap, tag, i, *a, type);
	}
	return soap_out_ClassAdStruct(soap, tag, soap_array_pointer_enter(soap, *a, (struct soap_array*)&(*a)->__ptr, SOAP_TYPE_ClassAdStruct, &pp), *a, type);
}

SOAP_FMAC3 struct ClassAdStruct ** SOAP_FMAC4 soap_get_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToClassAdStruct(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ClassAdStruct ** SOAP_FMAC4 soap_in_PointerToClassAdStruct(struct soap *soap, const char *tag, struct ClassAdStruct **a, const char *type)
{
	struct ClassAdStruct *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct ClassAdStruct **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToClassAdStruct, sizeof(struct ClassAdStruct *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_ClassAdStruct(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_ClassAdStruct(soap, tag, NULL, type)))
		{	a = (struct ClassAdStruct **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToClassAdStruct, sizeof(struct ClassAdStruct *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct ClassAdStruct **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToClassAdStruct, sizeof(struct ClassAdStruct *), 1), SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr))
		soap_mark_PointerTocondorCore__ClassAdStructAttr(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_condorCore__ClassAdStructAttr))
		soap_mark_condorCore__ClassAdStructAttr(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr);
	soap_out_PointerTocondorCore__ClassAdStructAttr(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, const char *tag, int id, struct condorCore__ClassAdStructAttr *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_condorCore__ClassAdStructAttr, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_condorCore__ClassAdStructAttr(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_condorCore__ClassAdStructAttr(soap, tag, i, *a, type);
	}
	return soap_out_condorCore__ClassAdStructAttr(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_condorCore__ClassAdStructAttr, &pp), *a, type);
}

SOAP_FMAC3 struct condorCore__ClassAdStructAttr ** SOAP_FMAC4 soap_get_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, struct condorCore__ClassAdStructAttr **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocondorCore__ClassAdStructAttr(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__ClassAdStructAttr ** SOAP_FMAC4 soap_in_PointerTocondorCore__ClassAdStructAttr(struct soap *soap, const char *tag, struct condorCore__ClassAdStructAttr **a, const char *type)
{
	struct condorCore__ClassAdStructAttr *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct condorCore__ClassAdStructAttr **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_condorCore__ClassAdStructAttr(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_condorCore__ClassAdStructAttr(soap, tag, NULL, type)))
		{	a = (struct condorCore__ClassAdStructAttr **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct condorCore__ClassAdStructAttr **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTocondorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr *), 1), SOAP_TYPE_condorCore__ClassAdStructAttr, sizeof(struct condorCore__ClassAdStructAttr), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocondorCore__Status(struct soap *soap, struct condorCore__Status *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerTocondorCore__Status))
		soap_mark_PointerTocondorCore__Status(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerTocondorCore__Status(struct soap *soap, struct condorCore__Status *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_condorCore__Status))
		soap_mark_condorCore__Status(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerTocondorCore__Status(struct soap *soap, struct condorCore__Status **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocondorCore__Status(struct soap *soap, struct condorCore__Status **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerTocondorCore__Status);
	soap_out_PointerTocondorCore__Status(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocondorCore__Status(struct soap *soap, const char *tag, int id, struct condorCore__Status *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerTocondorCore__Status);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_condorCore__Status, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_condorCore__Status(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_condorCore__Status(soap, tag, i, *a, type);
	}
	return soap_out_condorCore__Status(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_condorCore__Status, &pp), *a, type);
}

SOAP_FMAC3 struct condorCore__Status ** SOAP_FMAC4 soap_get_PointerTocondorCore__Status(struct soap *soap, struct condorCore__Status **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocondorCore__Status(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condorCore__Status ** SOAP_FMAC4 soap_in_PointerTocondorCore__Status(struct soap *soap, const char *tag, struct condorCore__Status **a, const char *type)
{
	struct condorCore__Status *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct condorCore__Status **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTocondorCore__Status, sizeof(struct condorCore__Status *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_condorCore__Status(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_condorCore__Status(soap, tag, NULL, type)))
		{	a = (struct condorCore__Status **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerTocondorCore__Status, sizeof(struct condorCore__Status *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct condorCore__Status **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTocondorCore__Status, sizeof(struct condorCore__Status *), 1), SOAP_TYPE_condorCore__Status, sizeof(struct condorCore__Status), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerTounsignedByte))
		soap_mark_PointerTounsignedByte(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerTounsignedByte(struct soap *soap, unsigned char **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerTounsignedByte);
	soap_out_PointerTounsignedByte(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerTounsignedByte);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_unsignedByte, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_unsignedByte(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_unsignedByte(soap, tag, i, *a, type);
	}
	return soap_out_unsignedByte(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_unsignedByte, &pp), *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	unsigned char *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (unsigned char **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTounsignedByte, sizeof(unsigned char *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_unsignedByte(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_unsignedByte(soap, tag, NULL, type)))
		{	a = (unsigned char **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerTounsignedByte, sizeof(unsigned char *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTounsignedByte, sizeof(unsigned char *), 1), SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__anyURI(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT_xsd__anyURI
	*a = SOAP_DEFAULT_xsd__anyURI;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__anyURI);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_xsd__anyURI(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__anyURI);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, char **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__anyURI);
	soap_out_xsd__anyURI(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__anyURI);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__anyURI, 1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__string(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT_xsd__string
	*a = SOAP_DEFAULT_xsd__string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_xsd__string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap *soap, char **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__string);
	soap_out_xsd__string(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__string, 1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE__QName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark__QName(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE__QName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE__QName);
	soap_out__QName(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_string);
	soap_out_string(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1);
}

SOAP_END_NAMESPACE(soap_schedd)

/* end of soap_scheddC.cpp */
