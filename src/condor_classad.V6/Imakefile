SRC_DIR = $(SRC_TREE)/condor_classad.V6

/* select required features */
#include "classad_features.h"


C_PLUS_FLAGS 		= -Wall $(STD_C_PLUS_FLAGS)
CFLAGS 			= -Wall $(STD_C_FLAGS)


/* The basic classad source and object files */
CLASSAD_SRC_0 		= lexer.C lexerSource.C source.C operators.C attrrefs.C fnCall.C   \
                      literals.C exprTree.C classad.C exprList.C value.C \
                      instantiations.C sink.C matchClassad.C condorUtil.C      \
                      util.C xmlLexer.C xmlSink.C xmlSource.C cclassad.C
CLASSAD_OBJ_0 		= lexer.o lexerSource.o source.o operators.o attrrefs.o fnCall.o   \
                      literals.o exprTree.o classad.o exprList.o value.o \
                      instantiations.o sink.o  matchClassad.o condorUtil.o     \
                      util.o xmlLexer.o xmlSink.o xmlSource.o cclassad.o


/* Are collections required? */
#if defined(COLLECTIONS)
CLASSAD_SRC_1		= $(CLASSAD_SRC_0) view.C collection.C collectionBase.C   \
                      collectionServer.C collectionClient.C transaction.C     \
                      query.C remoteQuery.C coll-comm-inst.C coll-serv-inst.C \
                      coll-client-inst.C indexfile.C 
CLASSAD_OBJ_1		= $(CLASSAD_OBJ_0) view.o collection.o collectionBase.o   \
                      collectionServer.o collectionClient.o transaction.o     \
                      query.o remoteQuery.o	coll-comm-inst.o coll-serv-inst.o \
                      coll-client-inst.o indexfile.o
#else
CLASSAD_SRC_1		= $(CLASSAD_SRC_0)
CLASSAD_OBJ_1		= $(CLASSAD_OBJ_0)
#endif


/* Are experimental features required? */
#if defined(EXPERIMENTAL)
CLASSAD_SRC_2		= $(CLASSAD_SRC_1) rectangle.C intervalTree.C compress.C\
						queryProcessor.C exp-inst.C
CLASSAD_OBJ_2		= $(CLASSAD_OBJ_1) rectangle.o intervalTree.o compress.o\
						queryProcessor.o exp-inst.o
#else
CLASSAD_SRC_2		= $(CLASSAD_SRC_1)
CLASSAD_OBJ_2		= $(CLASSAD_OBJ_1)
#endif

#if defined(CLASSAD_DEPRECATED)
CLASSAD_SRC_3		= $(CLASSAD_SRC_2) classad_deprecated.C
CLASSAD_OBJ_3		= $(CLASSAD_OBJ_2) classad_deprecated.o

#else
CLASSAD_SRC_3		= $(CLASSAD_SRC_2)
CLASSAD_OBJ_3		= $(CLASSAD_OBJ_2)
#endif


SRC = $(CLASSAD_SRC_3) ../condor_c++_util/condor_attributes.C
OBJ = $(CLASSAD_OBJ_3) ../condor_c++_util/condor_attributes.o


LIB_BASE =  ./libclassad.a ../condor_c++_util/cplus_lib.a \
      ../condor_util_lib/util_lib.a \
      ../condor_c++_util/cplus_lib.a ../condor_util_lib/util_lib.a \
	../condor_util_lib/util_lib.a ../condor_sysapi/libsysapi.a 

#if defined(CLASSAD_DEPRECATED)
LIB = $(LIB_BASE) $(IO_LIB) $(SECURITY_LIB) $(CPLUS_LIB) $(SECURITY_LIB) 
#else
LIB = $(LIB_BASE)
#endif

/* the main condor library target */
all_target(libclassad.a test_classads test_xml extra_tests)
library_target(libclassad.a,$(OBJ))

release:: all

/* template instantiations go in here */
template_inst( instantiations.C, instantiations.o ) 	/* main classad insts */
template_inst( coll-comm-inst.C, coll-comm-inst.o ) 	/* common collection  */
template_inst( coll-serv-inst.C, coll-serv-inst.o ) 	/* collection server  */
template_inst( coll-client-inst.C,coll-client-inst.o) 	/* collection client*/
template_inst( exp-inst.C, exp-inst.o )					/* experimental */

/* Standalone distribution of classads/collections */
DISTRIBUTION_DIR = classads_0.9.5-beta

DIST_FILES = attrrefs.C attrrefs.h classad.C classad.h collection.C		\
collection.h collectionBase.C collectionBase.h common.h classadErrno.h	\
classadItor.h debug.C debug.h exprList.C exprList.h exprTree.C			\
exprTree.h extra_tests.C fnCall.C fnCall.h indexfile.h indexfile.C		\
instantiations.C lexer.C lexer.h lexerSource.C lexerSource.h			\
literals.C literals.h matchClassad.C matchClassad.h operators.C			\
operators.h query.C query.h sample.C shared.C sink.C sink.h source.C	\
source.h test_classads.C test_xml.C tests.txt transaction.C				\
transaction.h util.C util.h value.C value.h view.C view.h xmlLexer.C xmlLexer.h \
xmlSink.h xmlSink.C xmlSource.h xmlSource.C classad_distribution.h		\
cclassad.C cclassad.h classad_stl.h LICENSE README CHANGELOG configure

WIN32_FILES = win32/classad_dist.dep win32/classad_dist.dsp \
	win32/classad_dist.dsw win32/classad_dist.mak win32/make.bat

dist: $(DIST_FILES)
	rm -rf $(DISTRIBUTION_DIR) *.gz
	mkdir $(DISTRIBUTION_DIR)
	mkdir $(DISTRIBUTION_DIR)/win32
	cp $(DIST_FILES) $(DISTRIBUTION_DIR)
	cp makefile-dist $(DISTRIBUTION_DIR)/Makefile
	cp $(WIN32_FILES) $(DISTRIBUTION_DIR)/win32
	tar cf $(DISTRIBUTION_DIR).tar $(DISTRIBUTION_DIR)
	gzip $(DISTRIBUTION_DIR).tar

/* Rule to make documentation */
doc: html

#ifdef ENABLE_SHARED_LIBRARY_FUNCTIONS
shared:
	g++ -fPIC -shared -o libshared.so shared.C
#endif

/* Also depends on several header files, but I am ignoring that for now */
html_target( documentation )

clean::
	rm -f -r *.o *.gz html

/* The Classad eXpression Interpreter */
#ifdef ENABLE_SHARED_LIBRARY_FUNCTIONS
LDFLAGS =  -Xlinker --export-dynamic -ldl
#endif

c_plus_target (cxi, cxi.o, $(LIB))
c_plus_target (test_classads, test_classads.o, $(LIB))
c_plus_target (test_xml, test_xml.o, $(LIB))
c_plus_target (extra_tests, extra_tests.o, $(LIB))
c_plus_target (sample, sample.o, $(LIB))
c_plus_target (man_cache_test, man_cache_test.o, $(LIB))
pure_c_plus_target (test_classads.pure, test_classads.o, $(LIB))

