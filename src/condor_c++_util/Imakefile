all_target(cplus_lib.a liburl.a libcondorapi.a)

C_PLUS_FLAGS = $(STD_C_PLUS_FLAGS)
CFLAGS = $(STD_C_FLAGS)
LIB = $(STD_LIBS)

URL_OBJ = url_condor.o cbstp_url.o file_url.o http_url.o filter_url.o \
	mailto_url.o cfilter_url.o ftp_url.o include_urls.o mkargv.o

API_OBJ = /* generic_query.o condor_query.o condor_q.o ad_printmask.o \
			condor_event.o user_log.o */

OBJ = state_machine_driver.o event_handler.o name_tab.o NON_POSIX.select.o \
	alarm.o \
	directory.o my_hostname.o file_lock.o \
	email.o environ.o c++_util_instantiate.o \
	string_list.o condor_event.o $(URL_OBJ) get_daemon_addr.o \
	user_log.o config.o condor_config.o stringSpace.o condor_state.o $(API_OBJ)\
	usagemon.o \
	get_full_hostname.o format_time.o renice_self.o condor_version.o \
	limit.o my_subsystem.o daemon_types.o killfamily.o access.o \
	strnewp.o memory_file.o my_username.o misc_utils.o file_transfer.o \
	/* daemon.o */ \
	uids.o metric_units.o condor_ver_info.o

#if !HAS_FLOCK
FLOCK_OBJ = ../condor_util_lib/flock.o
#endif 

library_target( cplus_lib.a,$(OBJ))
library_target( liburl.a,$(URL_OBJ))
library_target( libcondorapi.a,$(API_OBJ) file_lock.o ../condor_util_lib/dprintf_common.o ../condor_util_lib/dprintf.o ../condor_util_lib/mkargv.o ../condor_util_lib/except.o ../condor_util_lib/lock_file.NON_POSIX.o $(FLOCK_OBJ) ../condor_util_lib/setsyscalls.o uids.o)

c_plus_target(test_locks,test_locks.o,$(LIB))

c_plus_target(cat_url, cat_url.o, liburl.a)
c_plus_target(access.t, access.t.o, $(LIB))
c_plus_target(killfamily.t, killfamily.t.o, $(LIB))
pure_c_plus_target(killfamily.t.pure, killfamily.t.o, $(LIB))
purecov_c_plus_target(killfamily.t.pc, killfamily.t.o, $(LIB))

c_plus_target(daemon.t, daemon.t.o, $(LIB))
pure_c_plus_target(daemon.t.pure, daemon.t.o, $(LIB))
purecov_c_plus_target(daemon.t.pc, daemon.t.o, $(LIB))

c_plus_target(my_hostname.t, my_hostname.t.o, $(LIB))
pure_c_plus_target(my_hostname.t.pure, my_hostname.t.o, $(LIB))
purecov_c_plus_target(my_hostname.t.pc, my_hostname.t.o, $(LIB))

template_inst( c++_util_instantiate.C, c++_util_instantiate.o )
html_target( documentation )

all-tests: access.t killfamily.t daemon.t test_locks my_hostname.t

test: test.o user_log.o
	$(CC) $(CFLAGS) -Wl,-u,_fpdata_size -o test test.o user_log.o $(LIB)

tester: tester.o $(LIB)
	$(CC) $(CFLAGS) -Wl,-u._fpdata_size -o tester tester.o $(LIB)

foo: foo.o user_log.o
	$(CC) $(CFLAGS) -Wl,-u,_fpdata_size -o foo foo.o user_log.o $(LIB)

IMPORT_LINKS = ../../config/import_links
import(../condor_util_lib, mkargv.o)

release_library(libcondorapi.a,$(RELEASE_DIR)/lib)
strip_library(libcondorapi.a,$(STRIP_DIR)/lib)
static_library(libcondorapi.a,$(STATIC_DIR)/lib)

release_copy_target(user_log.README,include,user_log.README,TEXT_MODE)
strip_copy_target(user_log.README,include,user_log.README,TEXT_MODE)
static_copy_target(user_log.README,include,user_log.README,TEXT_MODE)

release_copy_target(user_log.c++.h,include,user_log.c++.h,TEXT_MODE)
strip_copy_target(user_log.c++.h,include,user_log.c++.h,TEXT_MODE)
static_copy_target(user_log.c++.h,include,user_log.c++.h,TEXT_MODE)

release_copy_target(condor_event.h,include,condor_event.h,TEXT_MODE)
strip_copy_target(condor_event.h,include,condor_event.h,TEXT_MODE)
static_copy_target(condor_event.h,include,condor_event.h,TEXT_MODE)

release_copy_target(../h/file_lock.h,include,file_lock.h,TEXT_MODE)
strip_copy_target(../h/file_lock.h,include,file_lock.h,TEXT_MODE)
static_copy_target(../h/file_lock.h,include,file_lock.h,TEXT_MODE)

release_copy_target(../condor_includes/condor_constants.h,\
                    include,condor_constants.h,TEXT_MODE)
strip_copy_target(../condor_includes/condor_constants.h, \
                  include,condor_constants.h,TEXT_MODE)
static_copy_target(../condor_includes/condor_constants.h, \
                   include,condor_constants.h,TEXT_MODE)

foo.o: user_log.h
test.o: user_log.h

condor_version.o: condor_version.C
	$(CPlusPlus) $(C_PLUS_FLAGS) -c -DPLATFORM=$(PLATFORM) condor_version.C

