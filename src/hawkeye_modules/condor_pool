#! /usr/bin/perl -w
use strict;

# Update the module include path
BEGIN
{
    my $Dir = $0;
    if ( $Dir =~ /(.*)\/.*/ )
    {
	push @INC, "$1";
    }
}
use HawkeyePublish;
use HawkeyeLib;

# Prototypes
sub Init( );
sub RunIt( );
sub RunAbsent( );
sub RunTotal( $$ );
sub RunSubmit(  );


# Setup the hawkeye stuff
my $Hawkeye;
my %Config = (
	      PoolProg => "condor_pool",
	      PoolName => "",
	      Cluster => "",
	      Reserved => "",
	      DoAbsent => 1,
	      DoSummary => 1,
	      DoRun => 1,
	      DoSubmit => 1,
	      DoSubmitMunge => 0,
	      DoCheckpoint => 1,
	      DoSubmitDetails => 1,
	      DoArchDetail => 1,
	      PoolDescription => "",
	     );
my $Hash;

# Do it
Init();
RunIt();

sub Init()
{
    HawkeyeLib::DoConfig( );

    $Hawkeye = HawkeyePublish->new;
    $Hawkeye->Quiet( 1 );
    $Hawkeye->AutoIndexSet( 0 );

    # Read the config info..
    my $Tmp;

    $Tmp = HawkeyeLib::ReadConfig( "_pathadd", "" );
    $ENV{PATH} = "$Tmp:$ENV{PATH}" if ( $Tmp ne "" );

    $Tmp = HawkeyeLib::ReadConfig( "_executable", "" );
    $Config{PoolProg} = $Tmp if ( $Tmp ne "" );

    $Tmp = HawkeyeLib::ReadConfig( "_dir", "" );
    push( @{$Config{Options}}, "--dir=$Tmp" ) if ( $Tmp ne "" );

    $Tmp = HawkeyeLib::ReadConfig( "_name", "" );
    $Config{PoolName} = $Tmp if ( $Tmp ne "" );

    $Tmp = HawkeyeLib::ReadConfig( "_description", "" );
    $Config{Description} = $Tmp if ( $Tmp ne "" );

    $Tmp = HawkeyeLib::ReadConfig( "_cluster", "true" );
    if ( $Tmp =~ /true/i )
    {
	push( @{$Config{Options}}, "--down=cluster" );
	push( @{$Config{Options}}, "--downlist=cluster" );
    }

    $Tmp = HawkeyeLib::ReadConfig( "_reserved", "false" );
    push( @{$Config{Options}}, "--reserved" );

    $Tmp = HawkeyeLib::ReadConfig( "_absent", "true" );
    $Config{DoAbsent} = ( $Tmp =~ /true/i ) ? 1 : 0;

    $Tmp = HawkeyeLib::ReadConfig( "_summary", "true" );
    $Config{DoSummary} = ( $Tmp =~ /true/i ) ? 1 : 0;

    $Tmp = HawkeyeLib::ReadConfig( "_run", "true" );
    $Config{DoRun} = ( $Tmp =~ /true/i ) ? 1 : 0;

    $Tmp = HawkeyeLib::ReadConfig( "_submit", "true" );
    $Config{DoSubmit} = ( $Tmp =~ /true/i ) ? 1 : 0;

    $Tmp = HawkeyeLib::ReadConfig( "_submit_munge", "true" );
    $Config{DoSubmitMunge} = ( $Tmp =~ /true/i ) ? 1 : 0;

    $Tmp = HawkeyeLib::ReadConfig( "_submit_detail", "true" );
    $Config{DoSubmitDetail} = ( $Tmp =~ /true/i ) ? 1 : 0;

    $Tmp = HawkeyeLib::ReadConfig( "_arch_detail", "true" );
    $Config{DoArchDetail} = ( $Tmp =~ /true/i ) ? 1 : 0;

    $Tmp = HawkeyeLib::ReadConfig( "_ckpt", "true" );
    $Config{DoCheckpoint} = ( $Tmp =~ /true/i ) ? 1 : 0;
}

# Do the real work here...
sub RunIt()
{
    # Start things off
    $Hash = HawkeyeHash->new( \$Hawkeye, "" );

    # Description?
    if ( $Config{PoolDescription} ne "" )
    {
	$Hash->Add( "Description",
		    HawkeyePublish::TypeString,
		    $Config{PoolDescription} );
	$Hawkeye->StoreIndex( "Description" );
    }

    RunAbsent() if ( $Config{DoAbsent} );
    RunTotal( "", "Sum" ) if ( $Config{DoSummary} );
    RunTotal( "-run", "Run" ) if ( $Config{DoRun} );
    RunSubmit( ) if ( $Config{DoSubmit} );
    RunCheckPoint( ) if ( $Config{DoCheckpoint} );

    # Ok, summary is done...
    $Hash->Store( );
    $Hawkeye->Publish( );
}

# Do the real work here...
sub RunAbsent()
{

    # Lists
    my @ClusterAbsent;
    my @ClusterDown;
    my @ClusterKnownDown;
    my @Absent;
    my @NotDown;

    # Now, run condor_status and gather some more info...
    push( @{$Config{Options}}, "--absent" );
    push( @{$Config{Options}}, "--no-rcfile" );
    push( @{$Config{Options}}, "--script" );
    push( @{$Config{Options}}, "--ping" );
    push( @{$Config{Options}}, "--pingok" );
    push( @{$Config{Options}}, "--bygroup" );
    my $Cmd = "$Config{PoolProg} $Config{PoolName} ".
	  join( " ", @{$Config{Options}} );
    print STDERR "Running '$Cmd'\n";
    if ( ! open( ABSENT, "$Cmd|" ) )
    {
	print STDERR "Can't get absent info\n";
	return;
    }

    # Parse the output...
    my $Section;
    my $Cluster;
    my $Count;
    while ( <ABSENT> )
    {
	chomp;

	my ( $Attr, @Values );
	if ( /^(\w+)=(.*)/ )
	{
	    $Attr = $1;
	    @Values = split( /\,/, $2 );
	}
	else
	{
	    next;
	}

	# What have we got?
	if ( $Attr eq "Section" )
	{
	    $Section = shift @Values;
	    $Cluster = shift @Values;
	    $Count = shift @Values;
	    next;
	}
	# Listed node
	elsif ( $Attr eq "Node" )
	{
	    my $Host = shift @Values;
	    if ( $Section eq "Absent" )
	    {
		if ( $Cluster eq "<NONE>" )
		{
		    push( @Absent, $Host );
		}
		else
		{
		    push( @ClusterAbsent, "$Host" );
		}
	    }
	    elsif ( $Section eq "MarkedDown" )
	    {
		if ( $Cluster ne "<NONE>" && $Cluster ne "<ALL>" )
		{
		    push @ClusterKnownDown, $Host;
		}
	    }
	    elsif ( $Section eq "DownPingOk" )
	    {
		push @NotDown, $Host;
	    }
	    elsif ( $Section eq "Down" )
	    {
		if ( $Cluster ne "<NONE>" && $Cluster ne "<ALL>" )
		{
		    push( @ClusterDown, $1 );
		}
	    }
	}
	elsif ( $Attr eq "Roster" )
	{
	    $Hash->Add( "Count", HawkeyePublish::TypeNumber, shift @Values );
	    $Hawkeye->StoreIndex( "Count" );
	}
	elsif ( $Attr =~ /^Cluster(\w+)$/ )
	{
	    my $What = $1;
	    $Hash->Add( "Cluster_$What", HawkeyePublish::TypeAuto, shift @Values );
	    $Hawkeye->StoreIndex( "Cluster_$What" );
	}
	elsif ( $Attr eq /NodesAbsent/ )
	{
	    $Hash->Add( "Absent_Count", HawkeyePublish::TypeNumber, shift @Values );
	    $Hawkeye->StoreIndex( "Absent_Count" );
	}
	elsif ( $Attr eq "Description" )
	{
	    $Hash->Add( "Description", HawkeyePublish::TypeString, shift @Values );
	    $Hawkeye->StoreIndex( "Description" );
	}
    }
    close( ABSENT );

    # Cluster Down list
    $Hash->Add( "Cluster_AbsentList",
		HawkeyePublish::TypeString,
		join( " ", sort @ClusterAbsent ) );
    $Hawkeye->StoreIndex( "Cluster_AbsentList" );

    # Cluster Down list
    $Hash->Add( "Cluster_DownList",
		HawkeyePublish::TypeString,
		join( " ", sort @ClusterDown ) );
    $Hawkeye->StoreIndex( "Cluster_DownList" );

    # Cluster Down list
    $Hash->Add( "Cluster_KnownDownList",
		HawkeyePublish::TypeString,
		join( " ", sort @ClusterKnownDown ) );
    $Hawkeye->StoreIndex( "Cluster_KnownDownList" );
    $Hash->Add( "Cluster_KnownDownCount",
		HawkeyePublish::TypeNumber,
		scalar @ClusterKnownDown );
    $Hawkeye->StoreIndex( "Cluster_KnownDownCount" );

    # Absent list
    $Hash->Add( "Absent_List",
		HawkeyePublish::TypeString,
		join( " ", sort @Absent ) );
    $Hawkeye->StoreIndex( "Absent_List" );

    # Number of nodes listed as down, but ping ok
    $Hash->Add( "Down_PingOkCount",
		HawkeyePublish::TypeNumber,
		scalar @NotDown );
    $Hawkeye->StoreIndex( "Down_PingOkCount" );
    $Hash->Add( "Down_PingOkList",
		HawkeyePublish::TypeString,
		join( " ", sort @NotDown ) );
    $Hawkeye->StoreIndex( "Down_PingOkList" );
}


# Run condor_status -total -run & parse it's output..
sub RunTotal( $$ )
{
    my $Parms = shift;
    my $Prefix = shift;

    # Run it..
    my $Cmd = "condor_status -total $Parms";
    if ( ! open( TOTAL, "$Cmd|" ) )
    {
	print STDERR "Can't get total info\n";
	return;
    }

    # Add it to the prefix list
    $Hawkeye->StoreIndex( $Prefix );

    # Add an _ to it..
    $Prefix .= "_";

    # "Global" info..
    my @FieldNames;

    # Parse the output...
    my @ArchList;
    while ( <TOTAL> )
    {
	chomp;
	s/^\s+//g;
	next if ( $_ eq "" );

	# Header line?
	if ( /Machines/ )
	{
	    @FieldNames = split( /\s+/, $_ );
	}
	elsif ( ! /omit/i )
	{
	    my ( $Arch, @Values ) = split;

	    next if (  (! $Config{DoArchDetail}) && ( $Arch ne "Total" )  );
	    push @ArchList, $Arch;
	    foreach my $Field ( 0 .. $#Values )
	    {
		my $Attr = $Prefix . $Arch . "_" . $FieldNames[$Field];
		$Hash->Add( $Attr, HawkeyePublish::TypeAuto, $Values[$Field] );
	    }
	}
    }
    $Hash->Add( $Prefix . "ArchList",
		HawkeyePublish::TypeString,
		join( " ", @ArchList ) )
	if ( $#ArchList >= 0 );

    # Done
    close( TOTAL );
}

# Run condor_status -sub & parse it's output..
sub RunSubmit(  )
{
    # Run it..
    my @Fields =
	(
	 { Format => "%s",
	   Type => HawkeyePublish::TypeString,
	   Name => "Name",
	   Munge => 1 },
	 { Format => "%s",
	   Type => HawkeyePublish::TypeString,
	   Name => "Machine",
	   Munge => 0 },
	 { Format => "%d",
	   Type => HawkeyePublish::TypeNumber,
	   Name => "RunningJobs",
	   Munge => 0 },
	 { Format => "%d",
	   Type => HawkeyePublish::TypeNumber,
	   Name => "IdleJobs",
	   Munge => 0 },
	 { Format => "%d",
	   Type => HawkeyePublish::TypeNumber,
	   Name => "HeldJobs",
	   Munge => 0 },
	);

    my $Cmd = "condor_status -submit";
    foreach my $Field ( @Fields )
    {
	$Cmd = $Cmd .
	    " -format \"" . $Field->{Format} . " \" " . $Field->{Name};
    }
    $Cmd = $Cmd . " -format \"\\n\" Name";
    if ( ! open( SUB, "$Cmd|" ) )
    {
	print STDERR "Can't get submit info\n";
	return;
    }

    # Parse the output...
    my $SubmitNo = 0;
    my %Totals;
    while ( <SUB> )
    {
	chomp;
	next if ( $_ eq "" );
	$SubmitNo++;

	# Split it up, crunch it out
	my @Values = split;
	warn "Wrong data size ($_) : " if ( $#Values != $#Fields );
	for my $FieldNo ( 0 .. $#Fields )
	{
	    my $Name = $Fields[$FieldNo]->{Name};
	    my $Attr = sprintf "Submit_%02d_%s", $SubmitNo, $Name;

	    # Munge the email address to deter spambots
	    if (  ( $Fields[$FieldNo]->{Munge} ) &&
		  ( $Config{DoSubmitMunge} )  )
	    {
		$Values[$FieldNo] =~ s/@/ at /;
	    }

	    # Finally, publish it
	    $Hash->Add( $Attr, $Fields[$FieldNo]->{Type}, $Values[$FieldNo] )
		if ( $Config{DoSubmitDetail} );

	    # If it's a number, sum it up
	    if ( $Fields[$FieldNo]->{Type} eq HawkeyePublish::TypeNumber )
	    {
		$Totals{$Name} = 0 if ( ! exists $Totals{$Name} );
		$Totals{$Name} += $Values[$FieldNo];
	    }
	}
    }
    $Hash->Add( "Submit_Count", HawkeyePublish::TypeNumber, $SubmitNo );
    foreach my $Name ( keys %Totals )
    {
	$Hash->Add( "Submit_Total_$Name",
		    HawkeyePublish::TypeNumber,
		    $Totals{$Name} );
    }

    # Done
    close( SUB );
}

# Run condor_status -ckpt & parse it's output..
sub RunCheckPoint(  )
{
    my $Cmd = "condor_status -ckpt";
    if ( ! open( CKPT, "$Cmd|" ) )
    {
	print STDERR "Can't get checkpoint info\n";
	return;
    }

    # Checkpoint server hash
    my %Servers;

    # Parse the output...
    while ( <CKPT> )
    {
	s/^\s+//g;
	chomp;
	next if ( $_ eq "" );

	# Split it up, crunch it out
	my @Values = split;

	# Total line
	if ( $Values[0] eq "Total" )
	{
	    $Hash->Add( "Ckpt_Total_Servers", HawkeyePublish::TypeNumber, $Values[1] );
	    $Hash->Add( "Ckpt_Total_AvailDisk", HawkeyePublish::TypeNumber, $Values[2] );
	}
	# Server line
	elsif ( $Values[1] =~ /^\d+$/ )
	{
	    my $Fqdn = $Values[0];
	    my $Name = $Fqdn;

	    # Build the logical name, check for conflicts..
	    $Name =~ s/^(\w+).*/$1/;
	    $Name = $Fqdn if ( exists ( $Servers{$Name} ) );
	    while ( exists ( $Servers{$Name} ) )
	    {
		$Name .= "_";
	    }

	    # Stuff it in the hash...
	    $Servers{$Name}{FullName} = $Fqdn;
	    $Servers{$Name}{AvailDisk} = $Values[1];
	    $Servers{$Name}{Subnet} = $Values[2];
	}
    }

    # Publish it all...
    my %Types = ( FullName => HawkeyePublish::TypeString,
		  AvailDisk => HawkeyePublish::TypeNumber,
		  Subnet => HawkeyePublish::TypeString, );
    foreach my $Server ( keys %Servers )
    {
	foreach my $Field ( keys %{$Servers{$Server}} )
	{
	    my $Type = HawkeyePublish::TypeAuto;
	    $Type = $Types{$Field} if ( exists $Types{$Field} );
	    $Hash->Add( "Ckpt_" . $Server . "_" . $Field, $Type,
			$Servers{$Server}{$Field} );
	}
    }

    # And, the server list
    $Hash->Add( "Ckpt_Servers", HawkeyePublish::TypeString, join( " ", keys %Servers  ) );

    # Done
    close( CKPT );
}
