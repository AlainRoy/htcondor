#! /usr/bin/perl -w
use strict;

# Update the module include path
BEGIN
{
    my $Dir = $0;
    if ( $Dir =~ /(.*)\/.*/ )
    {
	push @INC, "$1";
    }
}
use HawkeyePublish;
use HawkeyeLib;

# Prototypes
sub Init( );
sub RunIt( );

# Setup the hawkeye stuff
my $Hawkeye;
my $Hash;
my @Params = "";
my $CmdLine = join( " ", $0, @ARGV );

# Do it
Init();
RunIt();

sub Init()
{
    HawkeyeLib::DoConfig( );

    $Hawkeye = HawkeyePublish->new;
    $Hawkeye->Quiet( 1 );
    $Hawkeye->AutoIndexSet( 1 );

    # Read the config info..
    $Params[0] = HawkeyeLib::ReadConfig( "_Param0", "true" );
    $Params[1] = HawkeyeLib::ReadConfig( "_Param1", "xyzzy" );
    $Params[2] = HawkeyeLib::ReadConfig( "_Param2", 1 );
    $Params[3] = HawkeyeLib::ReadConfig( "_Param3", "/bin/echo");
    $Params[4] = HawkeyeLib::ReadConfig( "_Param4", 0 );

    # Finally, parse the command line...
    foreach my $Arg ( @ARGV )
    {
	# Cluster on/off
	if ( $Arg =~ /-param(\d)=(.*)/ )
	{
	    $Params[$1] = $2;
	}
	else
	{
	    print STDERR "Unknown option '$Arg'\n";
	    print STDERR "Usage: test [name [options]]\n";
	    print STDERR
		"  [name]         \tModules logical name\n" .
		"  [-paramN=X]    \tSet parameter N to X\n" ;
	    exit 1;
	}
    }
}

# Do the real work here...
sub RunIt()
{

    # Start things off
    $Hash = HawkeyeHash->new( \$Hawkeye, "" );

    $Hash->Add( "CmdLine", "s", $CmdLine );
    $Hash->Add( "ModuleName", "s", HawkeyeLib::GetModuleName() );

    foreach my $Num ( 0 .. $#Params )
    {
	my $Type = ( $Params[$Num] =~ /\D/ ) ? "s" : "n";
	$Hash->Add( "Param$Num", $Type, $Params[$Num] );
    }

    # Ok, summary is done...
    $Hash->Store( );
    $Hawkeye->Publish( );
}
