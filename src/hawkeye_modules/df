#! /usr/bin/perl -w
use strict;

# Update the module include path
BEGIN
{
    my $Dir = $0;
    if ( $Dir =~ /(.*)\/.*/ )
    {
	push @INC, "$1";
    }
}
use HawkeyePublish;
use HawkeyeLib;

# My Hawkeye object
my $Hawkeye;
my $OsInfo = ();
my $OS;
my @OsInfo = (
	      # Any version of IRIX
	      { ostype => "IRIX.*", osrev => ".*",
		df =>
		{ command => "df",
		  fs => 0,
		  size => 2,
		  used => 3,
		  avail => 4,
		  pused => 5,
		  mnt => 6 },
		mount =>
		{ command => "/sbin/mount",
		  mountpoint => 0,
		  fs => 2, },
	      },
	      # Any version of HP-UX
	      { ostype => "HP-UX", osrev => ".*",
		df =>
		{ command => "bdf",
		  fs => 0,
		  size => 1,
		  used => 2,
		  avail => 3,
		  pused => 4,
		  mnt => 5 },
		mount =>
		{ command => "/sbin/mount",
		  mountpoint => 0,
		  fs => 2, },
	      },
	      # Solaris
	      { ostype => "SunOS", osrev => "5",
	        df =>
		{ command => "df -k",
		  fs => 0,
		  size => 1,
		  used => 2,
		  avail => 3,
		  pused => 4,
		  mnt => 5 },
		mount =>
		{ command => "/sbin/mount",
		  mountpoint => 0,
		  fs => 2, },
	      },
	      # SunOS 4.x
	      { ostype => "SunOS", osrev => "4",
		df =>
		{ command => "df",
		  fs => 0,
		  size => 1,
		  used => 2,
		  avail => 3,
		  pused => 4,
		  mnt => 5 },
		mount =>
		{ command => "/sbin/mount",
		  mountpoint => 0,
		  fs => 2, },
	      },
	      # Any Linux
	      { ostype => "Linux", osrev => ".*",
		df =>
		{ command => "df",
		  fs => 0,
		  size => 1,
		  used => 2,
		  avail => 3,
		  pused => 4,
		  mnt => 5 },
		mount =>
		{ command => "/bin/mount",
		  mountpoint => 2,
		  fs => 0, },
	      }
	  );
my %DfFields = (
		fs => "fs",
		size => "size",
		used => "used",
		avail => "avail",
		pct_used => "pused",
		mnt => "mnt"
	       );

main();

# Main
sub main
{
    $| = 1;
    Init();
    RunIt();
}

# Initialize
sub Init
{
    HawkeyeLib::DoConfig( );

    $Hawkeye = HawkeyePublish->new;
    $Hawkeye->Quiet( 1 );
    $Hawkeye->AutoIndexSet( 0 );

    # Learn about our O/S
    $OS = HawkeyeLib::DetectOs( \@OsInfo );

    # Did we find a match?
    if ( ! $OS )
    {
	die "O/S Not defined\n";
    }
}

# ***********************************************
# Do the actual work
sub RunIt
{

    # Read the file system list (FSLIST)
    my $FsList = HawkeyeLib::ReadConfig(  "_fslist", "" );
    my @MountPoints = split( /,/, $FsList );


    # Get the real mount points
    my %RealMountPoints;
    my $CheckMountPoints = 0;
    my $OsMount = $OS->{mount};
    if ( open ( MOUNT, $OsMount->{command}."|" ) )
    {
	while ( <MOUNT> )
	{
	    chomp;
	    my @Mount = split;
	    if ( $Mount[1] ne "on" )
	    {
		print STDERR "df: I don't understand '$_'\n";
		next;
	    }
	    $CheckMountPoints++;
	    my $Fs = $Mount[$OsMount->{fs}];
	    my $MPoint = $Mount[$OsMount->{mountpoint}];
	    $RealMountPoints{$MPoint} = $Fs;
	}
	close( MOUNT );
    }

    my %DfOut;
    my $MountPoint;
    foreach $MountPoint (@MountPoints)
    {
	my $mount = $MountPoint;

	# Verify it
	if ( ! -d $mount )
	{
	    print STDERR "df: '$mount' is not a directory! (skipping)\n";
	    next;
	}
	if (  ( $CheckMountPoints ) && ( ! exists $RealMountPoints{$mount} )  )
	{
	    print STDERR "df: '$mount' is not a mount point! (skipping)\n";
	    next;
	}

	# Run df on it
	my $Cmd = $OS->{df}{command} . " $mount | grep -v Filesystem";
        chop( my $df_out = `$Cmd` );

	my @Tmp = split (/\s+/, $df_out);

	# Store into the 'DfOut' hash
	my $Key;
	foreach $Key ( keys %DfFields )
	{
	    $DfOut{$mount}{$Key} = $Tmp[$OS->{df}{$DfFields{$Key}}];
	}
    }

    # Store the fields used
    $Hawkeye->StoreValue( "FIELDS" ,
			  join( " ", keys %DfFields ),
			  HawkeyePublish::TypeString );

    # Now, walk through the point point array
    foreach $MountPoint ( keys %DfOut )
    {
	my $PublishName = $MountPoint;
	$PublishName = "root" if ( $PublishName eq "/" );

        # Clean up the published name...
        $PublishName =~ s/^\/$/root/;
        $PublishName =~ s/^\///;
        $PublishName =~ s/[\/\.]/_/g;

	# Publish to Hawkeye
	my $Key;
	$Hawkeye->StoreIndex( $PublishName );
	foreach $Key ( keys %DfFields )
	{
	    # Pull out & clean up the value, and store it away
	    my $Value = $DfOut{$MountPoint}{$Key};
	    my $Name = $PublishName . "_" . $Key;
	    if ( $Value =~ /^(\d+)\%?$/ )
	    {
		$Value = $1;
		$Hawkeye->StoreValue( $Name,
				      $Value,
				      HawkeyePublish::TypeNumber );
	    }
	    else
	    {
		$Hawkeye->StoreValue( $Name,
				      $Value,
				      HawkeyePublish::TypeAuto );
	    }
	}
    }

    $Hawkeye->Publish( );
}
