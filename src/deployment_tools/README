Programs
=========
+ condor_config_bind:
  - Purpose: Dynamically bind a local configuration file into an
    already created configuration. It takes a series of configuration
    files to bind together, then creates a single configuration file
    that lists the given configuration files as local_configs.  This
    is particularly useful want to modify a configuration but can't
    actually make any changes to the global config file (even
    changing the list of local config files).
  - Usage:  condor_config_bind <-o output_file_name>
    <condor_config_file1> <condor_config_file2>
    [condor_config_file3 condor_config_file4 ...]
    [-help]

+ install_release:
  - Purpose: It installs an arbitrary software release into a named
    directory.  In addition it creates a log of the installed files for
    easy uninstallation.
  - Usage: install_release [-f] [-help] <binary_tar>
    [-basedir base_dir] [-log log_file_name]
    [-wget] [-globuslocation globus_location]
    [-o other_file1 other_file2 ...]
  - Subprograms:
    + tar
    + wget
    + gzip
    + globus-url-copy
  - Supported Release Types
    + tar
    + gzip
    + gzip'ed tar
  - Supported File Transfer Protocols
    + mounted file system
    + http
    + ftp
    + gsiftp

+ condor_local_start
  - Purpose: Creates a local_dir directory structure for condor to run
    in (log/, spool/, execute/).  Sets required environment variables
    needed to start condor, based on the local_dir and global
    configuration file.  Dynamically binds a local configuration file
    into the already defined configuration of the current condor
    installation. Performs pre-start diagnostics to ensure all of the
    needed binaries are present.  And finally starts condor with a
    midwife.  Additionally, this program can install pre-made log,
    execute, and/or spool directories by specifying the archived
    versions on the command line.  Uses wget or globus-url-copy to
    fetch the archives, defaults to globus-url-copy with a globus
    installation location of /opt/globus. 
  - Usage: condor_local_start <-configfile config_file> <-basedir release_dir>
    [-localdir local_install_dir] [-localconfig local_config_file]
    [-logarchive log_archive] [-spoolarchive spool_archive]
    [-execarchive exec_archive]
    [-linklock] [-flock] [-pid] [-artifact artifact_file]
    [-wget] [-globuslocation globus_location]
    [-dyn] [-help]\n
  - Subprograms:
    + linklock_midwife
    + flock_midwife
    + uniq_pid_midwife
    + condor_config_val
    + condor_config_bind
    + condor_install_local
    + condor_master
  - Condor Configuration Variables:
    + DEPLOYMENT_REQUIRED_EXECS
    + DEPLOYMENT_REQUIRED_DIRS
    + DEPLOYMENT_RECOMMENDED_EXECS
    + DEPLOYMENT_RECOMMENDED_DIRS
   
+ condor_cold_start
  - Purpose: Start condor on a machine that has no condor
    installation on it.  Essentially, cold_start binds install_release
    and local_start together, passing information from the install
    process to the start process.  In addition, it has the
    functionality to determine the local arch if one is not
    specified. Additionally, this program can install pre-made log,
    execute, and/or spool directories by specifying the archived
    versions on the command line. Installs the condor mobile package
    using either wget or globus-url-copy.  Defaults to globus-url-copy
    with a globus installation location of /opt/globus.
  - Usage: condor_cold_start [-basedir base_dir] <-configfile config_file>
    [-force] [-dyn]
    [-fg]
    [-setuponly || -runonly]
    [-arch architecture_string][-site install_repository_site]
    [-localdir local_dir] [-runlocalconfig local_config_file]
    [-logarchive log_archive] [-spoolarchive spool_archive].
    [-execarchive exec_archive]
    [-linklock] [-flock] [-pid] [-artifact artifact_file]
    [-wget] [-globuslocation globus_location]
    [-help]
  - Subprograms:
    + uname
    + install_release
    + condor_local_start

+ condor_local_stop
  - Purpose: Shutsdown a locally running condor.  Unlike condor_off it
    does not need any environment set up prior to use.  It creates a
    working condor environment, including any local configs
    dynamically bound into condor by local_start.  Locates the
    required condor binaries.  Then it determines whether the it is
    safe to shut condor down (i.e, whether the schedd has any jobs in
    any status).  Finally, it calls condor_off and ensures that the
    master has shutdown using an undertaker, the undertaker must match
    the corresponding midwife that birthed the master.  Optionally,
    the user can specify to shutdown regardless of whether there are
    jobs in the Q or not.  Additionally, this program can archive the
    log, execute, and/or spool directories.
  - Usage: condor_local_stop [-f] 
    <-configfile condor_config_file> <-basedir release_dir>
    [-linklock] [-flock] [-pid] [-artifact artifact_file] [-timeout max]
    [-localconfig config_file] [-help]
  - Subprograms:
    + condor_q
    + condor_config_val
    + condor_config_bind
    + condor_off
    + linklock_undertaker
    + flock_undertaker
    + uniq_pid_undertaker

+ cleanup_release 
  - Purpose: Uninstalls a previously installed software release done
    by install_release.  It plays the install log in reverse,
    deleting the files as it goes.  Each delete is written to the
    install log to allow recovery from a crash.
  - Usage: cleanup_release [-help] <install_log>

+ condor_cold_stop
  - Purpose: Stops and uninstalls a cold_started condor.  Binds
    local_stop and cleanup into a single interface. Optionally
    archives the log, execute, and/or spool directories.
  - Usage: condor_cold_stop [-force] <-configfile condor_config_file>
    [-basedir base_dir]
    [-localdir local_dir] [-runlocalconfig config_file]
    [-cleaninstall] [-cleanlocal] [-stop]
    [-logarchive] [-spoolarchive] [-execarchive]
    [-linklock] [-flock] [-pid] [-artifact artifact_file]
    [-nogurl] [-globuslocation globus_location]
  - Subprograms
    + condor_local_stop
    + cleanup_release
    + condor_cleanup_local

+ condor_install_local
  - Purpose: Creates a local directory structure (log, spool,
    execute).  Can also extract these directories from an archive that
    is located on the mounted file system or can be fetched using ftp,
    http, for gsiftp.  Uses wget or globus-url-copy to fetch the
    archives, defaults to globus-url-copy with a globus installation
    location of /opt/globus. 
  - Usage: condor_install_local <-localdir local_dir>
    [-logarchive log_archive] [-spoolarchive spool_archive]
    [-execarchive exec_archive]
    [-configname config_name]
    [-wget] [-globuslocation globus_location]
    [-f][-help]
  - Subprograms:
    + install_release (to unpack any archives)

+ condor_cleanup_local
  - Purpose: Cleanup and possibly archive local directory structure
    (log, spool, execute).  Can archive to a mounted file system, ftp
    server, for grid ftp server.
  - Usage: condor_cleanup_local <-localdir local_dir>
    [-logarchive log_archive] [-spoolarchive spool_archive]
    [-execarchive exec_archive]
    [-nogurl] [-globuslocation globus_location]
    [-help]
  - Subprograms:
    + tar
    + gzip
    + globus-url-copy

+ flock_midwife
  - Purpose: Births a program, creating an artifact of the life of
    this process, in the form of a flock'ed file.  As long as the file
    is flock'ed we can assume program is alive.  The midwife blocks
    until the program exits.  This program will not work on a NFS
    server that is not running an associated lock server.
  - Usage: flock_midwife [--file lockfile] <program> [program_args]

+ flock_undertaker
  - Purpose: Determine whether an flock midwifed program is still
    running. This program can either block until the specified program
    exits or return immediately with 1 for alive and 0 for dead.
  - Usage: flock_undertaker [--file file][--block]
  
+ linklock_midwife
  - Purpose: Births a program, creating an artifact of the life of
    this process, in the form of a link locked file.  As long as the
    file is locked we can assume program is alive.  The midwife
    blocks until the program exits.  This program may work on NFS.
  - Usage: linklock_midwife [--file lockfile] <program> [program_args]

+ linklock_undertaker
  - Purpose: Determine whether an linklock midwifed program is still
    running. This program can either block until the specified program
    exits or return immediately with 1 for alive and 0 for dead.
  - Usage: linklock_midwife [--file lockfile] <program> [program_args]
