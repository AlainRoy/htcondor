
- maxjobs may be buggy (see litvin emails)

- document, document, document
  - asynchronous PRE/POST
  - check CVS logs for more...
  - update README.txt & code comments

- scalability testing
- add recovery scenarios to test suite
- test stupid dags
  - no ready jobs
  - cycles
  - no jobs

- recursive-DAG-aware tools (condor_submit DAG-hunting, etc.)

? move lockfile handling to dagman_main & unlink only if normal exit

=== bugs

* In a DAG containing multiple "sister" jobs, but no parent-child
  relationships, and with Maxjobs=1 set, DAGman is quitting after
  finding that a "leaf" node or job has failed, rather than trying to
  go as far as possible and run other jobs.

x naming a job "executable" in the dag file hangs DAGMan? (per Jim
  Amundson) [could never be reproduced -- prob his mistake...]

=== new features

- replace _done kludge in script.C with a new job state?

- from skoranda:

1) A DAG file is at some level a "meta language", and so I think it
   would be useful to have some rudimentary programm language
   constructs.  Variables or macros, for example, would be
   useful. Then I could write something like

   HOME_PATH = /home/skoranda/LDR/libexec

   Job JobA HOME_PATH/JobA.sub
   Job JobB HOME_PATH/JobB.sub

   PARENT JobA CHILD JobB

2) It seems from experiment that when DAGman is limited by the number
   of jobs that can run at any given time (-MaxJobs 2 in my case) that
   it proceeds through the DAG by running all jobs at the first level
   in the tree, then the second level, and so on.

   I would prefer to have DAGman work down all the way to the lowest
   level or leaf before moving to the next branch. Perhaps there could
   be a flag to toggle these two modes?

x support throttling of PRE & POST scripts
x get rid of GetSubmittedJob() code and replace with a waiting-job
  list, etc.
x get DAGMan job id and use in submit_submit() rather than "(-1.-1)"


=== Miron Ideas ===

- when you recover the log, every time you see a submit, make sure the
  waiting queue of that job is empty

- use liberal assert()s

- talk w/Miron about adding a submit API to condor as part of my
  DAGMan work
