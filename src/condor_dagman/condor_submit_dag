#!/s/std/bin/perl

###########################################################################
#
#  This is condor_submit_dag.  It takes a DAG input file to be used by
#  condor_dagman, analyzes it for correctness and gleens important
#  information.  Then, it creates a file used to submit condor_dagman
#  to Condor as a "meta-scheduler" with this DAG file.  Finally,
#  unless you specify the "-no_submit" option to condor_submit_dag, it
#  actually submits this newly-created file to Condor, which spawns 
#  the condor_dagman binary on your local machine (and will restart it
#  if the local machine crashes, etc).  
#
#  Other than setting the proper path to perl above, you should not
#  need to edit this script at all.
#
#  condor_submit_dag by Derek Wright <wright@cs.wisc.edu> 1/8/99
#
###########################################################################

print "\n";
# Parse command-line args
$submit = 1;
$force = 0;
$max_jobs = 0;
$notification = "";
while( $_ = shift ) {
  SWITCH: {	    
    if( /^-no_s.*/ ) {
	$submit = 0;
	last SWITCH;
    } 
    if( /^-v.*/ ) {
	$verbose = 1;
	last SWITCH;
    } 
    if( /^-f.*/ ) {
	$force = 1;
	last SWITCH;
    } 
    if( /^-not.*/ ) {
	$notification = shift;
	if( ! grep(/$notification/i, ("always", "complete", "error", "never")) ) {
	    print "Invalid argument to -notification option: $notification\n";
	    &usage();
	}
	last SWITCH;
    }
    if( /^-l.*/ ) {
	$job_log = shift;
	if( ! $job_log ) {
	    &usage();
	}
	last SWITCH;
    }
    if( /^-m.*/ ) {
	$max_jobs = shift;
	if( ! $max_jobs ) {
	    &usage();
	}
	if( !($max_jobs =~ /^\d+$/) ) {
	    print "ERROR: Invalid argument \"$max_jobs\" to -maxjobs.\n",
	    "You must specify a number.\n\n";
	    &usage();
	}
	last SWITCH;
    }
    if( /^-r/ ) {
	$remote_schedd = shift;
	if( ! $remote_schedd ) {
	    &usage();
	}
	$remote_schedd = "-r $remote_schedd";
	last SWITCH;
    }
    $dagfile = $_;
  }
}

if( ! $dagfile ) {
    &usage();
} else {
    # Setup some filenames we're going to want to use.
    $lib_log = "$dagfile.lib.out";
    $debug_log = "$dagfile.dagman.out";
    $sched_log = "$dagfile.dagman.log";
    $sub_file = "$dagfile.condor.sub";
    $rescue_file = "$dagfile.rescue";
}


# See if there is an executable 'condor_dagman' anywhere in our path.
foreach $dir ( split /:/, $ENV{PATH} )
{
    $cur_path = "$dir/condor_dagman";
    if( -x $cur_path ) {
        $dagman_path = $cur_path;
        last;
    }
}
$dagman_path || 
    die "Can't find the condor_dagman exectuable in your PATH, aborting.\n";

# Make sure all the files we're going to use are available, and if
# not, exit with an error message.  If we were given "-force", don't
# print the error and exit, just remove them.
&check_output_files();

# Figure out what the log file should be called.  If there are
# multiple log files mentioned, this function will abort.  If we were
# told on the command-line, we just use that, and print a warning
# message.  If we were told not to check the whole thing, we just read
# the first one out and use that. 
if( $job_log ) {
    print "Using \"$job_log\" as the log file shared by all jobs in this DAG.\n";
    print "Please be sure you know what you're doing and that all jobs use this file.\n";
} else {
    print "Checking your DAG input file and all submit files it references.\n";
    print "This might take a while... \n";
    $job_log = &parse_dag_file();
    print "Done.\n";
}


# Create the submit file used to submit DAGMan as a scheduler universe
# job to Condor. 
&write_submit_file();

# Print closing remarks, and actually submit the DAG if that's wanted.
print "-----------------------------------------------------------------------\n";
print "File for submitting this DAG to Condor   : $sub_file\n";
print "Log of DAGMan debugging messages         : $debug_log\n";
print "Log of Condor library debug messages     : $lib_log\n";
print "Log of the life of condor_dagman itself  : $sched_log\n";
print "\n";
print "Condor Log file for all jobs of this DAG : $job_log\n";

if( $submit ) {
    print `condor_submit $remote_schedd $sub_file`;
} else {
    print "-no_submit given, not submitting DAG to Condor.  You can do this with:\n";
    print "\"condor_submit $sub_file\"\n";
}
print "-----------------------------------------------------------------------\n";
exit( 0 );


#################################################################
## Subroutines
#################################################################

sub usage {
    print "Usage: condor_submit_dag [options] filename\n";
    print "  where filename is the name of your DAG input file\n";
    print "  and where [options] is one or more of:\n";
    print "    -no_submit          (DAG is not submitted to Condor)\n";
    print "    -verbose            (Verbose error messages from condor_submit_dag)\n";
    print "    -force              (Overwrite files condor_submit_dag uses if they exist)\n";
    print "    -maxjobs number     (Maximum number of jobs ever submitted at once)\n";
    print "    -log filename       (Specify the log file shared by all jobs in the DAG)\n";
    print "    -notification value (Determines how much email you get from Condor\n";
    print "         about the life of the condor_dagman job.  'value' must be\n";
    print "         one of \"always\", \"never\", \"error\", or \"complete\".\n";
    print "         See the condor_submit man page for details.)\n";
    exit( 1 );
}

sub parse_dag_file {
    local( %cmd_files, %log_names, $log_name, $had_error, $did_one, $len );
    $had_error = 0;
    $did_one = 0;
    open( DAG, "<$dagfile" ) || die "Can't open $dagfile for reading: $!\n";
    while( <DAG> ) {
		while (/^(.*[^\s])\s+\\\s*$/) { 	# This is the stuff to do the \ continuation
			$thisdl = $1;					# lose the end space and slash
			$nextdl = <DAG>; 				# grab the next line
			$nextdl =~ s/^\s*//;			# remove the beginning whitespace
			$_ = $thisdl ." ". $nextdl;		# slam them together
		}
	if( /^job\s*(\S*)\s*(\S*)$/i ) {
	    $cmd_files{$2} = 1;
	}
    }
    close DAG;
    foreach $file (sort keys %cmd_files ) {
	if( ! open( FOO, "<$file" ) ) {
	    print "\nCan't open command file $file for reading: $!\n";
	    print "Either create $file or re-run with the \"-log\" option.\n";
	    if( ! $verbose ) {
		print "Use the \"-verbose\" option for a more verbose error message.\n";
		exit( 1 );
	    }	    
	    print "If all the command files in your DAG don't exist now, consider running\n";
	    print "condor_submit_dag with the \"-log filename\" option to specify the log file\n";
	    print "shared by all jobs in your DAG.  This avoids this check.\n";
	    print "If you do so, you must be sure those files are created when they are needed,\n";
	    print "probably by using the PRE and POST directives in your DAG file.\n";
	    print "See the DAGMan manual for more details.\n";
	    exit( 1 );
	}
	while( <FOO> ) {
	    if( /^log\s*=\s*(.*)/i ) {
		$log_names{$file} = $1;
		if( ! $log_name ) { $log_name = $1; }
	    }
	}
	close FOO;
	$did_one = 1;
    }
    foreach $file (sort keys %log_names ) {
	$len = length $file;
	if( $log_names{$file} ne $log_name ) {
	    print "ERROR: log file specified in $file is not \"$log_name\".\n";
	    $had_error = 1;
	}
    }
    if( $had_error ) {
	print "\nAll jobs submitted in this DAG must share the same log file.  ";
	print "Please look\nat all the submit files and make sure they each specify ";
	print "the same filename\nin their \"log = filename\" settings.\n\n";
	if( $verbose ) {
	    print "The submit files your DAG file mentions and the log file each uses are:\n";
	    foreach $file (sort keys %cmd_files ) {
		printf( "   %-20s%s\n", $file, $log_names{$file} );
	    }
	} else {
	    print "To see all the log files you mention in each submit file you use, ";
	    print "run\ncondor_submit_dag again with the -verbose option.\n";
	}
	exit( 1 );
    }
    if( ! $did_one ) {
	print "\nERROR: Your input file, \"$dagfile\" contains no jobs.\n",
	"Please verify that this is really your DAG input file.\n";
	exit( 1 );
    }
    return $log_name;
}


sub write_submit_file {
    local( $args );
    local( $path ) = $ENV{PATH};

    open( SUBMIT, ">$sub_file" ) 
	|| die "Can't open $sub_file for writing: $!\n";

    print SUBMIT "# Filename: $sub_file\n";
    print SUBMIT "# Generated by condor_submit_dag $dagfile\n";
    print SUBMIT "universe\t= scheduler\n";
    print SUBMIT "executable\t= $dagman_path\n";
    print SUBMIT "output\t\t= $debug_log\n";
    print SUBMIT "error\t\t= $lib_log\n";
    print SUBMIT "log\t\t= $sched_log\n";
    $args = "-f -t -l . -Debug 3 -Lockfile $dagfile.lock";
    $args = $args . " -Condorlog $job_log -Dag $dagfile";
    $args = $args . " -Rescue $rescue_file";
    if( $max_jobs ) {
	$args = $args . " -MaxJobs $max_jobs";
    }
    print SUBMIT "arguments\t= $args\n";
    print SUBMIT "environment\t= PATH=$path\n";
    if( $notification ) {
	print SUBMIT "notification\t= $notification\n";
    }
    print SUBMIT "queue\n";

    close SUBMIT;
}


sub check_output_files {
    local( $had_error ) = 0;
    if( $force ) {
	unlink( "$sub_file" );
	unlink( "$debug_log" );
	unlink( "$sched_log" );
	unlink( "$lib_log" );
	unlink( "$rescue_file" );
    } else { 
	if( -f $sub_file ) {
	    $had_error = 1; 
	    print "ERROR: \"$sub_file\" already exists.\n";
	}
	if( -f $lib_log ) {
	    $had_error = 1; 
	    print "ERROR: \"$lib_log\" already exists.\n";
	}
	if( -f $debug_log ) {
	    $had_error = 1; 
	    print "ERROR: \"$debug_log\" already exists.\n";
	}
	if( -f $sched_log ) {
	    $had_error = 1; 
	    print "ERROR: \"$sched_log\" already exists.\n";
	}
	if( -f $rescue_file ) {
	    $had_error = 1;
	    print "ERROR: \"$rescue_file\" already exists.\n",
	    "  You may want to resubmit your DAG using that file, instead of ",
	    "\"$dagfile\".\n",
	    "  Look at the Condor manual for details about DAG rescue files.\n",
	    "  Please investigate and either remove \"$rescue_file\",\n",
	    "  or use that as the input to condor_submit_dag.\n";
	}
	if( $had_error ) {
	    print "\nSome file(s) needed by condor_submit_dag already exist.  ";
	    print "Either rename them,\nor use the \"-f\" option to force them ";
	    print "to be overwritten.\n";
	    exit( 1 );
	}
    }
}
