#!/bin/sh

if [ -d CVS ]; then
	echo "You probably don't want to do this in your source repository."
	echo "Try doing it in a build directory instead."
	exit 1
fi


##################################################
# Find imake.  
# If it doesn't yet exist, build it.
##################################################

if [ -d ../imake ] ; then
    IMAKEROOT="../imake"
elif [ -d ../../imake ] ; then
    IMAKEROOT="../../imake"
elif [ -d ../../../imake ] ; then
    IMAKEROOT="../../../imake"
else
	echo "Can't find the root directory for imake!"
	echo "You need a copy of imake build Condor."
	echo "Please make sure your version of the Condor source"
	echo "contains a directory called \"imake\" that is at the"
	echo "top-level of your source tree (next to \"src\", \"config\")"
	exit 1
fi

IMAKE="$IMAKEROOT/imake"
if [ ! -x $IMAKE ] ; then
    echo "Attemping to build imake from source"
    pwd=`pwd`
    cd $IMAKEROOT
    make
    cd $pwd
fi
if [ ! -x $IMAKE ] ; then
    # if it's not here yet, fatal error
    echo "Failed to build imake!"
p   exit 1
fi

# Now, find an appropriate cpp to use
IMAKECPP="$IMAKEROOT/imake_cpp"
if [ ! -x $IMAKECPP ] ; then
    if [ -f $IMAKECPP ] ; then
        rm -f $IMAKECPP
    fi	 
    echo '#!/bin/sh' > $IMAKECPP
    echo 'gcc -E -w $*' >> $IMAKECPP
    chmod 755 $IMAKECPP
fi
export IMAKECPP


##################################################
# Figure out the flags for imake to build Makefile
##################################################

arch=`uname -m`
osversion=`uname -r`
# Make sure if we get back something that begins with "IRIX" that we
# strip off anything after it (e.g. "IRIX64", etc).
os=`uname -s | sed 's/IRIX.*/IRIX/'`

ArchFlag=""
Opsys=""
Other=""
Other2=""

# kerberos discovery
if [ -f /p/condor/workspaces/kerberos/lib/libkrb5.a ] ; then
	KerbPath="-DKERBEROS_PATH=/p/condor/workspaces/kerberos"
	HasKerb="-DHAS_KERBEROS=YES"
	if [ -f /p/condor/workspaces/kerberos/lib/libk5crypto.a ] ; then
		KerbK5="-DKERBEROS_K5=YES"
	else
		KerbK5="-DKERBEROS_K5=NO"
	fi

	KerbFlags="$KerbPath $HasKerb $KerbK5"
elif [ -f /usr/kerberos/lib/libkrb5.a ] ; then
	KerbPath="-DKERBEROS_PATH=/usr/kerberos"
	HasKerb="-DHAS_KERBEROS=YES"
	if [ -f /usr/kerberos/lib/libk5crypto.a ] ; then
		KerbK5="-DKERBEROS_K5=YES"
	else
		KerbK5="-DKERBEROS_K5=NO"
	fi

	KerbFlags="$KerbPath $HasKerb $KerbK5"
elif [ -f /usr/local/lib/libkrb5.a ] ; then
	KerbPath="-DKERBEROS_PATH=/usr/local"
	HasKerb="-DHAS_KERBEROS=YES"
	if [ -f /usr/local/lib/libk5crypto.a ] ; then
		KerbK5="-DKERBEROS_K5=YES"
	else
		KerbK5="-DKERBEROS_K5=NO"
	fi

	KerbFlags="$KerbPath $HasKerb $KerbK5"
fi

# figure out where that annoying libgcc is... 
LIBGCC=`gcc -print-libgcc-file-name`
EgcsLib="-DLIB_GCC=$LIBGCC"

if [ $os = "HP-UX" -a $osversion = "B.10.20" ] ; then
	Opsys="-DIS_HPUX10"

elif [ $os = "OSF1" ] ; then
	if [ $osversion = "V4.0" ] ; then
		Opsys="-DIS_DUX4"
	elif [ $osversion = "V5.0" -o $osversion = "V5.1" ] ; then
		Opsys="-DIS_DUX5"
	fi

elif [ $os = "Linux" ]; then
	Opsys="-DIS_LINUX"
	if [ -f /lib/libc.so.6* ] ; then
		Other="-DIS_GLIBC"
	fi
	if [ -f /lib/libc-2.0.* ]; then
		Other2="-DIS_GLIBC20"
	elif [ -f /lib/libc-2.1.* ]; then
		Other2="-DIS_GLIBC21"
	elif [ -f /lib/libc-2.2.* ]; then
		Other2="-DIS_GLIBC22"
	fi
	if [ $arch = "i686" -o $arch = "i586" -o $arch = "i486" ] ; then
		ArchFlag="-DIS_I386"
	elif [ $arch = "alpha" ] ; then
		ArchFlag="-DIS_ALPHA"
	elif [ $arch = "ia64" ] ; then
		ArchFlag="-DIS_IA64"
	fi

elif [ $os = "SunOS" ]; then
	if [ $arch = "sun4m" -o $arch = "sun4u" ]; then
		ArchFlag="-DIS_SUN4X"
	elif [ $arch = "i86pc" ]; then
		ArchFlag="-DIS_X86"
	fi

	if [ $osversion = "5.5.1" ] ; then
		Opsys="-DIS_SOLARIS251"
	elif [ $osversion = "5.6" ] ; then
		Opsys="-DIS_SOLARIS26"
	elif [ $osversion = "5.7" ] ; then
		Opsys="-DIS_SOLARIS27"
	elif [ $osversion = "5.8" ] ; then
		Opsys="-DIS_SOLARIS28"
	elif [ $osversion = "5.9" ] ; then
		Opsys="-DIS_SOLARIS29"
	fi

elif [ $os = "IRIX" ] ; then
	if [ $osversion = "6.5" ] ; then
		Opsys="-DIS_IRIX65"
	else
		Opsys="-DIS_IRIX62"
	fi
else
	echo "Unknown O/S: OS=\"$os\" Version=\"$osversion\""
	exit 1
fi

##################################################
# Finally, call imake with all the flags
##################################################

echo $IMAKE -s Makefile $ArchFlag $Opsys $Other $Other2 $EgcsLib $KerbFlags -I../config -I../../config $*
$IMAKE -s Makefile $ArchFlag $Opsys $Other $Other2 $EgcsLib $KerbFlags -I../config -I../../config $*
