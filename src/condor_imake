#!/bin/sh

##################################################
# Determine operating system flavors
##################################################

os=`uname -s | sed 's/IRIX.*/IRIX/'`
if [ $os = "Darwin" ] ; then
	Imakecppflags="gcc -E -w  -no-cpp-precomp \$*"
else
	Imakecppflags="gcc -E -w \$*"
fi

##################################################
# Find imake.  
# If it doesn't yet exist, build it.
##################################################

IMAKE=imake
if [ X$USE_OLD_IMAKE = X ] ; then
if [ -d ../imake ] ; then
    IMAKEROOT="../imake"
elif [ -d ../../imake ] ; then
    IMAKEROOT="../../imake"
elif [ -d ../../../imake ] ; then
    IMAKEROOT="../../../imake"
else
	echo "Can't find the root directory for imake!"
	echo "You need a copy of imake build Condor."
	echo "Please make sure your version of the Condor source"
	echo "contains a directory called \"imake\" that is at the"
	echo "top-level of your source tree (next to \"src\", \"config\")"
	exit 1
fi

IMAKE="$IMAKEROOT/imake"
if [ ! -x $IMAKE ] ; then
    echo "Attemping to build imake from source"
    pwd=`pwd`
    cd $IMAKEROOT
    make
    cd $pwd
fi
if [ ! -x $IMAKE ] ; then
    # if it's not here yet, fatal error
    echo "Failed to build imake!"
	exit 1
fi

# Here we find out the vendor supplied cpp we should use, which is 
# incidentally the one that the X source code would use.
if [ -x "/lib/cpp" ]; then
	IMAKECPP=/lib/cpp
elif [ -x "/usr/ccs/lib/cpp" ]; then
	IMAKECPP=/usr/ccs/lib/cpp
elif [ -x "/usr/bin/cpp" ]; then
	IMAKECPP=/usr/bin/cpp
else
	echo "Please determine the path to the vendor cpp!"
	exit 1
fi
export IMAKECPP

# end of USE_OLD_IMAKE
fi

##################################################
# Finally, call imake with all the flags
##################################################
${IMAKE} -s Makefile -I../config -I../../config $*

