#!/bin/sh

##################################################
# Initialize some variables about our arch/os environment
##################################################

arch=`uname -m`
osrelease=`uname -r`
osversion=`uname -v`
# Make sure if we get back something that begins with "IRIX" that we
# strip off anything after it (e.g. "IRIX64", etc).
os=`uname -s | sed 's/IRIX.*/IRIX/'`

ArchFlag=""
Opsys=""
Other=""
Other2=""

# perform some irix specific initialization to determine ABI type
if [ "$os" = "IRIX" ]; then
	if [ "$osrelease" = "6.5" ]; then
		# Let's default the build for 6.5 to mips3 and N32
		IsMipsVersion=3
		IsMipsABI=N32
	else
		IsMipsVersion=2
		IsMipsABI=O32
	fi
fi

##################################################
# Determine compiler features and variousl compiler related libraries
##################################################

# Which gcc am I using?
CompilerPath=`which gcc`

# Find libgcc.a ( needed for all platforms )
tmp=`gcc -print-libgcc-file-name`
LibGcc="-DLIB_GCC=$tmp"

# discover the version of gcc I have
tmp=`((gcc -v) 2>&1) | tail -1 | perl  -ne '{/.*gcc version\s*(\S*).*/; print "$1\n"}'`


case "$tmp" in
	"egcs-2.91.66" )
		CompilerKind="-DIS_C_COMP_KIND_EGCS"
		CompilerMajor="-DIS_C_COMP_MAJOR_EGCS_2"
		CompilerMinor="-DIS_C_COMP_MINOR_EGCS_2_91"
		CompilerPatch="-DIS_C_COMP_PATCH_EGCS_2_91_66"
		;;
	"2.95.3" )
		CompilerKind="-DIS_C_COMP_KIND_GCC"
		CompilerMajor="-DIS_C_COMP_MAJOR_GCC_2"
		CompilerMinor="-DIS_C_COMP_MINOR_GCC_2_95"
		CompilerPatch="-DIS_C_COMP_PATCH_GCC_2_95_3"
		;;
	"2.95.4" )
		CompilerKind="-DIS_C_COMP_KIND_GCC"
		CompilerMajor="-DIS_C_COMP_MAJOR_GCC_2"
		CompilerMinor="-DIS_C_COMP_MINOR_GCC_2_95"
		CompilerPatch="-DIS_C_COMP_PATCH_GCC_2_95_4"
		;;
	"2.96" )
		CompilerKind="-DIS_C_COMP_KIND_GCC"
		CompilerMajor="-DIS_C_COMP_MAJOR_GCC_2"
		CompilerMinor="-DIS_C_COMP_MINOR_GCC_2_96"
		CompilerPatch="-DIS_C_COMP_PATCH_GCC_2_96_0"
		;;
	"3.0" )
		CompilerKind="-DIS_C_COMP_KIND_GCC"
		CompilerMajor="-DIS_C_COMP_MAJOR_GCC_3"
		CompilerMinor="-DIS_C_COMP_MINOR_GCC_3_0"
		CompilerPatch="-DIS_C_COMP_PATCH_GCC_3_0_0"
		;;
	"3.1" )
		CompilerKind="-DIS_C_COMP_KIND_GCC"
		CompilerMajor="-DIS_C_COMP_MAJOR_GCC_3"
		CompilerMinor="-DIS_C_COMP_MINOR_GCC_3_1"
		CompilerPatch="-DIS_C_COMP_PATCH_GCC_3_1_0"
		;;
	"3.2" )
		CompilerKind="-DIS_C_COMP_KIND_GCC"
		CompilerMajor="-DIS_C_COMP_MAJOR_GCC_3"
		CompilerMinor="-DIS_C_COMP_MINOR_GCC_3_2"
		CompilerPatch="-DIS_C_COMP_PATCH_GCC_3_2_0"
		;;
	"3.2.1" )
		CompilerKind="-DIS_C_COMP_KIND_GCC"
		CompilerMajor="-DIS_C_COMP_MAJOR_GCC_3"
		CompilerMinor="-DIS_C_COMP_MINOR_GCC_3_2"
		CompilerPatch="-DIS_C_COMP_PATCH_GCC_3_2_1"
		;;
	"3.2.2" )
		CompilerKind="-DIS_C_COMP_KIND_GCC"
		CompilerMajor="-DIS_C_COMP_MAJOR_GCC_3"
		CompilerMinor="-DIS_C_COMP_MINOR_GCC_3_2"
		CompilerPatch="-DIS_C_COMP_PATCH_GCC_3_2_2"
		;;
	"3.3" )
		CompilerKind="-DIS_C_COMP_KIND_GCC"
		CompilerMajor="-DIS_C_COMP_MAJOR_GCC_3"
		CompilerMinor="-DIS_C_COMP_MINOR_GCC_3_3"
		CompilerPatch="-DIS_C_COMP_PATCH_GCC_3_3_0"
		;;
	* )
		echo "I didn't recognize your version of gcc, please fix condor_imake!"
		exit 1;
		;;
esac	

CompilerID="$CompilerKind $CompilerMajor $CompilerMinor $CompilerPatch"

# Find/define crt[01].o for each architecture we support
case "$os" in 
	"SunOS" | "Linux")
		CRT_BEGIN=`gcc -print-file-name=crt1.o`
		;;

	"HP-UX" )
		echo HP-UX
		if [ $os = "HP-UX" -a "$osrelease" = "B.10.20" ] ; then
			CRT_BEGIN=/lib/crt0.o
		elif [ $os = "HP-UX" -a "$osversion" = "B.11.00" ] ; then
			# we support only 64-bit compilations of condor on hpux 11.00
			CRT_BEGIN=/usr/ccs/lib/pa20_64/crt0.o
		fi
		;;

	"IRIX" )
		case "$IsMipsABI" in
			"N64" )
				IrixBaseLibPath=/usr/lib64
				;;
			"N32" )
				IrixBaseLibPath=/usr/lib32
				;;
			"O32" )
				IrixBaseLibPath=/usr/lib32
				;;
		esac

		case "$IsMipsVersion" in
			"2" )
				IrixLibPath=$IrixBaseLibPath
				;;
			"3" )
				IrixLibPath="$IrixBaseLibPath/mips3"
				;;
			"4" )
				IrixLibPath="$IrixBaseLibPath/mips4"
				;;
		esac

		CRT_BEGIN="$IrixLibPath/crt1.o"
		;;
	
	"OSF1" )
		CRT_BEGIN=/usr/lib/cmplrs/cc/crt0.o
		;;
	
	"AIX" )
		CRT_BEGIN=/lib/crt0.o
		;;
esac
CrtBegin="-DCRT_BEGIN=$CRT_BEGIN"

# Find libstdc++.a, it is required we link with the archive version of this
# library so the binaries can run on machines with no gcc install.
tmp=`gcc --print-file-name=libstdc++.a`
StdCpp="-DLIB_STDCPP=$tmp"

##################################################
# Determine operating system flavors
##################################################

Imakecppflags="gcc -E -w \$*"

if [ $os = "HP-UX" -a "$osrelease" = "B.10.20" ] ; then
	Opsys="-DIS_HPUX10"

elif [ $os = "HP-UX" -a "$osversion" = "B.11.00" ] ; then
	Opsys="-DIS_HPUX11"

elif [ $os = "OSF1" ] ; then
		ArchFlag="-DIS_ALPHA"
        if [ $osrelease = "V4.0" ] ; then
                Opsys="-DIS_DUX4"
        elif [ $osrelease = "V5.0" -o $osrelease = "V5.1" ] ; then
                Opsys="-DIS_DUX5"
        fi

elif [ $os = "Linux" ]; then
	Opsys="-DIS_LINUX"
	if [ -f /lib/libc.so.6* ] ; then
		Other="-DIS_GLIBC"
	fi
	if [ -f /lib/libc-2.0.* ]; then
		Other2="-DIS_GLIBC20"
	elif [ -f /lib/libc-2.1.* ]; then
		Other2="-DIS_GLIBC21"
	elif [ -f /lib/libc-2.2.* ]; then
		Other2="-DIS_GLIBC22"
	elif [ -f /lib/libc-2.3.* ]; then
		Other2="-DIS_GLIBC23"
	else
		# if we got here, it means it isn't a redhat distribution since
		# redhat names the libc versions as detailed in the above code.
		# So, for now, assume SuSE linux and glibc22. Later I might have
		# to define proper distinctions between redhat and SuSE.
		Other2="-DIS_GLIBC22"
		echo "Defaulting glibc installation detection to: $Other2..."
	fi
	if [ $arch = "i686" -o $arch = "i586" -o $arch = "i486" ] ; then
		ArchFlag="-DIS_I386"
	elif [ $arch = "alpha" ] ; then
		ArchFlag="-DIS_ALPHA"
	elif [ $arch = "ia64" ] ; then
		ArchFlag="-DIS_IA64"
	fi

elif [ $os = "SunOS" ]; then
	if [ $arch = "sun4m" -o $arch = "sun4u" ]; then
		ArchFlag="-DIS_SUN4X"
	elif [ $arch = "i86pc" ]; then
		ArchFlag="-DIS_X86"
	fi

	if [ "$osrelease" = "5.5.1" ] ; then
		Opsys="-DIS_SOLARIS251"
	elif [ "$osrelease" = "5.6" ] ; then
		Opsys="-DIS_SOLARIS26"
	elif [ "$osrelease" = "5.7" ] ; then
		Opsys="-DIS_SOLARIS27"
	elif [ "$osrelease" = "5.8" ] ; then
		Opsys="-DIS_SOLARIS28"
	elif [ "$osrelease" = "5.9" ] ; then
		Opsys="-DIS_SOLARIS29"
	fi

elif [ $os = "IRIX" ] ; then
	ArchFlag="-DIS_MIPS"
	if [ "$osrelease" = "6.5" ] ; then
		Opsys="-DIS_IRIX65"
	else
		Opsys="-DIS_IRIX62"
	fi

elif [ $os = "AIX" ] ; then
	Opsys="-DIS_AIX"
	if [ "$osversion" = "5" ] ; then
		Other="-DIS_AIX5"
	fi

	# add detection to this when ia64 is needed
	ArchFlag="-DIS_PPC"

elif [ $os = "Darwin" ] ; then
	Opsys="-DIS_BSD -DIS_DARWIN"
	Imakecppflags="gcc -E -w  -no-cpp-precomp \$*"
else
        echo "Unknown O/S: OS=\"$os\" Version=\"$osversion\""
        exit 1

fi

##################################################
# Find imake.  
# If it doesn't yet exist, build it.
##################################################

IMAKE=imake
if [ X$USE_OLD_IMAKE = X ] ; then
if [ -d ../imake ] ; then
    IMAKEROOT="../imake"
elif [ -d ../../imake ] ; then
    IMAKEROOT="../../imake"
elif [ -d ../../../imake ] ; then
    IMAKEROOT="../../../imake"
else
	echo "Can't find the root directory for imake!"
	echo "You need a copy of imake build Condor."
	echo "Please make sure your version of the Condor source"
	echo "contains a directory called \"imake\" that is at the"
	echo "top-level of your source tree (next to \"src\", \"config\")"
	exit 1
fi

IMAKE="$IMAKEROOT/imake"
if [ ! -x $IMAKE ] ; then
    echo "Attemping to build imake from source"
    pwd=`pwd`
    cd $IMAKEROOT
    make
    cd $pwd
fi
if [ ! -x $IMAKE ] ; then
    # if it's not here yet, fatal error
    echo "Failed to build imake!"
p   exit 1
fi

# Now, find an appropriate cpp to use
IMAKECPP="$IMAKEROOT/imake_cpp"
if [ ! -x $IMAKECPP ] ; then
    if [ -f $IMAKECPP ] ; then
        rm -f $IMAKECPP
    fi	 
    echo '#!/bin/sh' > $IMAKECPP
    echo $Imakecppflags >> $IMAKECPP
    chmod 755 $IMAKECPP
fi
export IMAKECPP

# end of USE_OLD_IMAKE
fi

##################################################
# Courtesy dump the various information so people know what they got
##################################################

# look around for "-v" or "-verbose" and act upon it.
verbose_info=0
for i in "$@"
do
	if [ "X$i" = "X-verbose" -o "X$i" = "X-v" ]; then
		verbose_info=1
		break
	fi
done

if [ "X$verbose_info" = "X1" ]; then

	echo "##################################################"
	echo "Features found..."
	echo "##################################################"
	echo
	echo "Operating system:"
	echo "-----------------"
	echo "$os"
	echo
	echo "Operating system release:"
	echo "-------------------------"
	echo "$osrelease"
	echo
	echo "Operating system version:"
	echo "-------------------------"
	echo "$osversion"
	echo
	echo "Architecture:"
	echo "-------------"
	echo "$arch"
	echo
	echo "Operating system(condor):"
	echo "-------------------------"
	echo "$Opsys"
	echo
	echo "Architecture(condor):"
	echo "---------------------"
	echo "$ArchFlag"
	echo
	case "$os" in
		"Linux" | "AIX" )
			echo "Additional Architecture info:"
			echo "-----------------------------"
			echo "$Other $Other2"
			echo
			;;
	esac
	echo
	echo "Compiler Path:"
	echo "--------------"
	echo "$CompilerPath"
	echo
	echo "Compiler Identification:"
	echo "------------------------"
	echo "$CompilerID"
	echo
	echo "Libgcc:"
	echo "-------"
	echo "$LibGcc"
	echo
	echo "CrtBegin:"
	echo "---------"
	echo "$CrtBegin"
	echo
	echo "StdCpp:"
	echo "---------"
	echo "$StdCpp"
	echo
fi

##################################################
# Finally, call imake with all the flags
##################################################
if [ $verbose_info = 0 ]; then
	echo ${IMAKE} -s Makefile $ArchFlag $Opsys $Other $Other2 $LibGcc $CrtBegin $StdCpp $CompilerID -I../config -I../../config $*
fi

${IMAKE} -s Makefile $ArchFlag $Opsys $Other $Other2 $LibGcc $CrtBegin $StdCpp $CompilerID -I../config -I../../config $*


