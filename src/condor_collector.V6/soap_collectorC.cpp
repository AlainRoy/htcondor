/* soap_collectorC.cpp
   Generated by gSOAP 2.6.0 from gsoap_collector.h
   Copyright (C) 2001-2004 Genivia, Inc. All Rights Reserved.
   This software is released under the gSOAP public license and GPL.
   See README.txt for further details.
*/
#include "soap_collectorH.h"

SOAP_BEGIN_NAMESPACE(soap_collector)

SOAP_SOURCE_STAMP("@(#) soap_collectorC.cpp ver 2.6.0 2004-06-01 14:50:24 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL);
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = (struct SOAP_ENV__Fault*)soap_malloc(soap, sizeof(struct SOAP_ENV__Fault));
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version != 1 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}

SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_in_xsd__byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_long:
		return soap_in_long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__long:
		return soap_in_xsd__long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__float:
		return soap_in_xsd__float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_condor__ClassAdAttrType:
		return soap_in_condor__ClassAdAttrType(soap, NULL, NULL, "condor:ClassAdAttrType");
	case SOAP_TYPE_condor__StatusCode:
		return soap_in_condor__StatusCode(soap, NULL, NULL, "condor:StatusCode");
	case SOAP_TYPE_xsd__boolean:
		return soap_in_xsd__boolean(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_condor__queryAnyAds:
		return soap_in_condor__queryAnyAds(soap, NULL, NULL, "condor:queryAnyAds");
	case SOAP_TYPE_condor__queryAnyAdsResponse:
		return soap_in_condor__queryAnyAdsResponse(soap, NULL, NULL, "condor:queryAnyAdsResponse");
	case SOAP_TYPE_condor__queryStorageAds:
		return soap_in_condor__queryStorageAds(soap, NULL, NULL, "condor:queryStorageAds");
	case SOAP_TYPE_condor__queryStorageAdsResponse:
		return soap_in_condor__queryStorageAdsResponse(soap, NULL, NULL, "condor:queryStorageAdsResponse");
	case SOAP_TYPE_condor__queryLicenseAds:
		return soap_in_condor__queryLicenseAds(soap, NULL, NULL, "condor:queryLicenseAds");
	case SOAP_TYPE_condor__queryLicenseAdsResponse:
		return soap_in_condor__queryLicenseAdsResponse(soap, NULL, NULL, "condor:queryLicenseAdsResponse");
	case SOAP_TYPE_condor__querySubmittorAds:
		return soap_in_condor__querySubmittorAds(soap, NULL, NULL, "condor:querySubmittorAds");
	case SOAP_TYPE_condor__querySubmittorAdsResponse:
		return soap_in_condor__querySubmittorAdsResponse(soap, NULL, NULL, "condor:querySubmittorAdsResponse");
	case SOAP_TYPE_condor__queryMasterAds:
		return soap_in_condor__queryMasterAds(soap, NULL, NULL, "condor:queryMasterAds");
	case SOAP_TYPE_condor__queryMasterAdsResponse:
		return soap_in_condor__queryMasterAdsResponse(soap, NULL, NULL, "condor:queryMasterAdsResponse");
	case SOAP_TYPE_condor__queryScheddAds:
		return soap_in_condor__queryScheddAds(soap, NULL, NULL, "condor:queryScheddAds");
	case SOAP_TYPE_condor__queryScheddAdsResponse:
		return soap_in_condor__queryScheddAdsResponse(soap, NULL, NULL, "condor:queryScheddAdsResponse");
	case SOAP_TYPE_condor__queryStartdAds:
		return soap_in_condor__queryStartdAds(soap, NULL, NULL, "condor:queryStartdAds");
	case SOAP_TYPE_condor__queryStartdAdsResponse:
		return soap_in_condor__queryStartdAdsResponse(soap, NULL, NULL, "condor:queryStartdAdsResponse");
	case SOAP_TYPE_condor__StringAndStatus:
		return soap_in_condor__StringAndStatus(soap, NULL, NULL, "condor:StringAndStatus");
	case SOAP_TYPE_condor__ClassAdStructArrayAndStatus:
		return soap_in_condor__ClassAdStructArrayAndStatus(soap, NULL, NULL, "condor:ClassAdStructArrayAndStatus");
	case SOAP_TYPE_condor__ClassAdStructAndStatus:
		return soap_in_condor__ClassAdStructAndStatus(soap, NULL, NULL, "condor:ClassAdStructAndStatus");
	case SOAP_TYPE_ClassAdStructArray:
		return soap_in_ClassAdStructArray(soap, NULL, NULL, "condor:ClassAdStructAttr[]");
	case SOAP_TYPE_ClassAdStruct:
		return soap_in_ClassAdStruct(soap, NULL, NULL, "condor:ClassAdStructAttr");
	case SOAP_TYPE_condor__ClassAdStructAttr:
		return soap_in_condor__ClassAdStructAttr(soap, NULL, NULL, "condor:ClassAdStructAttr");
	case SOAP_TYPE_condor__Status:
		return soap_in_condor__Status(soap, NULL, NULL, "condor:Status");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerToClassAdStruct:
		return soap_in_PointerToClassAdStruct(soap, NULL, NULL, "condor:ClassAdStructAttr");
	case SOAP_TYPE_PointerTocondor__ClassAdStructAttr:
		return soap_in_PointerTocondor__ClassAdStructAttr(soap, NULL, NULL, "condor:ClassAdStructAttr");
	case SOAP_TYPE_PointerTocondor__Status:
		return soap_in_PointerTocondor__Status(soap, NULL, NULL, "condor:Status");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__anyURI:
	{	char **s;
		s = soap_in_xsd__anyURI(soap, NULL, NULL, "xsd:anyURI");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_xsd__string:
	{	char **s;
		s = soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_xsd__byte;
			return soap_in_xsd__byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_long;
			return soap_in_long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_xsd__long;
			return soap_in_xsd__long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_xsd__float;
			return soap_in_xsd__float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:ClassAdAttrType"))
		{	*type = SOAP_TYPE_condor__ClassAdAttrType;
			return soap_in_condor__ClassAdAttrType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:StatusCode"))
		{	*type = SOAP_TYPE_condor__StatusCode;
			return soap_in_condor__StatusCode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_xsd__boolean;
			return soap_in_xsd__boolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:queryAnyAds"))
		{	*type = SOAP_TYPE_condor__queryAnyAds;
			return soap_in_condor__queryAnyAds(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:queryAnyAdsResponse"))
		{	*type = SOAP_TYPE_condor__queryAnyAdsResponse;
			return soap_in_condor__queryAnyAdsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:queryStorageAds"))
		{	*type = SOAP_TYPE_condor__queryStorageAds;
			return soap_in_condor__queryStorageAds(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:queryStorageAdsResponse"))
		{	*type = SOAP_TYPE_condor__queryStorageAdsResponse;
			return soap_in_condor__queryStorageAdsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:queryLicenseAds"))
		{	*type = SOAP_TYPE_condor__queryLicenseAds;
			return soap_in_condor__queryLicenseAds(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:queryLicenseAdsResponse"))
		{	*type = SOAP_TYPE_condor__queryLicenseAdsResponse;
			return soap_in_condor__queryLicenseAdsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:querySubmittorAds"))
		{	*type = SOAP_TYPE_condor__querySubmittorAds;
			return soap_in_condor__querySubmittorAds(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:querySubmittorAdsResponse"))
		{	*type = SOAP_TYPE_condor__querySubmittorAdsResponse;
			return soap_in_condor__querySubmittorAdsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:queryMasterAds"))
		{	*type = SOAP_TYPE_condor__queryMasterAds;
			return soap_in_condor__queryMasterAds(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:queryMasterAdsResponse"))
		{	*type = SOAP_TYPE_condor__queryMasterAdsResponse;
			return soap_in_condor__queryMasterAdsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:queryScheddAds"))
		{	*type = SOAP_TYPE_condor__queryScheddAds;
			return soap_in_condor__queryScheddAds(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:queryScheddAdsResponse"))
		{	*type = SOAP_TYPE_condor__queryScheddAdsResponse;
			return soap_in_condor__queryScheddAdsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:queryStartdAds"))
		{	*type = SOAP_TYPE_condor__queryStartdAds;
			return soap_in_condor__queryStartdAds(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:queryStartdAdsResponse"))
		{	*type = SOAP_TYPE_condor__queryStartdAdsResponse;
			return soap_in_condor__queryStartdAdsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:StringAndStatus"))
		{	*type = SOAP_TYPE_condor__StringAndStatus;
			return soap_in_condor__StringAndStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:ClassAdStructArrayAndStatus"))
		{	*type = SOAP_TYPE_condor__ClassAdStructArrayAndStatus;
			return soap_in_condor__ClassAdStructArrayAndStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:ClassAdStructAndStatus"))
		{	*type = SOAP_TYPE_condor__ClassAdStructAndStatus;
			return soap_in_condor__ClassAdStructAndStatus(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "condor:ClassAdStructAttr[]"))
		{	*type = SOAP_TYPE_ClassAdStructArray;
			return soap_in_ClassAdStructArray(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "condor:ClassAdStructAttr"))
		{	*type = SOAP_TYPE_ClassAdStruct;
			return soap_in_ClassAdStruct(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:ClassAdStructAttr"))
		{	*type = SOAP_TYPE_condor__ClassAdStructAttr;
			return soap_in_condor__ClassAdStructAttr(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "condor:Status"))
		{	*type = SOAP_TYPE_condor__Status;
			return soap_in_condor__Status(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	char **s;
			*type = SOAP_TYPE_xsd__anyURI;
			s = soap_in_xsd__anyURI(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_xsd__string;
			s = soap_in_xsd__string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{	if (soap->mode & SOAP_XML_STRICT)
		return SOAP_TAG_MISMATCH;
	if (!soap_peek_element(soap))
	{	int t;
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unknown element '%s' (level=%u, %d)\n", soap->tag, soap->level, soap->body));
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if ((soap->mode & SOAP_IO_LENGTH) ? pp->mark1 == 2 : pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_out_xsd__byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_xsd__int:
		return soap_out_xsd__int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_long:
		return soap_out_long(soap, tag, id, (const long *)ptr, "xsd:long");
	case SOAP_TYPE_xsd__long:
		return soap_out_xsd__long(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_xsd__float:
		return soap_out_xsd__float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_condor__ClassAdAttrType:
		return soap_out_condor__ClassAdAttrType(soap, tag, id, (const enum condor__ClassAdAttrType *)ptr, "condor:ClassAdAttrType");
	case SOAP_TYPE_condor__StatusCode:
		return soap_out_condor__StatusCode(soap, tag, id, (const enum condor__StatusCode *)ptr, "condor:StatusCode");
	case SOAP_TYPE_xsd__boolean:
		return soap_out_xsd__boolean(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_condor__queryAnyAds:
		return soap_out_condor__queryAnyAds(soap, tag, id, (const struct condor__queryAnyAds *)ptr, "condor:queryAnyAds");
	case SOAP_TYPE_condor__queryAnyAdsResponse:
		return soap_out_condor__queryAnyAdsResponse(soap, tag, id, (const struct condor__queryAnyAdsResponse *)ptr, "condor:queryAnyAdsResponse");
	case SOAP_TYPE_condor__queryStorageAds:
		return soap_out_condor__queryStorageAds(soap, tag, id, (const struct condor__queryStorageAds *)ptr, "condor:queryStorageAds");
	case SOAP_TYPE_condor__queryStorageAdsResponse:
		return soap_out_condor__queryStorageAdsResponse(soap, tag, id, (const struct condor__queryStorageAdsResponse *)ptr, "condor:queryStorageAdsResponse");
	case SOAP_TYPE_condor__queryLicenseAds:
		return soap_out_condor__queryLicenseAds(soap, tag, id, (const struct condor__queryLicenseAds *)ptr, "condor:queryLicenseAds");
	case SOAP_TYPE_condor__queryLicenseAdsResponse:
		return soap_out_condor__queryLicenseAdsResponse(soap, tag, id, (const struct condor__queryLicenseAdsResponse *)ptr, "condor:queryLicenseAdsResponse");
	case SOAP_TYPE_condor__querySubmittorAds:
		return soap_out_condor__querySubmittorAds(soap, tag, id, (const struct condor__querySubmittorAds *)ptr, "condor:querySubmittorAds");
	case SOAP_TYPE_condor__querySubmittorAdsResponse:
		return soap_out_condor__querySubmittorAdsResponse(soap, tag, id, (const struct condor__querySubmittorAdsResponse *)ptr, "condor:querySubmittorAdsResponse");
	case SOAP_TYPE_condor__queryMasterAds:
		return soap_out_condor__queryMasterAds(soap, tag, id, (const struct condor__queryMasterAds *)ptr, "condor:queryMasterAds");
	case SOAP_TYPE_condor__queryMasterAdsResponse:
		return soap_out_condor__queryMasterAdsResponse(soap, tag, id, (const struct condor__queryMasterAdsResponse *)ptr, "condor:queryMasterAdsResponse");
	case SOAP_TYPE_condor__queryScheddAds:
		return soap_out_condor__queryScheddAds(soap, tag, id, (const struct condor__queryScheddAds *)ptr, "condor:queryScheddAds");
	case SOAP_TYPE_condor__queryScheddAdsResponse:
		return soap_out_condor__queryScheddAdsResponse(soap, tag, id, (const struct condor__queryScheddAdsResponse *)ptr, "condor:queryScheddAdsResponse");
	case SOAP_TYPE_condor__queryStartdAds:
		return soap_out_condor__queryStartdAds(soap, tag, id, (const struct condor__queryStartdAds *)ptr, "condor:queryStartdAds");
	case SOAP_TYPE_condor__queryStartdAdsResponse:
		return soap_out_condor__queryStartdAdsResponse(soap, tag, id, (const struct condor__queryStartdAdsResponse *)ptr, "condor:queryStartdAdsResponse");
	case SOAP_TYPE_condor__StringAndStatus:
		return soap_out_condor__StringAndStatus(soap, tag, id, (const struct condor__StringAndStatus *)ptr, "condor:StringAndStatus");
	case SOAP_TYPE_condor__ClassAdStructArrayAndStatus:
		return soap_out_condor__ClassAdStructArrayAndStatus(soap, tag, id, (const struct condor__ClassAdStructArrayAndStatus *)ptr, "condor:ClassAdStructArrayAndStatus");
	case SOAP_TYPE_condor__ClassAdStructAndStatus:
		return soap_out_condor__ClassAdStructAndStatus(soap, tag, id, (const struct condor__ClassAdStructAndStatus *)ptr, "condor:ClassAdStructAndStatus");
	case SOAP_TYPE_ClassAdStructArray:
		return soap_out_ClassAdStructArray(soap, tag, id, (const struct ClassAdStructArray *)ptr, "condor:ClassAdStructAttr[]");
	case SOAP_TYPE_ClassAdStruct:
		return soap_out_ClassAdStruct(soap, tag, id, (const struct ClassAdStruct *)ptr, "condor:ClassAdStructAttr");
	case SOAP_TYPE_condor__ClassAdStructAttr:
		return soap_out_condor__ClassAdStructAttr(soap, tag, id, (const struct condor__ClassAdStructAttr *)ptr, "condor:ClassAdStructAttr");
	case SOAP_TYPE_condor__Status:
		return soap_out_condor__Status(soap, tag, id, (const struct condor__Status *)ptr, "condor:Status");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_out_xsd__base64Binary(soap, tag, id, (const struct xsd__base64Binary *)ptr, "xsd:base64Binary");
	case SOAP_TYPE_PointerToClassAdStruct:
		return soap_out_PointerToClassAdStruct(soap, tag, id, (struct ClassAdStruct *const*)ptr, "condor:ClassAdStructAttr");
	case SOAP_TYPE_PointerTocondor__ClassAdStructAttr:
		return soap_out_PointerTocondor__ClassAdStructAttr(soap, tag, id, (struct condor__ClassAdStructAttr *const*)ptr, "condor:ClassAdStructAttr");
	case SOAP_TYPE_PointerTocondor__Status:
		return soap_out_PointerTocondor__Status(soap, tag, id, (struct condor__Status *const*)ptr, "condor:Status");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__anyURI:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:anyURI");
	case SOAP_TYPE_xsd__string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "QName", id, (char**)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	switch (type)
	{
	case SOAP_TYPE_condor__queryAnyAds:
		soap_mark_condor__queryAnyAds(soap, (const struct condor__queryAnyAds *)ptr);
		break;
	case SOAP_TYPE_condor__queryAnyAdsResponse:
		soap_mark_condor__queryAnyAdsResponse(soap, (const struct condor__queryAnyAdsResponse *)ptr);
		break;
	case SOAP_TYPE_condor__queryStorageAds:
		soap_mark_condor__queryStorageAds(soap, (const struct condor__queryStorageAds *)ptr);
		break;
	case SOAP_TYPE_condor__queryStorageAdsResponse:
		soap_mark_condor__queryStorageAdsResponse(soap, (const struct condor__queryStorageAdsResponse *)ptr);
		break;
	case SOAP_TYPE_condor__queryLicenseAds:
		soap_mark_condor__queryLicenseAds(soap, (const struct condor__queryLicenseAds *)ptr);
		break;
	case SOAP_TYPE_condor__queryLicenseAdsResponse:
		soap_mark_condor__queryLicenseAdsResponse(soap, (const struct condor__queryLicenseAdsResponse *)ptr);
		break;
	case SOAP_TYPE_condor__querySubmittorAds:
		soap_mark_condor__querySubmittorAds(soap, (const struct condor__querySubmittorAds *)ptr);
		break;
	case SOAP_TYPE_condor__querySubmittorAdsResponse:
		soap_mark_condor__querySubmittorAdsResponse(soap, (const struct condor__querySubmittorAdsResponse *)ptr);
		break;
	case SOAP_TYPE_condor__queryMasterAds:
		soap_mark_condor__queryMasterAds(soap, (const struct condor__queryMasterAds *)ptr);
		break;
	case SOAP_TYPE_condor__queryMasterAdsResponse:
		soap_mark_condor__queryMasterAdsResponse(soap, (const struct condor__queryMasterAdsResponse *)ptr);
		break;
	case SOAP_TYPE_condor__queryScheddAds:
		soap_mark_condor__queryScheddAds(soap, (const struct condor__queryScheddAds *)ptr);
		break;
	case SOAP_TYPE_condor__queryScheddAdsResponse:
		soap_mark_condor__queryScheddAdsResponse(soap, (const struct condor__queryScheddAdsResponse *)ptr);
		break;
	case SOAP_TYPE_condor__queryStartdAds:
		soap_mark_condor__queryStartdAds(soap, (const struct condor__queryStartdAds *)ptr);
		break;
	case SOAP_TYPE_condor__queryStartdAdsResponse:
		soap_mark_condor__queryStartdAdsResponse(soap, (const struct condor__queryStartdAdsResponse *)ptr);
		break;
	case SOAP_TYPE_condor__StringAndStatus:
		soap_mark_condor__StringAndStatus(soap, (const struct condor__StringAndStatus *)ptr);
		break;
	case SOAP_TYPE_condor__ClassAdStructArrayAndStatus:
		soap_mark_condor__ClassAdStructArrayAndStatus(soap, (const struct condor__ClassAdStructArrayAndStatus *)ptr);
		break;
	case SOAP_TYPE_condor__ClassAdStructAndStatus:
		soap_mark_condor__ClassAdStructAndStatus(soap, (const struct condor__ClassAdStructAndStatus *)ptr);
		break;
	case SOAP_TYPE_ClassAdStructArray:
		soap_mark_ClassAdStructArray(soap, (const struct ClassAdStructArray *)ptr);
		break;
	case SOAP_TYPE_ClassAdStruct:
		soap_mark_ClassAdStruct(soap, (const struct ClassAdStruct *)ptr);
		break;
	case SOAP_TYPE_condor__ClassAdStructAttr:
		soap_mark_condor__ClassAdStructAttr(soap, (const struct condor__ClassAdStructAttr *)ptr);
		break;
	case SOAP_TYPE_condor__Status:
		soap_mark_condor__Status(soap, (const struct condor__Status *)ptr);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		soap_mark_xsd__base64Binary(soap, (const struct xsd__base64Binary *)ptr);
		break;
	case SOAP_TYPE_PointerToClassAdStruct:
		soap_mark_PointerToClassAdStruct(soap, (struct ClassAdStruct *const*)ptr);
		break;
	case SOAP_TYPE_PointerTocondor__ClassAdStructAttr:
		soap_mark_PointerTocondor__ClassAdStructAttr(soap, (struct condor__ClassAdStructAttr *const*)ptr);
		break;
	case SOAP_TYPE_PointerTocondor__Status:
		soap_mark_PointerTocondor__Status(soap, (struct condor__Status *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_mark_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE_xsd__anyURI:
		soap_mark_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE_xsd__string:
		soap_mark_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_mark_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_mark_string(soap, (char**)&ptr);
		break;
	}
}

#ifndef WITH_LEANER
SOAP_FMAC3 int SOAP_FMAC4 soap_getattachments(struct soap *soap)
{
	if (!(soap->mode & SOAP_ENC_DIME))
		return SOAP_OK;
	while (soap->dime_flags & SOAP_DIME_CF)
	{	if (soap_getdimehdr(soap))
			return soap->error;
		if (soap_move(soap, soap->dime_size))
			return soap->error = SOAP_EOF;
	}
	if (soap_move(soap, ((soap->dime_size+3)&(~3))-soap_tell(soap)))
		return soap->error = SOAP_EOF;
	for (;;)
	{	if (soap_getdime(soap) || !soap->dime_id)
			break;
		switch (soap_lookup_type(soap, soap->dime_id))
		{
		case SOAP_TYPE_xsd__base64Binary:
		{	struct xsd__base64Binary * a;
			a = (struct xsd__base64Binary *)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE_xsd__base64Binary, sizeof(struct xsd__base64Binary), 0);
			if (a)
			{	a->__ptr = (unsigned char*)soap->dime_ptr;
				a->__size = soap->dime_size;
			}
			break;
		}
		case SOAP_TYPE_xsd__anyURI:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE_xsd__anyURI, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		case SOAP_TYPE_xsd__string:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE_xsd__string, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		case SOAP_TYPE__QName:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE__QName, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		case SOAP_TYPE_string:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE_string, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		default:
			soap->error = SOAP_DIME_ERROR;
		}
		if (soap->error)
			break;
	}
	if (soap->error == SOAP_EOD)
		soap->error = SOAP_OK;
	return soap->error;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putattachments(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (!(soap->mode & SOAP_ENC_DIME))
		return SOAP_OK;
	for (i = 0; i < SOAP_PTRHASH; i++)
		for (pp = soap->pht[i]; pp; pp = pp->next)
			if (pp->mark2 == 3)
				switch (pp->type)
				{
				}
		
	return SOAP_OK;
}
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__byte(struct soap *soap, char *a)
{
#ifdef SOAP_DEFAULT_xsd__byte
	*a = SOAP_DEFAULT_xsd__byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__byte(struct soap *soap, char const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__byte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__byte);
	soap_out_xsd__byte(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_xsd__byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_xsd__byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_byte(struct soap *soap, char const*a)
{
	soap_reference(soap, a, SOAP_TYPE_byte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_byte);
	soap_out_byte(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__int(struct soap *soap, int *a)
{
#ifdef SOAP_DEFAULT_xsd__int
	*a = SOAP_DEFAULT_xsd__int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__int(struct soap *soap, int const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__int);
	soap_out_xsd__int(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_int(struct soap *soap, int const*a)
{
	soap_reference(soap, a, SOAP_TYPE_int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_int);
	soap_out_int(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_long(struct soap *soap, long *a)
{
#ifdef SOAP_DEFAULT_long
	*a = SOAP_DEFAULT_long;
#else
	*a = (long)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_long(struct soap *soap, long const*a)
{
	soap_reference(soap, a, SOAP_TYPE_long);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap *soap, const long *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_long);
	soap_out_long(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_long);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_long(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap *soap, const char *tag, long *a, const char *type)
{
	return soap_inlong(soap, tag, a, type, SOAP_TYPE_long);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__long(struct soap *soap, LONG64 *a)
{
#ifdef SOAP_DEFAULT_xsd__long
	*a = SOAP_DEFAULT_xsd__long;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__long(struct soap *soap, LONG64 const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__long(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__long);
	soap_out_xsd__long(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__long(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__long(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_xsd__long(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	return soap_inLONG64(soap, tag, a, type, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_LONG64(struct soap *soap, LONG64 const*a)
{
	soap_reference(soap, a, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_LONG64);
	soap_out_LONG64(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	return soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__float(struct soap *soap, float *a)
{
#ifdef SOAP_DEFAULT_xsd__float
	*a = SOAP_DEFAULT_xsd__float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__float(struct soap *soap, float const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__float);
	soap_out_xsd__float(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_xsd__float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__float(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_xsd__float(struct soap *soap, const char *tag, float *a, const char *type)
{
	return soap_infloat(soap, tag, a, type, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_float(struct soap *soap, float const*a)
{
	soap_reference(soap, a, SOAP_TYPE_float);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_float);
	soap_out_float(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{
	return soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_unsignedByte(struct soap *soap, unsigned char const*a)
{
	soap_reference(soap, a, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_unsignedByte);
	soap_out_unsignedByte(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	return soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_unsignedInt(struct soap *soap, unsigned int const*a)
{
	soap_reference(soap, a, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_unsignedInt);
	soap_out_unsignedInt(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	return soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__ClassAdAttrType(struct soap *soap, enum condor__ClassAdAttrType *a)
{
#ifdef SOAP_DEFAULT_condor__ClassAdAttrType
	*a = SOAP_DEFAULT_condor__ClassAdAttrType;
#else
	*a = (enum condor__ClassAdAttrType)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__ClassAdAttrType(struct soap *soap, enum condor__ClassAdAttrType const*a)
{
	soap_reference(soap, a, SOAP_TYPE_condor__ClassAdAttrType);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__ClassAdAttrType(struct soap *soap, const enum condor__ClassAdAttrType *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__ClassAdAttrType);
	soap_out_condor__ClassAdAttrType(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_condor__ClassAdAttrType[] =
{	{ (long)INTEGER_ATTR, "INTEGER-ATTR" },
	{ (long)FLOAT_ATTR, "FLOAT-ATTR" },
	{ (long)STRING_ATTR, "STRING-ATTR" },
	{ (long)EXPRESSION_ATTR, "EXPRESSION-ATTR" },
	{ (long)BOOLEAN_ATTR, "BOOLEAN-ATTR" },
	{ (long)UNDEFINED_ATTR, "UNDEFINED-ATTR" },
	{ (long)ERROR_ATTR, "ERROR-ATTR" },
	{ 0, NULL }
};

SOAP_FMAC3 const char* SOAP_FMAC4 soap_condor__ClassAdAttrType2s(struct soap *soap, enum condor__ClassAdAttrType n)
{	const char *s = soap_str_code(soap_codes_condor__ClassAdAttrType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__ClassAdAttrType(struct soap *soap, const char *tag, int id, const enum condor__ClassAdAttrType *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__ClassAdAttrType), type);
	soap_send(soap, soap_condor__ClassAdAttrType2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum condor__ClassAdAttrType * SOAP_FMAC4 soap_get_condor__ClassAdAttrType(struct soap *soap, enum condor__ClassAdAttrType *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__ClassAdAttrType(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_s2condor__ClassAdAttrType(struct soap *soap, const char *s, enum condor__ClassAdAttrType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_condor__ClassAdAttrType, s);
	if (map)
		*a = (enum condor__ClassAdAttrType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n))
				return soap->error;
			*a = (enum condor__ClassAdAttrType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum condor__ClassAdAttrType * SOAP_FMAC4 soap_in_condor__ClassAdAttrType(struct soap *soap, const char *tag, enum condor__ClassAdAttrType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
	soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (soap->body && !*soap->href)
	{	a = (enum condor__ClassAdAttrType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__ClassAdAttrType, sizeof(enum condor__ClassAdAttrType), 0);
		if (!a || soap_s2condor__ClassAdAttrType(soap, soap_value(soap), a))
			return NULL;
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum condor__ClassAdAttrType *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__ClassAdAttrType, sizeof(enum condor__ClassAdAttrType), 0), SOAP_TYPE_condor__ClassAdAttrType, sizeof(enum condor__ClassAdAttrType));
		if (soap->alloced)
			soap_default_condor__ClassAdAttrType(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__StatusCode(struct soap *soap, enum condor__StatusCode *a)
{
#ifdef SOAP_DEFAULT_condor__StatusCode
	*a = SOAP_DEFAULT_condor__StatusCode;
#else
	*a = (enum condor__StatusCode)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__StatusCode(struct soap *soap, enum condor__StatusCode const*a)
{
	soap_reference(soap, a, SOAP_TYPE_condor__StatusCode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__StatusCode(struct soap *soap, const enum condor__StatusCode *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__StatusCode);
	soap_out_condor__StatusCode(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_condor__StatusCode[] =
{	{ (long)SUCCESS, "SUCCESS" },
	{ (long)FAIL, "FAIL" },
	{ (long)INVALIDTRANSACTION, "INVALIDTRANSACTION" },
	{ (long)UNKNOWNCLUSTER, "UNKNOWNCLUSTER" },
	{ (long)UNKNOWNJOB, "UNKNOWNJOB" },
	{ (long)UNKNOWNFILE, "UNKNOWNFILE" },
	{ (long)INCOMPLETE, "INCOMPLETE" },
	{ (long)INVALIDOFFSET, "INVALIDOFFSET" },
	{ (long)ALREADYEXISTS, "ALREADYEXISTS" },
	{ 0, NULL }
};

SOAP_FMAC3 const char* SOAP_FMAC4 soap_condor__StatusCode2s(struct soap *soap, enum condor__StatusCode n)
{	const char *s = soap_str_code(soap_codes_condor__StatusCode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__StatusCode(struct soap *soap, const char *tag, int id, const enum condor__StatusCode *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__StatusCode), type);
	soap_send(soap, soap_condor__StatusCode2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum condor__StatusCode * SOAP_FMAC4 soap_get_condor__StatusCode(struct soap *soap, enum condor__StatusCode *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__StatusCode(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_s2condor__StatusCode(struct soap *soap, const char *s, enum condor__StatusCode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_condor__StatusCode, s);
	if (map)
		*a = (enum condor__StatusCode)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n))
				return soap->error;
			*a = (enum condor__StatusCode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum condor__StatusCode * SOAP_FMAC4 soap_in_condor__StatusCode(struct soap *soap, const char *tag, enum condor__StatusCode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
	soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (soap->body && !*soap->href)
	{	a = (enum condor__StatusCode *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__StatusCode, sizeof(enum condor__StatusCode), 0);
		if (!a || soap_s2condor__StatusCode(soap, soap_value(soap), a))
			return NULL;
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum condor__StatusCode *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__StatusCode, sizeof(enum condor__StatusCode), 0), SOAP_TYPE_condor__StatusCode, sizeof(enum condor__StatusCode));
		if (soap->alloced)
			soap_default_condor__StatusCode(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__boolean(struct soap *soap, bool *a)
{
#ifdef SOAP_DEFAULT_xsd__boolean
	*a = SOAP_DEFAULT_xsd__boolean;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__boolean(struct soap *soap, bool const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__boolean);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__boolean(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__boolean);
	soap_out_xsd__boolean(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_xsd__boolean[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3 const char* SOAP_FMAC4 soap_xsd__boolean2s(struct soap *soap, bool n)
{	const char *s = soap_str_code(soap_codes_xsd__boolean, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xsd__boolean), type);
	soap_send(soap, soap_xsd__boolean2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_xsd__boolean(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__boolean(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_s2xsd__boolean(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_xsd__boolean, s);
	if (map)
		*a = (bool)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n))
				return soap->error;
			*a = (bool)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_xsd__boolean(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
	soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (soap->body && !*soap->href)
	{	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(bool), 0);
		if (!a || soap_s2xsd__boolean(soap, soap_value(soap), a))
			return NULL;
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(bool), 0), SOAP_TYPE_xsd__boolean, sizeof(bool));
		if (soap->alloced)
			soap_default_xsd__boolean(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_bool(struct soap *soap, bool const*a)
{
	soap_reference(soap, a, SOAP_TYPE_bool);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_bool);
	soap_out_bool(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3 const char* SOAP_FMAC4 soap_bool2s(struct soap *soap, bool n)
{	const char *s = soap_str_code(soap_codes_bool, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type);
	soap_send(soap, soap_bool2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n))
				return soap->error;
			*a = (bool)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
	soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (soap->body && !*soap->href)
	{	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0);
		if (!a || soap_s2bool(soap, soap_value(soap), a))
			return NULL;
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0), SOAP_TYPE_bool, sizeof(bool));
		if (soap->alloced)
			soap_default_bool(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_SOAP_ENV__Fault))
		soap_mark_SOAP_ENV__Fault(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	soap_embedded(soap, &a->faultcode, SOAP_TYPE__QName);
	soap_mark__QName(soap, &a->faultcode);
	soap_embedded(soap, &a->faultstring, SOAP_TYPE_string);
	soap_mark_string(soap, &a->faultstring);
	soap_embedded(soap, &a->faultactor, SOAP_TYPE_string);
	soap_mark_string(soap, &a->faultactor);
	soap_embedded(soap, &a->detail, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	soap_mark_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_embedded(soap, &a->SOAP_ENV__Code, SOAP_TYPE_PointerToSOAP_ENV__Code);
	soap_mark_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_embedded(soap, &a->SOAP_ENV__Reason, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Reason);
	soap_embedded(soap, &a->SOAP_ENV__Detail, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	soap_mark_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	soap_default_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_default_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_default_string(soap, &a->SOAP_ENV__Reason);
	soap_default_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_SOAP_ENV__Fault);
	soap_out_SOAP_ENV__Fault(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type);
	soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, "");
	soap_out_string(soap, "faultstring", -1, &a->faultstring, "");
	soap_out_string(soap, "faultactor", -1, &a->faultactor, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, "");
	soap_out_string(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_SOAP_ENV__Fault(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode = 0;
					continue;
				}
			if (soap_flag_faultstring && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "faultstring", &a->faultstring, ""))
				{	soap_flag_faultstring = 0;
					continue;
				}
			if (soap_flag_faultactor && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "faultactor", &a->faultactor, ""))
				{	soap_flag_faultactor = 0;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0), SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault));
		if (soap->alloced)
			soap_default_SOAP_ENV__Fault(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_mark_SOAP_ENV__Detail(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	soap_markelement(soap, a->value, a->__type);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	a->__type = 0;
	a->value = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_SOAP_ENV__Detail);
	soap_out_SOAP_ENV__Detail(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type);
	soap_putelement(soap, a->value, "value", -1, a->__type);
	soap_outliteral(soap, "-any", &a->__any);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_value = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_SOAP_ENV__Detail(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_value && soap->error == SOAP_TAG_MISMATCH)
				if ((a->value = soap_getelement(soap, &a->__type)))
				{	soap_flag_value = 0;
					continue;
				}
			if (soap_flag___any && soap->error == SOAP_TAG_MISMATCH)
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0), SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail));
		if (soap->alloced)
			soap_default_SOAP_ENV__Detail(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_SOAP_ENV__Code))
		soap_mark_SOAP_ENV__Code(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	soap_embedded(soap, &a->SOAP_ENV__Value, SOAP_TYPE__QName);
	soap_mark__QName(soap, &a->SOAP_ENV__Value);
	soap_embedded(soap, &a->SOAP_ENV__Node, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Node);
	soap_embedded(soap, &a->SOAP_ENV__Role, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Role);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_SOAP_ENV__Code);
	soap_out_SOAP_ENV__Code(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type);
	soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, "");
	soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, "");
	soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_SOAP_ENV__Code(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, ""))
				{	soap_flag_SOAP_ENV__Node = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, ""))
				{	soap_flag_SOAP_ENV__Role = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0), SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code));
		if (soap->alloced)
			soap_default_SOAP_ENV__Code(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_SOAP_ENV__Header))
		soap_mark_SOAP_ENV__Header(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	/* transient dummy skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	/* transient dummy skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_SOAP_ENV__Header);
	soap_out_SOAP_ENV__Header(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type);
	/* transient dummy skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_SOAP_ENV__Header(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
		/* transient dummy skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0), SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header));
		if (soap->alloced)
			soap_default_SOAP_ENV__Header(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__queryAnyAds(struct soap *soap, struct condor__queryAnyAds const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condor__queryAnyAds))
		soap_mark_condor__queryAnyAds(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condor__queryAnyAds(struct soap *soap, const struct condor__queryAnyAds *a)
{
	soap_embedded(soap, &a->constraint, SOAP_TYPE_string);
	soap_mark_string(soap, &a->constraint);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__queryAnyAds(struct soap *soap, struct condor__queryAnyAds *a)
{
	soap_default_string(soap, &a->constraint);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__queryAnyAds(struct soap *soap, const struct condor__queryAnyAds *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__queryAnyAds);
	soap_out_condor__queryAnyAds(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__queryAnyAds(struct soap *soap, const char *tag, int id, const struct condor__queryAnyAds *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__queryAnyAds), type);
	soap_out_string(soap, "constraint", -1, &a->constraint, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condor__queryAnyAds * SOAP_FMAC4 soap_get_condor__queryAnyAds(struct soap *soap, struct condor__queryAnyAds *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__queryAnyAds(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__queryAnyAds * SOAP_FMAC4 soap_in_condor__queryAnyAds(struct soap *soap, const char *tag, struct condor__queryAnyAds *a, const char *type)
{
	short soap_flag_constraint = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condor__queryAnyAds *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryAnyAds, sizeof(struct condor__queryAnyAds), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condor__queryAnyAds(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_constraint && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "constraint", &a->constraint, ""))
				{	soap_flag_constraint = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_constraint))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condor__queryAnyAds *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryAnyAds, sizeof(struct condor__queryAnyAds), 0), SOAP_TYPE_condor__queryAnyAds, sizeof(struct condor__queryAnyAds));
		if (soap->alloced)
			soap_default_condor__queryAnyAds(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__queryAnyAdsResponse(struct soap *soap, struct condor__queryAnyAdsResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condor__queryAnyAdsResponse))
		soap_mark_condor__queryAnyAdsResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condor__queryAnyAdsResponse(struct soap *soap, const struct condor__queryAnyAdsResponse *a)
{
	soap_embedded(soap, &a->result, SOAP_TYPE_ClassAdStructArray);
	soap_mark_ClassAdStructArray(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__queryAnyAdsResponse(struct soap *soap, struct condor__queryAnyAdsResponse *a)
{
	soap_default_ClassAdStructArray(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__queryAnyAdsResponse(struct soap *soap, const struct condor__queryAnyAdsResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__queryAnyAdsResponse);
	soap_out_condor__queryAnyAdsResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__queryAnyAdsResponse(struct soap *soap, const char *tag, int id, const struct condor__queryAnyAdsResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__queryAnyAdsResponse), type);
	soap_element_result(soap, "result");
	soap_out_ClassAdStructArray(soap, "result", -1, &a->result, "condor:ClassAdStructAttr[]");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condor__queryAnyAdsResponse * SOAP_FMAC4 soap_get_condor__queryAnyAdsResponse(struct soap *soap, struct condor__queryAnyAdsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__queryAnyAdsResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__queryAnyAdsResponse * SOAP_FMAC4 soap_in_condor__queryAnyAdsResponse(struct soap *soap, const char *tag, struct condor__queryAnyAdsResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condor__queryAnyAdsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryAnyAdsResponse, sizeof(struct condor__queryAnyAdsResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condor__queryAnyAdsResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ClassAdStructArray(soap, "result", &a->result, "condor:ClassAdStructAttr[]"))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condor__queryAnyAdsResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryAnyAdsResponse, sizeof(struct condor__queryAnyAdsResponse), 0), SOAP_TYPE_condor__queryAnyAdsResponse, sizeof(struct condor__queryAnyAdsResponse));
		if (soap->alloced)
			soap_default_condor__queryAnyAdsResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__queryStorageAds(struct soap *soap, struct condor__queryStorageAds const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condor__queryStorageAds))
		soap_mark_condor__queryStorageAds(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condor__queryStorageAds(struct soap *soap, const struct condor__queryStorageAds *a)
{
	soap_embedded(soap, &a->constraint, SOAP_TYPE_string);
	soap_mark_string(soap, &a->constraint);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__queryStorageAds(struct soap *soap, struct condor__queryStorageAds *a)
{
	soap_default_string(soap, &a->constraint);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__queryStorageAds(struct soap *soap, const struct condor__queryStorageAds *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__queryStorageAds);
	soap_out_condor__queryStorageAds(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__queryStorageAds(struct soap *soap, const char *tag, int id, const struct condor__queryStorageAds *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__queryStorageAds), type);
	soap_out_string(soap, "constraint", -1, &a->constraint, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condor__queryStorageAds * SOAP_FMAC4 soap_get_condor__queryStorageAds(struct soap *soap, struct condor__queryStorageAds *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__queryStorageAds(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__queryStorageAds * SOAP_FMAC4 soap_in_condor__queryStorageAds(struct soap *soap, const char *tag, struct condor__queryStorageAds *a, const char *type)
{
	short soap_flag_constraint = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condor__queryStorageAds *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryStorageAds, sizeof(struct condor__queryStorageAds), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condor__queryStorageAds(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_constraint && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "constraint", &a->constraint, ""))
				{	soap_flag_constraint = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_constraint))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condor__queryStorageAds *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryStorageAds, sizeof(struct condor__queryStorageAds), 0), SOAP_TYPE_condor__queryStorageAds, sizeof(struct condor__queryStorageAds));
		if (soap->alloced)
			soap_default_condor__queryStorageAds(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__queryStorageAdsResponse(struct soap *soap, struct condor__queryStorageAdsResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condor__queryStorageAdsResponse))
		soap_mark_condor__queryStorageAdsResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condor__queryStorageAdsResponse(struct soap *soap, const struct condor__queryStorageAdsResponse *a)
{
	soap_embedded(soap, &a->result, SOAP_TYPE_ClassAdStructArray);
	soap_mark_ClassAdStructArray(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__queryStorageAdsResponse(struct soap *soap, struct condor__queryStorageAdsResponse *a)
{
	soap_default_ClassAdStructArray(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__queryStorageAdsResponse(struct soap *soap, const struct condor__queryStorageAdsResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__queryStorageAdsResponse);
	soap_out_condor__queryStorageAdsResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__queryStorageAdsResponse(struct soap *soap, const char *tag, int id, const struct condor__queryStorageAdsResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__queryStorageAdsResponse), type);
	soap_element_result(soap, "result");
	soap_out_ClassAdStructArray(soap, "result", -1, &a->result, "condor:ClassAdStructAttr[]");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condor__queryStorageAdsResponse * SOAP_FMAC4 soap_get_condor__queryStorageAdsResponse(struct soap *soap, struct condor__queryStorageAdsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__queryStorageAdsResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__queryStorageAdsResponse * SOAP_FMAC4 soap_in_condor__queryStorageAdsResponse(struct soap *soap, const char *tag, struct condor__queryStorageAdsResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condor__queryStorageAdsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryStorageAdsResponse, sizeof(struct condor__queryStorageAdsResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condor__queryStorageAdsResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ClassAdStructArray(soap, "result", &a->result, "condor:ClassAdStructAttr[]"))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condor__queryStorageAdsResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryStorageAdsResponse, sizeof(struct condor__queryStorageAdsResponse), 0), SOAP_TYPE_condor__queryStorageAdsResponse, sizeof(struct condor__queryStorageAdsResponse));
		if (soap->alloced)
			soap_default_condor__queryStorageAdsResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__queryLicenseAds(struct soap *soap, struct condor__queryLicenseAds const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condor__queryLicenseAds))
		soap_mark_condor__queryLicenseAds(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condor__queryLicenseAds(struct soap *soap, const struct condor__queryLicenseAds *a)
{
	soap_embedded(soap, &a->constraint, SOAP_TYPE_string);
	soap_mark_string(soap, &a->constraint);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__queryLicenseAds(struct soap *soap, struct condor__queryLicenseAds *a)
{
	soap_default_string(soap, &a->constraint);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__queryLicenseAds(struct soap *soap, const struct condor__queryLicenseAds *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__queryLicenseAds);
	soap_out_condor__queryLicenseAds(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__queryLicenseAds(struct soap *soap, const char *tag, int id, const struct condor__queryLicenseAds *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__queryLicenseAds), type);
	soap_out_string(soap, "constraint", -1, &a->constraint, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condor__queryLicenseAds * SOAP_FMAC4 soap_get_condor__queryLicenseAds(struct soap *soap, struct condor__queryLicenseAds *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__queryLicenseAds(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__queryLicenseAds * SOAP_FMAC4 soap_in_condor__queryLicenseAds(struct soap *soap, const char *tag, struct condor__queryLicenseAds *a, const char *type)
{
	short soap_flag_constraint = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condor__queryLicenseAds *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryLicenseAds, sizeof(struct condor__queryLicenseAds), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condor__queryLicenseAds(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_constraint && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "constraint", &a->constraint, ""))
				{	soap_flag_constraint = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_constraint))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condor__queryLicenseAds *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryLicenseAds, sizeof(struct condor__queryLicenseAds), 0), SOAP_TYPE_condor__queryLicenseAds, sizeof(struct condor__queryLicenseAds));
		if (soap->alloced)
			soap_default_condor__queryLicenseAds(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__queryLicenseAdsResponse(struct soap *soap, struct condor__queryLicenseAdsResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condor__queryLicenseAdsResponse))
		soap_mark_condor__queryLicenseAdsResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condor__queryLicenseAdsResponse(struct soap *soap, const struct condor__queryLicenseAdsResponse *a)
{
	soap_embedded(soap, &a->result, SOAP_TYPE_ClassAdStructArray);
	soap_mark_ClassAdStructArray(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__queryLicenseAdsResponse(struct soap *soap, struct condor__queryLicenseAdsResponse *a)
{
	soap_default_ClassAdStructArray(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__queryLicenseAdsResponse(struct soap *soap, const struct condor__queryLicenseAdsResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__queryLicenseAdsResponse);
	soap_out_condor__queryLicenseAdsResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__queryLicenseAdsResponse(struct soap *soap, const char *tag, int id, const struct condor__queryLicenseAdsResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__queryLicenseAdsResponse), type);
	soap_element_result(soap, "result");
	soap_out_ClassAdStructArray(soap, "result", -1, &a->result, "condor:ClassAdStructAttr[]");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condor__queryLicenseAdsResponse * SOAP_FMAC4 soap_get_condor__queryLicenseAdsResponse(struct soap *soap, struct condor__queryLicenseAdsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__queryLicenseAdsResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__queryLicenseAdsResponse * SOAP_FMAC4 soap_in_condor__queryLicenseAdsResponse(struct soap *soap, const char *tag, struct condor__queryLicenseAdsResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condor__queryLicenseAdsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryLicenseAdsResponse, sizeof(struct condor__queryLicenseAdsResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condor__queryLicenseAdsResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ClassAdStructArray(soap, "result", &a->result, "condor:ClassAdStructAttr[]"))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condor__queryLicenseAdsResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryLicenseAdsResponse, sizeof(struct condor__queryLicenseAdsResponse), 0), SOAP_TYPE_condor__queryLicenseAdsResponse, sizeof(struct condor__queryLicenseAdsResponse));
		if (soap->alloced)
			soap_default_condor__queryLicenseAdsResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__querySubmittorAds(struct soap *soap, struct condor__querySubmittorAds const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condor__querySubmittorAds))
		soap_mark_condor__querySubmittorAds(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condor__querySubmittorAds(struct soap *soap, const struct condor__querySubmittorAds *a)
{
	soap_embedded(soap, &a->constraint, SOAP_TYPE_string);
	soap_mark_string(soap, &a->constraint);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__querySubmittorAds(struct soap *soap, struct condor__querySubmittorAds *a)
{
	soap_default_string(soap, &a->constraint);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__querySubmittorAds(struct soap *soap, const struct condor__querySubmittorAds *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__querySubmittorAds);
	soap_out_condor__querySubmittorAds(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__querySubmittorAds(struct soap *soap, const char *tag, int id, const struct condor__querySubmittorAds *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__querySubmittorAds), type);
	soap_out_string(soap, "constraint", -1, &a->constraint, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condor__querySubmittorAds * SOAP_FMAC4 soap_get_condor__querySubmittorAds(struct soap *soap, struct condor__querySubmittorAds *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__querySubmittorAds(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__querySubmittorAds * SOAP_FMAC4 soap_in_condor__querySubmittorAds(struct soap *soap, const char *tag, struct condor__querySubmittorAds *a, const char *type)
{
	short soap_flag_constraint = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condor__querySubmittorAds *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__querySubmittorAds, sizeof(struct condor__querySubmittorAds), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condor__querySubmittorAds(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_constraint && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "constraint", &a->constraint, ""))
				{	soap_flag_constraint = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_constraint))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condor__querySubmittorAds *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__querySubmittorAds, sizeof(struct condor__querySubmittorAds), 0), SOAP_TYPE_condor__querySubmittorAds, sizeof(struct condor__querySubmittorAds));
		if (soap->alloced)
			soap_default_condor__querySubmittorAds(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__querySubmittorAdsResponse(struct soap *soap, struct condor__querySubmittorAdsResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condor__querySubmittorAdsResponse))
		soap_mark_condor__querySubmittorAdsResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condor__querySubmittorAdsResponse(struct soap *soap, const struct condor__querySubmittorAdsResponse *a)
{
	soap_embedded(soap, &a->result, SOAP_TYPE_ClassAdStructArray);
	soap_mark_ClassAdStructArray(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__querySubmittorAdsResponse(struct soap *soap, struct condor__querySubmittorAdsResponse *a)
{
	soap_default_ClassAdStructArray(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__querySubmittorAdsResponse(struct soap *soap, const struct condor__querySubmittorAdsResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__querySubmittorAdsResponse);
	soap_out_condor__querySubmittorAdsResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__querySubmittorAdsResponse(struct soap *soap, const char *tag, int id, const struct condor__querySubmittorAdsResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__querySubmittorAdsResponse), type);
	soap_element_result(soap, "result");
	soap_out_ClassAdStructArray(soap, "result", -1, &a->result, "condor:ClassAdStructAttr[]");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condor__querySubmittorAdsResponse * SOAP_FMAC4 soap_get_condor__querySubmittorAdsResponse(struct soap *soap, struct condor__querySubmittorAdsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__querySubmittorAdsResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__querySubmittorAdsResponse * SOAP_FMAC4 soap_in_condor__querySubmittorAdsResponse(struct soap *soap, const char *tag, struct condor__querySubmittorAdsResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condor__querySubmittorAdsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__querySubmittorAdsResponse, sizeof(struct condor__querySubmittorAdsResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condor__querySubmittorAdsResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ClassAdStructArray(soap, "result", &a->result, "condor:ClassAdStructAttr[]"))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condor__querySubmittorAdsResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__querySubmittorAdsResponse, sizeof(struct condor__querySubmittorAdsResponse), 0), SOAP_TYPE_condor__querySubmittorAdsResponse, sizeof(struct condor__querySubmittorAdsResponse));
		if (soap->alloced)
			soap_default_condor__querySubmittorAdsResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__queryMasterAds(struct soap *soap, struct condor__queryMasterAds const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condor__queryMasterAds))
		soap_mark_condor__queryMasterAds(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condor__queryMasterAds(struct soap *soap, const struct condor__queryMasterAds *a)
{
	soap_embedded(soap, &a->constraint, SOAP_TYPE_string);
	soap_mark_string(soap, &a->constraint);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__queryMasterAds(struct soap *soap, struct condor__queryMasterAds *a)
{
	soap_default_string(soap, &a->constraint);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__queryMasterAds(struct soap *soap, const struct condor__queryMasterAds *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__queryMasterAds);
	soap_out_condor__queryMasterAds(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__queryMasterAds(struct soap *soap, const char *tag, int id, const struct condor__queryMasterAds *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__queryMasterAds), type);
	soap_out_string(soap, "constraint", -1, &a->constraint, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condor__queryMasterAds * SOAP_FMAC4 soap_get_condor__queryMasterAds(struct soap *soap, struct condor__queryMasterAds *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__queryMasterAds(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__queryMasterAds * SOAP_FMAC4 soap_in_condor__queryMasterAds(struct soap *soap, const char *tag, struct condor__queryMasterAds *a, const char *type)
{
	short soap_flag_constraint = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condor__queryMasterAds *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryMasterAds, sizeof(struct condor__queryMasterAds), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condor__queryMasterAds(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_constraint && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "constraint", &a->constraint, ""))
				{	soap_flag_constraint = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_constraint))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condor__queryMasterAds *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryMasterAds, sizeof(struct condor__queryMasterAds), 0), SOAP_TYPE_condor__queryMasterAds, sizeof(struct condor__queryMasterAds));
		if (soap->alloced)
			soap_default_condor__queryMasterAds(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__queryMasterAdsResponse(struct soap *soap, struct condor__queryMasterAdsResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condor__queryMasterAdsResponse))
		soap_mark_condor__queryMasterAdsResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condor__queryMasterAdsResponse(struct soap *soap, const struct condor__queryMasterAdsResponse *a)
{
	soap_embedded(soap, &a->result, SOAP_TYPE_ClassAdStructArray);
	soap_mark_ClassAdStructArray(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__queryMasterAdsResponse(struct soap *soap, struct condor__queryMasterAdsResponse *a)
{
	soap_default_ClassAdStructArray(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__queryMasterAdsResponse(struct soap *soap, const struct condor__queryMasterAdsResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__queryMasterAdsResponse);
	soap_out_condor__queryMasterAdsResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__queryMasterAdsResponse(struct soap *soap, const char *tag, int id, const struct condor__queryMasterAdsResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__queryMasterAdsResponse), type);
	soap_element_result(soap, "result");
	soap_out_ClassAdStructArray(soap, "result", -1, &a->result, "condor:ClassAdStructAttr[]");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condor__queryMasterAdsResponse * SOAP_FMAC4 soap_get_condor__queryMasterAdsResponse(struct soap *soap, struct condor__queryMasterAdsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__queryMasterAdsResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__queryMasterAdsResponse * SOAP_FMAC4 soap_in_condor__queryMasterAdsResponse(struct soap *soap, const char *tag, struct condor__queryMasterAdsResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condor__queryMasterAdsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryMasterAdsResponse, sizeof(struct condor__queryMasterAdsResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condor__queryMasterAdsResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ClassAdStructArray(soap, "result", &a->result, "condor:ClassAdStructAttr[]"))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condor__queryMasterAdsResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryMasterAdsResponse, sizeof(struct condor__queryMasterAdsResponse), 0), SOAP_TYPE_condor__queryMasterAdsResponse, sizeof(struct condor__queryMasterAdsResponse));
		if (soap->alloced)
			soap_default_condor__queryMasterAdsResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__queryScheddAds(struct soap *soap, struct condor__queryScheddAds const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condor__queryScheddAds))
		soap_mark_condor__queryScheddAds(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condor__queryScheddAds(struct soap *soap, const struct condor__queryScheddAds *a)
{
	soap_embedded(soap, &a->constraint, SOAP_TYPE_string);
	soap_mark_string(soap, &a->constraint);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__queryScheddAds(struct soap *soap, struct condor__queryScheddAds *a)
{
	soap_default_string(soap, &a->constraint);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__queryScheddAds(struct soap *soap, const struct condor__queryScheddAds *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__queryScheddAds);
	soap_out_condor__queryScheddAds(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__queryScheddAds(struct soap *soap, const char *tag, int id, const struct condor__queryScheddAds *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__queryScheddAds), type);
	soap_out_string(soap, "constraint", -1, &a->constraint, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condor__queryScheddAds * SOAP_FMAC4 soap_get_condor__queryScheddAds(struct soap *soap, struct condor__queryScheddAds *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__queryScheddAds(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__queryScheddAds * SOAP_FMAC4 soap_in_condor__queryScheddAds(struct soap *soap, const char *tag, struct condor__queryScheddAds *a, const char *type)
{
	short soap_flag_constraint = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condor__queryScheddAds *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryScheddAds, sizeof(struct condor__queryScheddAds), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condor__queryScheddAds(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_constraint && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "constraint", &a->constraint, ""))
				{	soap_flag_constraint = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_constraint))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condor__queryScheddAds *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryScheddAds, sizeof(struct condor__queryScheddAds), 0), SOAP_TYPE_condor__queryScheddAds, sizeof(struct condor__queryScheddAds));
		if (soap->alloced)
			soap_default_condor__queryScheddAds(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__queryScheddAdsResponse(struct soap *soap, struct condor__queryScheddAdsResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condor__queryScheddAdsResponse))
		soap_mark_condor__queryScheddAdsResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condor__queryScheddAdsResponse(struct soap *soap, const struct condor__queryScheddAdsResponse *a)
{
	soap_embedded(soap, &a->result, SOAP_TYPE_ClassAdStructArray);
	soap_mark_ClassAdStructArray(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__queryScheddAdsResponse(struct soap *soap, struct condor__queryScheddAdsResponse *a)
{
	soap_default_ClassAdStructArray(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__queryScheddAdsResponse(struct soap *soap, const struct condor__queryScheddAdsResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__queryScheddAdsResponse);
	soap_out_condor__queryScheddAdsResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__queryScheddAdsResponse(struct soap *soap, const char *tag, int id, const struct condor__queryScheddAdsResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__queryScheddAdsResponse), type);
	soap_element_result(soap, "result");
	soap_out_ClassAdStructArray(soap, "result", -1, &a->result, "condor:ClassAdStructAttr[]");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condor__queryScheddAdsResponse * SOAP_FMAC4 soap_get_condor__queryScheddAdsResponse(struct soap *soap, struct condor__queryScheddAdsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__queryScheddAdsResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__queryScheddAdsResponse * SOAP_FMAC4 soap_in_condor__queryScheddAdsResponse(struct soap *soap, const char *tag, struct condor__queryScheddAdsResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condor__queryScheddAdsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryScheddAdsResponse, sizeof(struct condor__queryScheddAdsResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condor__queryScheddAdsResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ClassAdStructArray(soap, "result", &a->result, "condor:ClassAdStructAttr[]"))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condor__queryScheddAdsResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryScheddAdsResponse, sizeof(struct condor__queryScheddAdsResponse), 0), SOAP_TYPE_condor__queryScheddAdsResponse, sizeof(struct condor__queryScheddAdsResponse));
		if (soap->alloced)
			soap_default_condor__queryScheddAdsResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__queryStartdAds(struct soap *soap, struct condor__queryStartdAds const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condor__queryStartdAds))
		soap_mark_condor__queryStartdAds(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condor__queryStartdAds(struct soap *soap, const struct condor__queryStartdAds *a)
{
	soap_embedded(soap, &a->constraint, SOAP_TYPE_string);
	soap_mark_string(soap, &a->constraint);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__queryStartdAds(struct soap *soap, struct condor__queryStartdAds *a)
{
	soap_default_string(soap, &a->constraint);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__queryStartdAds(struct soap *soap, const struct condor__queryStartdAds *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__queryStartdAds);
	soap_out_condor__queryStartdAds(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__queryStartdAds(struct soap *soap, const char *tag, int id, const struct condor__queryStartdAds *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__queryStartdAds), type);
	soap_out_string(soap, "constraint", -1, &a->constraint, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condor__queryStartdAds * SOAP_FMAC4 soap_get_condor__queryStartdAds(struct soap *soap, struct condor__queryStartdAds *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__queryStartdAds(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__queryStartdAds * SOAP_FMAC4 soap_in_condor__queryStartdAds(struct soap *soap, const char *tag, struct condor__queryStartdAds *a, const char *type)
{
	short soap_flag_constraint = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condor__queryStartdAds *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryStartdAds, sizeof(struct condor__queryStartdAds), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condor__queryStartdAds(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_constraint && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "constraint", &a->constraint, ""))
				{	soap_flag_constraint = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_constraint))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condor__queryStartdAds *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryStartdAds, sizeof(struct condor__queryStartdAds), 0), SOAP_TYPE_condor__queryStartdAds, sizeof(struct condor__queryStartdAds));
		if (soap->alloced)
			soap_default_condor__queryStartdAds(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__queryStartdAdsResponse(struct soap *soap, struct condor__queryStartdAdsResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condor__queryStartdAdsResponse))
		soap_mark_condor__queryStartdAdsResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condor__queryStartdAdsResponse(struct soap *soap, const struct condor__queryStartdAdsResponse *a)
{
	soap_embedded(soap, &a->result, SOAP_TYPE_ClassAdStructArray);
	soap_mark_ClassAdStructArray(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__queryStartdAdsResponse(struct soap *soap, struct condor__queryStartdAdsResponse *a)
{
	soap_default_ClassAdStructArray(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__queryStartdAdsResponse(struct soap *soap, const struct condor__queryStartdAdsResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__queryStartdAdsResponse);
	soap_out_condor__queryStartdAdsResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__queryStartdAdsResponse(struct soap *soap, const char *tag, int id, const struct condor__queryStartdAdsResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__queryStartdAdsResponse), type);
	soap_element_result(soap, "result");
	soap_out_ClassAdStructArray(soap, "result", -1, &a->result, "condor:ClassAdStructAttr[]");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condor__queryStartdAdsResponse * SOAP_FMAC4 soap_get_condor__queryStartdAdsResponse(struct soap *soap, struct condor__queryStartdAdsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__queryStartdAdsResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__queryStartdAdsResponse * SOAP_FMAC4 soap_in_condor__queryStartdAdsResponse(struct soap *soap, const char *tag, struct condor__queryStartdAdsResponse *a, const char *type)
{
	short soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condor__queryStartdAdsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryStartdAdsResponse, sizeof(struct condor__queryStartdAdsResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condor__queryStartdAdsResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ClassAdStructArray(soap, "result", &a->result, "condor:ClassAdStructAttr[]"))
				{	soap_flag_result = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condor__queryStartdAdsResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__queryStartdAdsResponse, sizeof(struct condor__queryStartdAdsResponse), 0), SOAP_TYPE_condor__queryStartdAdsResponse, sizeof(struct condor__queryStartdAdsResponse));
		if (soap->alloced)
			soap_default_condor__queryStartdAdsResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__StringAndStatus(struct soap *soap, struct condor__StringAndStatus const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condor__StringAndStatus))
		soap_mark_condor__StringAndStatus(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condor__StringAndStatus(struct soap *soap, const struct condor__StringAndStatus *a)
{
	soap_embedded(soap, &a->status, SOAP_TYPE_condor__Status);
	soap_mark_condor__Status(soap, &a->status);
	soap_embedded(soap, &a->message, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->message);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__StringAndStatus(struct soap *soap, struct condor__StringAndStatus *a)
{
	soap_default_condor__Status(soap, &a->status);
	soap_default_xsd__string(soap, &a->message);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__StringAndStatus(struct soap *soap, const struct condor__StringAndStatus *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__StringAndStatus);
	soap_out_condor__StringAndStatus(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__StringAndStatus(struct soap *soap, const char *tag, int id, const struct condor__StringAndStatus *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__StringAndStatus), type);
	soap_out_condor__Status(soap, "status", -1, &a->status, "condor:Status");
	soap_out_xsd__string(soap, "message", -1, &a->message, "xsd:string");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condor__StringAndStatus * SOAP_FMAC4 soap_get_condor__StringAndStatus(struct soap *soap, struct condor__StringAndStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__StringAndStatus(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__StringAndStatus * SOAP_FMAC4 soap_in_condor__StringAndStatus(struct soap *soap, const char *tag, struct condor__StringAndStatus *a, const char *type)
{
	short soap_flag_status = 1, soap_flag_message = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condor__StringAndStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__StringAndStatus, sizeof(struct condor__StringAndStatus), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condor__StringAndStatus(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condor__Status(soap, "status", &a->status, "condor:Status"))
				{	soap_flag_status = 0;
					continue;
				}
			if (soap_flag_message && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "message", &a->message, "xsd:string"))
				{	soap_flag_message = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_status))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condor__StringAndStatus *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__StringAndStatus, sizeof(struct condor__StringAndStatus), 0), SOAP_TYPE_condor__StringAndStatus, sizeof(struct condor__StringAndStatus));
		if (soap->alloced)
			soap_default_condor__StringAndStatus(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__ClassAdStructArrayAndStatus(struct soap *soap, struct condor__ClassAdStructArrayAndStatus const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condor__ClassAdStructArrayAndStatus))
		soap_mark_condor__ClassAdStructArrayAndStatus(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condor__ClassAdStructArrayAndStatus(struct soap *soap, const struct condor__ClassAdStructArrayAndStatus *a)
{
	soap_embedded(soap, &a->status, SOAP_TYPE_condor__Status);
	soap_mark_condor__Status(soap, &a->status);
	soap_embedded(soap, &a->classAdArray, SOAP_TYPE_ClassAdStructArray);
	soap_mark_ClassAdStructArray(soap, &a->classAdArray);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__ClassAdStructArrayAndStatus(struct soap *soap, struct condor__ClassAdStructArrayAndStatus *a)
{
	soap_default_condor__Status(soap, &a->status);
	soap_default_ClassAdStructArray(soap, &a->classAdArray);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__ClassAdStructArrayAndStatus(struct soap *soap, const struct condor__ClassAdStructArrayAndStatus *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__ClassAdStructArrayAndStatus);
	soap_out_condor__ClassAdStructArrayAndStatus(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__ClassAdStructArrayAndStatus(struct soap *soap, const char *tag, int id, const struct condor__ClassAdStructArrayAndStatus *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__ClassAdStructArrayAndStatus), type);
	soap_out_condor__Status(soap, "status", -1, &a->status, "condor:Status");
	soap_out_ClassAdStructArray(soap, "classAdArray", -1, &a->classAdArray, "condor:ClassAdStructAttr[]");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condor__ClassAdStructArrayAndStatus * SOAP_FMAC4 soap_get_condor__ClassAdStructArrayAndStatus(struct soap *soap, struct condor__ClassAdStructArrayAndStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__ClassAdStructArrayAndStatus(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__ClassAdStructArrayAndStatus * SOAP_FMAC4 soap_in_condor__ClassAdStructArrayAndStatus(struct soap *soap, const char *tag, struct condor__ClassAdStructArrayAndStatus *a, const char *type)
{
	short soap_flag_status = 1, soap_flag_classAdArray = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condor__ClassAdStructArrayAndStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__ClassAdStructArrayAndStatus, sizeof(struct condor__ClassAdStructArrayAndStatus), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condor__ClassAdStructArrayAndStatus(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condor__Status(soap, "status", &a->status, "condor:Status"))
				{	soap_flag_status = 0;
					continue;
				}
			if (soap_flag_classAdArray && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ClassAdStructArray(soap, "classAdArray", &a->classAdArray, "condor:ClassAdStructAttr[]"))
				{	soap_flag_classAdArray = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_status))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condor__ClassAdStructArrayAndStatus *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__ClassAdStructArrayAndStatus, sizeof(struct condor__ClassAdStructArrayAndStatus), 0), SOAP_TYPE_condor__ClassAdStructArrayAndStatus, sizeof(struct condor__ClassAdStructArrayAndStatus));
		if (soap->alloced)
			soap_default_condor__ClassAdStructArrayAndStatus(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__ClassAdStructAndStatus(struct soap *soap, struct condor__ClassAdStructAndStatus const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condor__ClassAdStructAndStatus))
		soap_mark_condor__ClassAdStructAndStatus(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condor__ClassAdStructAndStatus(struct soap *soap, const struct condor__ClassAdStructAndStatus *a)
{
	soap_embedded(soap, &a->status, SOAP_TYPE_condor__Status);
	soap_mark_condor__Status(soap, &a->status);
	soap_embedded(soap, &a->classAd, SOAP_TYPE_ClassAdStruct);
	soap_mark_ClassAdStruct(soap, &a->classAd);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__ClassAdStructAndStatus(struct soap *soap, struct condor__ClassAdStructAndStatus *a)
{
	soap_default_condor__Status(soap, &a->status);
	soap_default_ClassAdStruct(soap, &a->classAd);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__ClassAdStructAndStatus(struct soap *soap, const struct condor__ClassAdStructAndStatus *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__ClassAdStructAndStatus);
	soap_out_condor__ClassAdStructAndStatus(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__ClassAdStructAndStatus(struct soap *soap, const char *tag, int id, const struct condor__ClassAdStructAndStatus *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__ClassAdStructAndStatus), type);
	soap_out_condor__Status(soap, "status", -1, &a->status, "condor:Status");
	soap_out_ClassAdStruct(soap, "classAd", -1, &a->classAd, "condor:ClassAdStructAttr");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condor__ClassAdStructAndStatus * SOAP_FMAC4 soap_get_condor__ClassAdStructAndStatus(struct soap *soap, struct condor__ClassAdStructAndStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__ClassAdStructAndStatus(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__ClassAdStructAndStatus * SOAP_FMAC4 soap_in_condor__ClassAdStructAndStatus(struct soap *soap, const char *tag, struct condor__ClassAdStructAndStatus *a, const char *type)
{
	short soap_flag_status = 1, soap_flag_classAd = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condor__ClassAdStructAndStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__ClassAdStructAndStatus, sizeof(struct condor__ClassAdStructAndStatus), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condor__ClassAdStructAndStatus(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condor__Status(soap, "status", &a->status, "condor:Status"))
				{	soap_flag_status = 0;
					continue;
				}
			if (soap_flag_classAd && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ClassAdStruct(soap, "classAd", &a->classAd, "condor:ClassAdStructAttr"))
				{	soap_flag_classAd = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_status))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condor__ClassAdStructAndStatus *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__ClassAdStructAndStatus, sizeof(struct condor__ClassAdStructAndStatus), 0), SOAP_TYPE_condor__ClassAdStructAndStatus, sizeof(struct condor__ClassAdStructAndStatus));
		if (soap->alloced)
			soap_default_condor__ClassAdStructAndStatus(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ClassAdStructArray(struct soap *soap, struct ClassAdStructArray const*a)
{
	soap_mark_ClassAdStructArray(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_ClassAdStructArray(struct soap *soap, struct ClassAdStructArray const*a)
{
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, a->__size, SOAP_TYPE_ClassAdStructArray))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_ClassAdStruct);
			soap_mark_ClassAdStruct(soap, a->__ptr + i);
		}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ClassAdStructArray(struct soap *soap, struct ClassAdStructArray *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ClassAdStructArray(struct soap *soap, const struct ClassAdStructArray *a, const char *tag, const char *type)
{
	int i = soap_embed_array(soap, (void*)a, (struct soap_array*)&a->__ptr, a->__size, tag, SOAP_TYPE_ClassAdStructArray);
	soap_out_ClassAdStructArray(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ClassAdStructArray(struct soap *soap, const char *tag, int id, const struct ClassAdStructArray *a, const char *type)
{
	int i;
	struct soap_plist *pp;
	int n = a->__size;
	char *t = soap_putsize(soap, type, a->__size);
	i = soap_array_pointer_lookup(soap, a, (struct soap_array*)&a->__ptr, n, SOAP_TYPE_ClassAdStructArray, &pp);
	if (!a->__ptr)
	{	soap_element_null(soap, tag, i, t);
		return SOAP_OK;
	}
	if (id <= 0 && i)
	{	if (soap_is_embedded(soap, pp))
		{	soap_element_ref(soap, tag, 0, i);
			return SOAP_OK;
		}
		if (soap_is_single(soap, pp))
			i = 0;
	}
	else if (id > 0)
		i = id;
	soap_array_begin_out(soap, tag, i, t, NULL);
	if (i > 0)
		soap_set_embedded(soap, pp);
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_ClassAdStruct(soap, "item", 0, &a->__ptr[i], "condor:ClassAdStructAttr");
	}
	soap->position = 0;
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ClassAdStructArray * SOAP_FMAC4 soap_get_ClassAdStructArray(struct soap *soap, struct ClassAdStructArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_ClassAdStructArray(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ClassAdStructArray * SOAP_FMAC4 soap_in_ClassAdStructArray(struct soap *soap, const char *tag, struct ClassAdStructArray *a, const char *type)
{	int i, j;
	struct ClassAdStruct *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if ((a = (struct ClassAdStructArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStructArray, sizeof(struct ClassAdStructArray), 0)))
			soap_default_ClassAdStructArray(soap, a);
			if (soap->body && soap_element_end_in(soap, tag))
				return NULL;
	}
	else if (!*soap->href)
	{	if (!(a = (struct ClassAdStructArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStructArray, sizeof(struct ClassAdStructArray), 0)))
			return NULL;
		if (soap->alloced)
			soap_default_ClassAdStructArray(soap, a);
		if (soap->body)
		{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (struct ClassAdStruct *)soap_malloc(soap, sizeof(struct ClassAdStruct) * a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_ClassAdStruct(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
					return NULL;
					}
				}
				if (!soap_in_ClassAdStruct(soap, NULL, a->__ptr + i, "condor:ClassAdStructAttr"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (struct ClassAdStruct *)soap_push_block(soap, sizeof(struct ClassAdStruct));
				if (!p)
					return NULL;
				soap_default_ClassAdStruct(soap, p);
				if (!soap_in_ClassAdStruct(soap, NULL, p, "condor:ClassAdStructAttr"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
			soap_pop_block(soap);
			a->__ptr = (struct ClassAdStruct *)soap_malloc(soap, soap->blist->size);
			soap_store_block(soap, (char*)a->__ptr);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct ClassAdStructArray *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStructArray, sizeof(struct ClassAdStructArray), 0), SOAP_TYPE_ClassAdStructArray, sizeof(struct ClassAdStructArray));
		if (soap->alloced)
			soap_default_ClassAdStructArray(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ClassAdStruct(struct soap *soap, struct ClassAdStruct const*a)
{
	soap_mark_ClassAdStruct(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_ClassAdStruct(struct soap *soap, struct ClassAdStruct const*a)
{
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, a->__size, SOAP_TYPE_ClassAdStruct))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_condor__ClassAdStructAttr);
			soap_mark_condor__ClassAdStructAttr(soap, a->__ptr + i);
		}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ClassAdStruct(struct soap *soap, struct ClassAdStruct *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ClassAdStruct(struct soap *soap, const struct ClassAdStruct *a, const char *tag, const char *type)
{
	int i = soap_embed_array(soap, (void*)a, (struct soap_array*)&a->__ptr, a->__size, tag, SOAP_TYPE_ClassAdStruct);
	soap_out_ClassAdStruct(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ClassAdStruct(struct soap *soap, const char *tag, int id, const struct ClassAdStruct *a, const char *type)
{
	int i;
	struct soap_plist *pp;
	int n = a->__size;
	char *t = soap_putsize(soap, type, a->__size);
	i = soap_array_pointer_lookup(soap, a, (struct soap_array*)&a->__ptr, n, SOAP_TYPE_ClassAdStruct, &pp);
	if (!a->__ptr)
	{	soap_element_null(soap, tag, i, t);
		return SOAP_OK;
	}
	if (id <= 0 && i)
	{	if (soap_is_embedded(soap, pp))
		{	soap_element_ref(soap, tag, 0, i);
			return SOAP_OK;
		}
		if (soap_is_single(soap, pp))
			i = 0;
	}
	else if (id > 0)
		i = id;
	soap_array_begin_out(soap, tag, i, t, NULL);
	if (i > 0)
		soap_set_embedded(soap, pp);
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_condor__ClassAdStructAttr(soap, "item", 0, &a->__ptr[i], "condor:ClassAdStructAttr");
	}
	soap->position = 0;
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct ClassAdStruct * SOAP_FMAC4 soap_get_ClassAdStruct(struct soap *soap, struct ClassAdStruct *p, const char *tag, const char *type)
{
	if ((p = soap_in_ClassAdStruct(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ClassAdStruct * SOAP_FMAC4 soap_in_ClassAdStruct(struct soap *soap, const char *tag, struct ClassAdStruct *a, const char *type)
{	int i, j;
	struct condor__ClassAdStructAttr *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if ((a = (struct ClassAdStruct *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct), 0)))
			soap_default_ClassAdStruct(soap, a);
			if (soap->body && soap_element_end_in(soap, tag))
				return NULL;
	}
	else if (!*soap->href)
	{	if (!(a = (struct ClassAdStruct *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct), 0)))
			return NULL;
		if (soap->alloced)
			soap_default_ClassAdStruct(soap, a);
		if (soap->body)
		{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (struct condor__ClassAdStructAttr *)soap_malloc(soap, sizeof(struct condor__ClassAdStructAttr) * a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_condor__ClassAdStructAttr(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
					return NULL;
					}
				}
				if (!soap_in_condor__ClassAdStructAttr(soap, NULL, a->__ptr + i, "condor:ClassAdStructAttr"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (struct condor__ClassAdStructAttr *)soap_push_block(soap, sizeof(struct condor__ClassAdStructAttr));
				if (!p)
					return NULL;
				soap_default_condor__ClassAdStructAttr(soap, p);
				if (!soap_in_condor__ClassAdStructAttr(soap, NULL, p, "condor:ClassAdStructAttr"))
				{	if (soap->error == SOAP_NO_TAG)
					{	soap->error = SOAP_OK;
						break;
					}
					else
						return NULL;
				}
			}
			soap_pop_block(soap);
			a->__ptr = (struct condor__ClassAdStructAttr *)soap_malloc(soap, soap->blist->size);
			soap_store_block(soap, (char*)a->__ptr);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct ClassAdStruct *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct), 0), SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct));
		if (soap->alloced)
			soap_default_ClassAdStruct(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__ClassAdStructAttr(struct soap *soap, struct condor__ClassAdStructAttr const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condor__ClassAdStructAttr))
		soap_mark_condor__ClassAdStructAttr(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condor__ClassAdStructAttr(struct soap *soap, const struct condor__ClassAdStructAttr *a)
{
	soap_embedded(soap, &a->name, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->name);
	soap_embedded(soap, &a->type, SOAP_TYPE_condor__ClassAdAttrType);
	soap_embedded(soap, &a->value, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->value);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__ClassAdStructAttr(struct soap *soap, struct condor__ClassAdStructAttr *a)
{
	soap_default_xsd__string(soap, &a->name);
	soap_default_condor__ClassAdAttrType(soap, &a->type);
	soap_default_xsd__string(soap, &a->value);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__ClassAdStructAttr(struct soap *soap, const struct condor__ClassAdStructAttr *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__ClassAdStructAttr);
	soap_out_condor__ClassAdStructAttr(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__ClassAdStructAttr(struct soap *soap, const char *tag, int id, const struct condor__ClassAdStructAttr *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__ClassAdStructAttr), type);
	soap_out_xsd__string(soap, "name", -1, &a->name, "xsd:string");
	soap_out_condor__ClassAdAttrType(soap, "type", -1, &a->type, "condor:ClassAdAttrType");
	soap_out_xsd__string(soap, "value", -1, &a->value, "xsd:string");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condor__ClassAdStructAttr * SOAP_FMAC4 soap_get_condor__ClassAdStructAttr(struct soap *soap, struct condor__ClassAdStructAttr *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__ClassAdStructAttr(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__ClassAdStructAttr * SOAP_FMAC4 soap_in_condor__ClassAdStructAttr(struct soap *soap, const char *tag, struct condor__ClassAdStructAttr *a, const char *type)
{
	short soap_flag_name = 1, soap_flag_type = 1, soap_flag_value = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condor__ClassAdStructAttr *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__ClassAdStructAttr, sizeof(struct condor__ClassAdStructAttr), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condor__ClassAdStructAttr(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name = 0;
					continue;
				}
			if (soap_flag_type && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condor__ClassAdAttrType(soap, "type", &a->type, "condor:ClassAdAttrType"))
				{	soap_flag_type = 0;
					continue;
				}
			if (soap_flag_value && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "value", &a->value, "xsd:string"))
				{	soap_flag_value = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_name || soap_flag_type || soap_flag_value))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condor__ClassAdStructAttr *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__ClassAdStructAttr, sizeof(struct condor__ClassAdStructAttr), 0), SOAP_TYPE_condor__ClassAdStructAttr, sizeof(struct condor__ClassAdStructAttr));
		if (soap->alloced)
			soap_default_condor__ClassAdStructAttr(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_condor__Status(struct soap *soap, struct condor__Status const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_condor__Status))
		soap_mark_condor__Status(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_condor__Status(struct soap *soap, const struct condor__Status *a)
{
	soap_embedded(soap, &a->code, SOAP_TYPE_condor__StatusCode);
	soap_embedded(soap, &a->message, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->message);
	soap_embedded(soap, &a->next, SOAP_TYPE_PointerTocondor__Status);
	soap_mark_PointerTocondor__Status(soap, &a->next);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_condor__Status(struct soap *soap, struct condor__Status *a)
{
	soap_default_condor__StatusCode(soap, &a->code);
	soap_default_xsd__string(soap, &a->message);
	soap_default_PointerTocondor__Status(soap, &a->next);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_condor__Status(struct soap *soap, const struct condor__Status *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_condor__Status);
	soap_out_condor__Status(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_condor__Status(struct soap *soap, const char *tag, int id, const struct condor__Status *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_condor__Status), type);
	soap_out_condor__StatusCode(soap, "code", -1, &a->code, "condor:StatusCode");
	soap_out_xsd__string(soap, "message", -1, &a->message, "xsd:string");
	soap_out_PointerTocondor__Status(soap, "next", -1, &a->next, "condor:Status");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct condor__Status * SOAP_FMAC4 soap_get_condor__Status(struct soap *soap, struct condor__Status *p, const char *tag, const char *type)
{
	if ((p = soap_in_condor__Status(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__Status * SOAP_FMAC4 soap_in_condor__Status(struct soap *soap, const char *tag, struct condor__Status *a, const char *type)
{
	short soap_flag_code = 1, soap_flag_message = 1, soap_flag_next = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct condor__Status *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__Status, sizeof(struct condor__Status), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_condor__Status(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_condor__StatusCode(soap, "code", &a->code, "condor:StatusCode"))
				{	soap_flag_code = 0;
					continue;
				}
			if (soap_flag_message && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "message", &a->message, "xsd:string"))
				{	soap_flag_message = 0;
					continue;
				}
			if (soap_flag_next && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocondor__Status(soap, "next", &a->next, "condor:Status"))
				{	soap_flag_next = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_code))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct condor__Status *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_condor__Status, sizeof(struct condor__Status), 0), SOAP_TYPE_condor__Status, sizeof(struct condor__Status));
		if (soap->alloced)
			soap_default_condor__Status(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__base64Binary(struct soap *soap, struct xsd__base64Binary const*a)
{
	soap_mark_xsd__base64Binary(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_xsd__base64Binary(struct soap *soap, struct xsd__base64Binary const*a)
{
	if (a->__ptr)
		soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, a->__size, SOAP_TYPE_xsd__base64Binary);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__base64Binary(struct soap *soap, struct xsd__base64Binary *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__base64Binary(struct soap *soap, const struct xsd__base64Binary *a, const char *tag, const char *type)
{
	int i = soap_embed_array(soap, (void*)a, (struct soap_array*)&a->__ptr, a->__size, tag, SOAP_TYPE_xsd__base64Binary);
	soap_out_xsd__base64Binary(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const struct xsd__base64Binary *a, const char *type)
{
	int i;
	struct soap_plist *pp;
	int n = a->__size;
	i = soap_array_pointer_lookup(soap, a, (struct soap_array*)&a->__ptr, n, SOAP_TYPE_xsd__base64Binary, &pp);
	if (!a->__ptr)
	{	soap_element_null(soap, tag, i, type);
		return SOAP_OK;
	}
	if (id <= 0 && i)
	{	if (soap_is_embedded(soap, pp))
		{	soap_element_ref(soap, tag, 0, i);
			return SOAP_OK;
		}
		if (soap_is_single(soap, pp))
			i = 0;
	}
	else if (id > 0)
		i = id;
	soap_element_begin_out(soap, tag, i, "xsd:base64Binary");
	if (i > 0)
		soap_set_embedded(soap, pp);
	soap_putbase64(soap, a->__ptr, a->__size);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, struct xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, struct xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, "SOAP-ENC:base64") && soap_match_tag(soap, soap->type, "SOAP-ENC:base64Binary"))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if ((a = (struct xsd__base64Binary *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(struct xsd__base64Binary), 0)))
			soap_default_xsd__base64Binary(soap, a);
			if (soap->body && soap_element_end_in(soap, tag))
				return NULL;
	}
	else if (!*soap->href)
	{	if (!(a = (struct xsd__base64Binary *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(struct xsd__base64Binary), 0)))
			return NULL;
		if (soap->alloced)
			soap_default_xsd__base64Binary(soap, a);
		if (soap->body)
		{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct xsd__base64Binary *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(struct xsd__base64Binary), 0), SOAP_TYPE_xsd__base64Binary, sizeof(struct xsd__base64Binary));
		if (soap->alloced)
			soap_default_xsd__base64Binary(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	}
	return a;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToSOAP_ENV__Code))
		soap_mark_PointerToSOAP_ENV__Code(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_mark_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	soap_out_PointerToSOAP_ENV__Code(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_SOAP_ENV__Code, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_SOAP_ENV__Code(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_SOAP_ENV__Code(soap, tag, i, *a, type);
	}
	return soap_out_SOAP_ENV__Code(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_SOAP_ENV__Code, &pp), *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	struct SOAP_ENV__Code *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct SOAP_ENV__Code **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToSOAP_ENV__Code, sizeof(struct SOAP_ENV__Code *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_SOAP_ENV__Code(soap, tag, NULL, type)))
		{	a = (struct SOAP_ENV__Code **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToSOAP_ENV__Code, sizeof(struct SOAP_ENV__Code *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToSOAP_ENV__Code, sizeof(struct SOAP_ENV__Code *), 1), SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToSOAP_ENV__Detail))
		soap_mark_PointerToSOAP_ENV__Detail(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_mark_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	soap_out_PointerToSOAP_ENV__Detail(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_SOAP_ENV__Detail, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_SOAP_ENV__Detail(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_SOAP_ENV__Detail(soap, tag, i, *a, type);
	}
	return soap_out_SOAP_ENV__Detail(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_SOAP_ENV__Detail, &pp), *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	struct SOAP_ENV__Detail *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct SOAP_ENV__Detail **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToSOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_SOAP_ENV__Detail(soap, tag, NULL, type)))
		{	a = (struct SOAP_ENV__Detail **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToSOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToSOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail *), 1), SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToClassAdStruct))
		soap_mark_PointerToClassAdStruct(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct *const*a)
{
	if (*a && !soap_array_reference(soap, *a, (struct soap_array*)&(*a)->__ptr, (*a)->__size, SOAP_TYPE_ClassAdStruct))
		soap_mark_ClassAdStruct(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct *const*a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToClassAdStruct);
	soap_out_PointerToClassAdStruct(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToClassAdStruct(struct soap *soap, const char *tag, int id, struct ClassAdStruct *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToClassAdStruct);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_array_pointer_lookup(soap, *a, (struct soap_array*)&(*a)->__ptr, (*a)->__size, SOAP_TYPE_ClassAdStruct, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_ClassAdStruct(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_ClassAdStruct(soap, tag, i, *a, type);
	}
	return soap_out_ClassAdStruct(soap, tag, soap_array_pointer_enter(soap, *a, (struct soap_array*)&(*a)->__ptr, SOAP_TYPE_ClassAdStruct, &pp), *a, type);
}

SOAP_FMAC3 struct ClassAdStruct ** SOAP_FMAC4 soap_get_PointerToClassAdStruct(struct soap *soap, struct ClassAdStruct **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToClassAdStruct(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct ClassAdStruct ** SOAP_FMAC4 soap_in_PointerToClassAdStruct(struct soap *soap, const char *tag, struct ClassAdStruct **a, const char *type)
{
	struct ClassAdStruct *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct ClassAdStruct **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToClassAdStruct, sizeof(struct ClassAdStruct *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_ClassAdStruct(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_ClassAdStruct(soap, tag, NULL, type)))
		{	a = (struct ClassAdStruct **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToClassAdStruct, sizeof(struct ClassAdStruct *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct ClassAdStruct **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToClassAdStruct, sizeof(struct ClassAdStruct *), 1), SOAP_TYPE_ClassAdStruct, sizeof(struct ClassAdStruct), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocondor__ClassAdStructAttr(struct soap *soap, struct condor__ClassAdStructAttr *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerTocondor__ClassAdStructAttr))
		soap_mark_PointerTocondor__ClassAdStructAttr(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerTocondor__ClassAdStructAttr(struct soap *soap, struct condor__ClassAdStructAttr *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_condor__ClassAdStructAttr))
		soap_mark_condor__ClassAdStructAttr(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerTocondor__ClassAdStructAttr(struct soap *soap, struct condor__ClassAdStructAttr **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocondor__ClassAdStructAttr(struct soap *soap, struct condor__ClassAdStructAttr *const*a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerTocondor__ClassAdStructAttr);
	soap_out_PointerTocondor__ClassAdStructAttr(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocondor__ClassAdStructAttr(struct soap *soap, const char *tag, int id, struct condor__ClassAdStructAttr *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerTocondor__ClassAdStructAttr);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_condor__ClassAdStructAttr, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_condor__ClassAdStructAttr(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_condor__ClassAdStructAttr(soap, tag, i, *a, type);
	}
	return soap_out_condor__ClassAdStructAttr(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_condor__ClassAdStructAttr, &pp), *a, type);
}

SOAP_FMAC3 struct condor__ClassAdStructAttr ** SOAP_FMAC4 soap_get_PointerTocondor__ClassAdStructAttr(struct soap *soap, struct condor__ClassAdStructAttr **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocondor__ClassAdStructAttr(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__ClassAdStructAttr ** SOAP_FMAC4 soap_in_PointerTocondor__ClassAdStructAttr(struct soap *soap, const char *tag, struct condor__ClassAdStructAttr **a, const char *type)
{
	struct condor__ClassAdStructAttr *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct condor__ClassAdStructAttr **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTocondor__ClassAdStructAttr, sizeof(struct condor__ClassAdStructAttr *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_condor__ClassAdStructAttr(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_condor__ClassAdStructAttr(soap, tag, NULL, type)))
		{	a = (struct condor__ClassAdStructAttr **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerTocondor__ClassAdStructAttr, sizeof(struct condor__ClassAdStructAttr *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct condor__ClassAdStructAttr **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTocondor__ClassAdStructAttr, sizeof(struct condor__ClassAdStructAttr *), 1), SOAP_TYPE_condor__ClassAdStructAttr, sizeof(struct condor__ClassAdStructAttr), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocondor__Status(struct soap *soap, struct condor__Status *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerTocondor__Status))
		soap_mark_PointerTocondor__Status(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerTocondor__Status(struct soap *soap, struct condor__Status *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_condor__Status))
		soap_mark_condor__Status(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerTocondor__Status(struct soap *soap, struct condor__Status **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocondor__Status(struct soap *soap, struct condor__Status *const*a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerTocondor__Status);
	soap_out_PointerTocondor__Status(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocondor__Status(struct soap *soap, const char *tag, int id, struct condor__Status *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerTocondor__Status);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_condor__Status, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_condor__Status(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_condor__Status(soap, tag, i, *a, type);
	}
	return soap_out_condor__Status(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_condor__Status, &pp), *a, type);
}

SOAP_FMAC3 struct condor__Status ** SOAP_FMAC4 soap_get_PointerTocondor__Status(struct soap *soap, struct condor__Status **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocondor__Status(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct condor__Status ** SOAP_FMAC4 soap_in_PointerTocondor__Status(struct soap *soap, const char *tag, struct condor__Status **a, const char *type)
{
	struct condor__Status *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct condor__Status **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTocondor__Status, sizeof(struct condor__Status *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_condor__Status(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_condor__Status(soap, tag, NULL, type)))
		{	a = (struct condor__Status **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerTocondor__Status, sizeof(struct condor__Status *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct condor__Status **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTocondor__Status, sizeof(struct condor__Status *), 1), SOAP_TYPE_condor__Status, sizeof(struct condor__Status), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerTounsignedByte))
		soap_mark_PointerTounsignedByte(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerTounsignedByte(struct soap *soap, unsigned char **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerTounsignedByte);
	soap_out_PointerTounsignedByte(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerTounsignedByte);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_unsignedByte, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_unsignedByte(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_unsignedByte(soap, tag, i, *a, type);
	}
	return soap_out_unsignedByte(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_unsignedByte, &pp), *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	unsigned char *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (unsigned char **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTounsignedByte, sizeof(unsigned char *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_unsignedByte(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_unsignedByte(soap, tag, NULL, type)))
		{	a = (unsigned char **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerTounsignedByte, sizeof(unsigned char *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTounsignedByte, sizeof(unsigned char *), 1), SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__anyURI(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT_xsd__anyURI
	*a = SOAP_DEFAULT_xsd__anyURI;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__anyURI);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_xsd__anyURI(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__anyURI);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__anyURI);
	soap_out_xsd__anyURI(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__anyURI);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__anyURI, 1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__string(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT_xsd__string
	*a = SOAP_DEFAULT_xsd__string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_xsd__string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__string);
	soap_out_xsd__string(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__string, 1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE__QName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark__QName(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE__QName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE__QName);
	soap_out__QName(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_string);
	soap_out_string(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1);
}

SOAP_END_NAMESPACE(soap_collector)

/* end of soap_collectorC.cpp */
