/* soap_collectorServer.cpp
   Generated by gSOAP 2.5.2 from gsoap_collector.h
   Copyright (C) 2001-2004 Genivia, Inc. All Rights Reserved.
   This software is released under the gSOAP public license and GPL.
   See README.txt for further details.
*/
#include "soap_collectorH.h"

SOAP_BEGIN_NAMESPACE(soap_collector)

SOAP_SOURCE_STAMP("@(#) soap_collectorServer.cpp ver 2.5.2 2004-04-05 15:33:02 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
	unsigned int n = SOAP_MAXKEEPALIVE;
	do
	{	soap_begin(soap);
		if (!--n)
			soap->keep_alive = 0;
		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
				return soap_send_fault(soap);
			soap_closesock(soap);
			continue;
		}
		if (soap_envelope_begin_in(soap)
		 || soap_recv_header(soap)
		 || soap_body_begin_in(soap)
		 || soap_peek_element(soap))
			return soap_send_fault(soap);
		if (!soap_match_tag(soap, soap->tag, "condorCollector:queryStartdAds"))
			soap_serve_condorCollector__queryStartdAds(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorCollector:queryScheddAds"))
			soap_serve_condorCollector__queryScheddAds(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorCollector:queryMasterAds"))
			soap_serve_condorCollector__queryMasterAds(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorCollector:querySubmittorAds"))
			soap_serve_condorCollector__querySubmittorAds(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorCollector:queryLicenseAds"))
			soap_serve_condorCollector__queryLicenseAds(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorCollector:queryStorageAds"))
			soap_serve_condorCollector__queryStorageAds(soap);
		else if (!soap_match_tag(soap, soap->tag, "condorCollector:queryAnyAds"))
			soap_serve_condorCollector__queryAnyAds(soap);
		else 
			soap->error = SOAP_NO_METHOD;
		if (soap->error)
			return soap_send_fault(soap);
	} while (soap->keep_alive);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorCollector__queryStartdAds(struct soap *soap)
{	struct condorCollector__queryStartdAds soap_tmp_condorCollector__queryStartdAds;
	struct condorCollector__queryStartdAdsResponse soap_tmp_condorCollector__queryStartdAdsResponse;
	soap_default_condorCollector__queryStartdAdsResponse(soap, &soap_tmp_condorCollector__queryStartdAdsResponse);
	soap_default_condorCollector__queryStartdAds(soap, &soap_tmp_condorCollector__queryStartdAds);
	soap->encodingStyle = "";
	soap_get_condorCollector__queryStartdAds(soap, &soap_tmp_condorCollector__queryStartdAds, "condorCollector:queryStartdAds", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorCollector__queryStartdAds(soap, soap_tmp_condorCollector__queryStartdAds.constraint, soap_tmp_condorCollector__queryStartdAdsResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorCollector__queryStartdAdsResponse(soap, &soap_tmp_condorCollector__queryStartdAdsResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorCollector__queryStartdAdsResponse(soap, &soap_tmp_condorCollector__queryStartdAdsResponse, "condorCollector:queryStartdAdsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorCollector__queryStartdAdsResponse(soap, &soap_tmp_condorCollector__queryStartdAdsResponse, "condorCollector:queryStartdAdsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorCollector__queryScheddAds(struct soap *soap)
{	struct condorCollector__queryScheddAds soap_tmp_condorCollector__queryScheddAds;
	struct condorCollector__queryScheddAdsResponse soap_tmp_condorCollector__queryScheddAdsResponse;
	soap_default_condorCollector__queryScheddAdsResponse(soap, &soap_tmp_condorCollector__queryScheddAdsResponse);
	soap_default_condorCollector__queryScheddAds(soap, &soap_tmp_condorCollector__queryScheddAds);
	soap->encodingStyle = "";
	soap_get_condorCollector__queryScheddAds(soap, &soap_tmp_condorCollector__queryScheddAds, "condorCollector:queryScheddAds", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorCollector__queryScheddAds(soap, soap_tmp_condorCollector__queryScheddAds.constraint, soap_tmp_condorCollector__queryScheddAdsResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorCollector__queryScheddAdsResponse(soap, &soap_tmp_condorCollector__queryScheddAdsResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorCollector__queryScheddAdsResponse(soap, &soap_tmp_condorCollector__queryScheddAdsResponse, "condorCollector:queryScheddAdsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorCollector__queryScheddAdsResponse(soap, &soap_tmp_condorCollector__queryScheddAdsResponse, "condorCollector:queryScheddAdsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorCollector__queryMasterAds(struct soap *soap)
{	struct condorCollector__queryMasterAds soap_tmp_condorCollector__queryMasterAds;
	struct condorCollector__queryMasterAdsResponse soap_tmp_condorCollector__queryMasterAdsResponse;
	soap_default_condorCollector__queryMasterAdsResponse(soap, &soap_tmp_condorCollector__queryMasterAdsResponse);
	soap_default_condorCollector__queryMasterAds(soap, &soap_tmp_condorCollector__queryMasterAds);
	soap->encodingStyle = "";
	soap_get_condorCollector__queryMasterAds(soap, &soap_tmp_condorCollector__queryMasterAds, "condorCollector:queryMasterAds", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorCollector__queryMasterAds(soap, soap_tmp_condorCollector__queryMasterAds.constraint, soap_tmp_condorCollector__queryMasterAdsResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorCollector__queryMasterAdsResponse(soap, &soap_tmp_condorCollector__queryMasterAdsResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorCollector__queryMasterAdsResponse(soap, &soap_tmp_condorCollector__queryMasterAdsResponse, "condorCollector:queryMasterAdsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorCollector__queryMasterAdsResponse(soap, &soap_tmp_condorCollector__queryMasterAdsResponse, "condorCollector:queryMasterAdsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorCollector__querySubmittorAds(struct soap *soap)
{	struct condorCollector__querySubmittorAds soap_tmp_condorCollector__querySubmittorAds;
	struct condorCollector__querySubmittorAdsResponse soap_tmp_condorCollector__querySubmittorAdsResponse;
	soap_default_condorCollector__querySubmittorAdsResponse(soap, &soap_tmp_condorCollector__querySubmittorAdsResponse);
	soap_default_condorCollector__querySubmittorAds(soap, &soap_tmp_condorCollector__querySubmittorAds);
	soap->encodingStyle = "";
	soap_get_condorCollector__querySubmittorAds(soap, &soap_tmp_condorCollector__querySubmittorAds, "condorCollector:querySubmittorAds", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorCollector__querySubmittorAds(soap, soap_tmp_condorCollector__querySubmittorAds.constraint, soap_tmp_condorCollector__querySubmittorAdsResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorCollector__querySubmittorAdsResponse(soap, &soap_tmp_condorCollector__querySubmittorAdsResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorCollector__querySubmittorAdsResponse(soap, &soap_tmp_condorCollector__querySubmittorAdsResponse, "condorCollector:querySubmittorAdsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorCollector__querySubmittorAdsResponse(soap, &soap_tmp_condorCollector__querySubmittorAdsResponse, "condorCollector:querySubmittorAdsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorCollector__queryLicenseAds(struct soap *soap)
{	struct condorCollector__queryLicenseAds soap_tmp_condorCollector__queryLicenseAds;
	struct condorCollector__queryLicenseAdsResponse soap_tmp_condorCollector__queryLicenseAdsResponse;
	soap_default_condorCollector__queryLicenseAdsResponse(soap, &soap_tmp_condorCollector__queryLicenseAdsResponse);
	soap_default_condorCollector__queryLicenseAds(soap, &soap_tmp_condorCollector__queryLicenseAds);
	soap->encodingStyle = "";
	soap_get_condorCollector__queryLicenseAds(soap, &soap_tmp_condorCollector__queryLicenseAds, "condorCollector:queryLicenseAds", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorCollector__queryLicenseAds(soap, soap_tmp_condorCollector__queryLicenseAds.constraint, soap_tmp_condorCollector__queryLicenseAdsResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorCollector__queryLicenseAdsResponse(soap, &soap_tmp_condorCollector__queryLicenseAdsResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorCollector__queryLicenseAdsResponse(soap, &soap_tmp_condorCollector__queryLicenseAdsResponse, "condorCollector:queryLicenseAdsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorCollector__queryLicenseAdsResponse(soap, &soap_tmp_condorCollector__queryLicenseAdsResponse, "condorCollector:queryLicenseAdsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorCollector__queryStorageAds(struct soap *soap)
{	struct condorCollector__queryStorageAds soap_tmp_condorCollector__queryStorageAds;
	struct condorCollector__queryStorageAdsResponse soap_tmp_condorCollector__queryStorageAdsResponse;
	soap_default_condorCollector__queryStorageAdsResponse(soap, &soap_tmp_condorCollector__queryStorageAdsResponse);
	soap_default_condorCollector__queryStorageAds(soap, &soap_tmp_condorCollector__queryStorageAds);
	soap->encodingStyle = "";
	soap_get_condorCollector__queryStorageAds(soap, &soap_tmp_condorCollector__queryStorageAds, "condorCollector:queryStorageAds", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorCollector__queryStorageAds(soap, soap_tmp_condorCollector__queryStorageAds.constraint, soap_tmp_condorCollector__queryStorageAdsResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorCollector__queryStorageAdsResponse(soap, &soap_tmp_condorCollector__queryStorageAdsResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorCollector__queryStorageAdsResponse(soap, &soap_tmp_condorCollector__queryStorageAdsResponse, "condorCollector:queryStorageAdsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorCollector__queryStorageAdsResponse(soap, &soap_tmp_condorCollector__queryStorageAdsResponse, "condorCollector:queryStorageAdsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condorCollector__queryAnyAds(struct soap *soap)
{	struct condorCollector__queryAnyAds soap_tmp_condorCollector__queryAnyAds;
	struct condorCollector__queryAnyAdsResponse soap_tmp_condorCollector__queryAnyAdsResponse;
	soap_default_condorCollector__queryAnyAdsResponse(soap, &soap_tmp_condorCollector__queryAnyAdsResponse);
	soap_default_condorCollector__queryAnyAds(soap, &soap_tmp_condorCollector__queryAnyAds);
	soap->encodingStyle = "";
	soap_get_condorCollector__queryAnyAds(soap, &soap_tmp_condorCollector__queryAnyAds, "condorCollector:queryAnyAds", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condorCollector__queryAnyAds(soap, soap_tmp_condorCollector__queryAnyAds.constraint, soap_tmp_condorCollector__queryAnyAdsResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condorCollector__queryAnyAdsResponse(soap, &soap_tmp_condorCollector__queryAnyAdsResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condorCollector__queryAnyAdsResponse(soap, &soap_tmp_condorCollector__queryAnyAdsResponse, "condorCollector:queryAnyAdsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condorCollector__queryAnyAdsResponse(soap, &soap_tmp_condorCollector__queryAnyAdsResponse, "condorCollector:queryAnyAdsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_END_NAMESPACE(soap_collector)

/* end of soap_collectorServer.cpp */
