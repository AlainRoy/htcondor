/* soap_collectorServer.cpp
   Generated by gSOAP 2.6.0 from gsoap_collector.h
   Copyright (C) 2001-2004 Genivia, Inc. All Rights Reserved.
   This software is released under the gSOAP public license and GPL.
   See README.txt for further details.
*/
#include "soap_collectorH.h"

SOAP_BEGIN_NAMESPACE(soap_collector)

SOAP_SOURCE_STAMP("@(#) soap_collectorServer.cpp ver 2.6.0 2004-06-01 14:50:24 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
	unsigned int n = soap->max_keep_alive;
	do
	{	soap_begin(soap);
		if (!--n)
			soap->keep_alive = 0;
		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
				return soap_send_fault(soap);
			soap_closesock(soap);
			continue;
		}
		if (soap_envelope_begin_in(soap)
		 || soap_recv_header(soap)
		 || soap_body_begin_in(soap)
		 || soap_serve_request(soap))
			return soap_send_fault(soap);
		
	} while (soap->keep_alive);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:queryStartdAds"))
		return soap_serve_condor__queryStartdAds(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:queryScheddAds"))
		return soap_serve_condor__queryScheddAds(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:queryMasterAds"))
		return soap_serve_condor__queryMasterAds(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:querySubmittorAds"))
		return soap_serve_condor__querySubmittorAds(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:queryLicenseAds"))
		return soap_serve_condor__queryLicenseAds(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:queryStorageAds"))
		return soap_serve_condor__queryStorageAds(soap);
	if (!soap_match_tag(soap, soap->tag, "condor:queryAnyAds"))
		return soap_serve_condor__queryAnyAds(soap);
	return soap->error = SOAP_NO_METHOD;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__queryStartdAds(struct soap *soap)
{	struct condor__queryStartdAds soap_tmp_condor__queryStartdAds;
	struct condor__queryStartdAdsResponse soap_tmp_condor__queryStartdAdsResponse;
	soap_default_condor__queryStartdAdsResponse(soap, &soap_tmp_condor__queryStartdAdsResponse);
	soap_default_condor__queryStartdAds(soap, &soap_tmp_condor__queryStartdAds);
	soap->encodingStyle = "";
	soap_get_condor__queryStartdAds(soap, &soap_tmp_condor__queryStartdAds, "condor:queryStartdAds", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__queryStartdAds(soap, soap_tmp_condor__queryStartdAds.constraint, soap_tmp_condor__queryStartdAdsResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__queryStartdAdsResponse(soap, &soap_tmp_condor__queryStartdAdsResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__queryStartdAdsResponse(soap, &soap_tmp_condor__queryStartdAdsResponse, "condor:queryStartdAdsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__queryStartdAdsResponse(soap, &soap_tmp_condor__queryStartdAdsResponse, "condor:queryStartdAdsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__queryScheddAds(struct soap *soap)
{	struct condor__queryScheddAds soap_tmp_condor__queryScheddAds;
	struct condor__queryScheddAdsResponse soap_tmp_condor__queryScheddAdsResponse;
	soap_default_condor__queryScheddAdsResponse(soap, &soap_tmp_condor__queryScheddAdsResponse);
	soap_default_condor__queryScheddAds(soap, &soap_tmp_condor__queryScheddAds);
	soap->encodingStyle = "";
	soap_get_condor__queryScheddAds(soap, &soap_tmp_condor__queryScheddAds, "condor:queryScheddAds", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__queryScheddAds(soap, soap_tmp_condor__queryScheddAds.constraint, soap_tmp_condor__queryScheddAdsResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__queryScheddAdsResponse(soap, &soap_tmp_condor__queryScheddAdsResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__queryScheddAdsResponse(soap, &soap_tmp_condor__queryScheddAdsResponse, "condor:queryScheddAdsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__queryScheddAdsResponse(soap, &soap_tmp_condor__queryScheddAdsResponse, "condor:queryScheddAdsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__queryMasterAds(struct soap *soap)
{	struct condor__queryMasterAds soap_tmp_condor__queryMasterAds;
	struct condor__queryMasterAdsResponse soap_tmp_condor__queryMasterAdsResponse;
	soap_default_condor__queryMasterAdsResponse(soap, &soap_tmp_condor__queryMasterAdsResponse);
	soap_default_condor__queryMasterAds(soap, &soap_tmp_condor__queryMasterAds);
	soap->encodingStyle = "";
	soap_get_condor__queryMasterAds(soap, &soap_tmp_condor__queryMasterAds, "condor:queryMasterAds", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__queryMasterAds(soap, soap_tmp_condor__queryMasterAds.constraint, soap_tmp_condor__queryMasterAdsResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__queryMasterAdsResponse(soap, &soap_tmp_condor__queryMasterAdsResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__queryMasterAdsResponse(soap, &soap_tmp_condor__queryMasterAdsResponse, "condor:queryMasterAdsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__queryMasterAdsResponse(soap, &soap_tmp_condor__queryMasterAdsResponse, "condor:queryMasterAdsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__querySubmittorAds(struct soap *soap)
{	struct condor__querySubmittorAds soap_tmp_condor__querySubmittorAds;
	struct condor__querySubmittorAdsResponse soap_tmp_condor__querySubmittorAdsResponse;
	soap_default_condor__querySubmittorAdsResponse(soap, &soap_tmp_condor__querySubmittorAdsResponse);
	soap_default_condor__querySubmittorAds(soap, &soap_tmp_condor__querySubmittorAds);
	soap->encodingStyle = "";
	soap_get_condor__querySubmittorAds(soap, &soap_tmp_condor__querySubmittorAds, "condor:querySubmittorAds", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__querySubmittorAds(soap, soap_tmp_condor__querySubmittorAds.constraint, soap_tmp_condor__querySubmittorAdsResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__querySubmittorAdsResponse(soap, &soap_tmp_condor__querySubmittorAdsResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__querySubmittorAdsResponse(soap, &soap_tmp_condor__querySubmittorAdsResponse, "condor:querySubmittorAdsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__querySubmittorAdsResponse(soap, &soap_tmp_condor__querySubmittorAdsResponse, "condor:querySubmittorAdsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__queryLicenseAds(struct soap *soap)
{	struct condor__queryLicenseAds soap_tmp_condor__queryLicenseAds;
	struct condor__queryLicenseAdsResponse soap_tmp_condor__queryLicenseAdsResponse;
	soap_default_condor__queryLicenseAdsResponse(soap, &soap_tmp_condor__queryLicenseAdsResponse);
	soap_default_condor__queryLicenseAds(soap, &soap_tmp_condor__queryLicenseAds);
	soap->encodingStyle = "";
	soap_get_condor__queryLicenseAds(soap, &soap_tmp_condor__queryLicenseAds, "condor:queryLicenseAds", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__queryLicenseAds(soap, soap_tmp_condor__queryLicenseAds.constraint, soap_tmp_condor__queryLicenseAdsResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__queryLicenseAdsResponse(soap, &soap_tmp_condor__queryLicenseAdsResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__queryLicenseAdsResponse(soap, &soap_tmp_condor__queryLicenseAdsResponse, "condor:queryLicenseAdsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__queryLicenseAdsResponse(soap, &soap_tmp_condor__queryLicenseAdsResponse, "condor:queryLicenseAdsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__queryStorageAds(struct soap *soap)
{	struct condor__queryStorageAds soap_tmp_condor__queryStorageAds;
	struct condor__queryStorageAdsResponse soap_tmp_condor__queryStorageAdsResponse;
	soap_default_condor__queryStorageAdsResponse(soap, &soap_tmp_condor__queryStorageAdsResponse);
	soap_default_condor__queryStorageAds(soap, &soap_tmp_condor__queryStorageAds);
	soap->encodingStyle = "";
	soap_get_condor__queryStorageAds(soap, &soap_tmp_condor__queryStorageAds, "condor:queryStorageAds", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__queryStorageAds(soap, soap_tmp_condor__queryStorageAds.constraint, soap_tmp_condor__queryStorageAdsResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__queryStorageAdsResponse(soap, &soap_tmp_condor__queryStorageAdsResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__queryStorageAdsResponse(soap, &soap_tmp_condor__queryStorageAdsResponse, "condor:queryStorageAdsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__queryStorageAdsResponse(soap, &soap_tmp_condor__queryStorageAdsResponse, "condor:queryStorageAdsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_condor__queryAnyAds(struct soap *soap)
{	struct condor__queryAnyAds soap_tmp_condor__queryAnyAds;
	struct condor__queryAnyAdsResponse soap_tmp_condor__queryAnyAdsResponse;
	soap_default_condor__queryAnyAdsResponse(soap, &soap_tmp_condor__queryAnyAdsResponse);
	soap_default_condor__queryAnyAds(soap, &soap_tmp_condor__queryAnyAds);
	soap->encodingStyle = "";
	soap_get_condor__queryAnyAds(soap, &soap_tmp_condor__queryAnyAds, "condor:queryAnyAds", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = condor__queryAnyAds(soap, soap_tmp_condor__queryAnyAds.constraint, soap_tmp_condor__queryAnyAdsResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_condor__queryAnyAdsResponse(soap, &soap_tmp_condor__queryAnyAdsResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_condor__queryAnyAdsResponse(soap, &soap_tmp_condor__queryAnyAdsResponse, "condor:queryAnyAdsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_condor__queryAnyAdsResponse(soap, &soap_tmp_condor__queryAnyAdsResponse, "condor:queryAnyAdsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_END_NAMESPACE(soap_collector)

/* end of soap_collectorServer.cpp */
