#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;

$cmd = 'job_core_matchlist_van.cmd';
$testname = 'Test match_list_length - vanilla U';
my $counter = 5;
my $lmn1 = "";
my $nextlmn1 = "";



$ExitSuccess = sub {
	my %args = @_;
	my $cluster = $args{"cluster"};
	print "Saw job exit!<<$counter>>\n";
	$counter -= 1;
	if( $counter == 0 )
	{
		my @adarray;
		my $status = 1;
		my $cmd = "condor_rm $cluster";
		$status = CondorTest::runCondorTool($cmd,\@adarray,2);
		if(!$status)
		{
			print "Test failure due to Condor Tool Failure<$cmd>\n";
			exit(1)
		}
	}
};

$evicted = sub {
	my %args = @_;
	my $cluster = $args{"cluster"};
	print "Saw job evicted!<<$counter>>\n";
	$counter -= 1;
	print "counter now $counter\n";
	if( $counter == 0 )
	{
		print "Counter 0 so removing cluster\n";
		my @adarray;
		my $status = 1;
		my $cmd = "condor_rm $cluster";
		$status = CondorTest::runCondorTool($cmd,\@adarray,2);
		if(!$status)
		{
			print "Test failure due to Condor Tool Failure<$cmd>\n";
			exit(1)
		}
	}
};

$execute = sub 
{
	my %args = @_;
	my $cluster = $args{"cluster"};

	print "Saw job executing! Crunching ads\n";
	my $lmn0 = "";
	my $remote = "";
	# get host for test via RemoteHost from job ad
	my @adarray;
	my $status = 1;
	my $cmd = "condor_q -l $cluster";
	$status = CondorTest::runCondorTool($cmd,\@adarray,2);
	if(!$status)
	{
		print "Test failure due to Condor Tool Failure<$cmd>\n";
		exit(1)
	}
	foreach $line (@adarray)
	{
		my $line = "";
		CondorTest::fullchomp($_);
		$line = $_;
		if( $line =~ /^RemoteHost.*/ )
		{
			print "$line\n";
		}
		elsif( $line =~ /^\s*LastMatchName0\s*=\s*\"([@\.a-zA-Z_0-9]+)\"\s*$/ )
		{
			print "Setting lmn0 to be $1\n";
			$lmn0 = $1;
			print "$line\n";
			print "LastMatchName0 is <<<< $lmn0 >>>>\n";
		}
		elsif( $line =~ /^\s*LastMatchName1\s*=\s*\"([@\.a-zA-Z_0-9]+)\"\s*$/ )
		{
			print "Setting lmn1 to be $1\n";
			$lmn1 = $1;
			print "$line\n";
			print "Last Match 1 <<<< $lmn1 >>>>\n";
		}
		elsif( $line =~ /LastMatchName.*/ )
		{
			print "LM: $line\n";
		}
		elsif( $line =~ /^\s*MATCH_name\s*=\s*\"([@\.a-zA-Z_0-9]+)\"\s*$/ )
		{
			$remote = $1;
			print "$line\n";
			print "Setting Remote as <<<< $remote >>>>\n";
		}
		#else
		#{
			#print "ELSE: $line\n";
		#}
	}
	if( ($nextlmn1 ne "") && ($lmn1 ne "") && ($lmn1 ne $nextlmn1) )
	{
		print "rotating failed.... $lmn1 ne $nextlmn1\n";
	}
	if( $lmn0 ne $remote )
	{
		print "$lmn0 = lmn0\n";
		print "$remote = remote\n";
		print "LastMatchName out of sync with current Match\n";
	}
	print "Setting nextlmn1 to be lmn0($lmn0)\n";
	$nextlmn1 = $lmn0;
};

$aborted = sub
{
	if($counter == 0)
	{
		print "Abort expected after job removal!\n";
	}
	else
	{
		die "Unexpected Abort!\n";
	}
};

system("rm job_core_matchlist.data");
system("touch job_core_matchlist.data");

CondorTest::RegisterAbort( $testname, $aborted );
CondorTest::RegisterEvicted($testname, $evicted);
CondorTest::RegisterExecute($testname, $execute);
CondorTest::RegisterExitedSuccess( $testname, $ExitSuccess );

if( CondorTest::RunTest($testname, $cmd, 0) ) {
	print "$testname: SUCCESS\n";
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}

