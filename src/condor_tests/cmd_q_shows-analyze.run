#! /usr/bin/env perl
use CondorTest;

$cmd = 'cmd_q_shows-analyze.cmd';
$cmdout = $cmd . ".out";
$testname = 'cmd_q_shows-analyze  ';

$whoami = `whoami`;
chomp($whoami);


@adarray;

$submit = sub {
	my %info = @_;

	my $foundcluster = 0;
	my $foundanalyze = 0;
	my $cmd = "condor_q -analyze";

	$cmdstatus = CondorTest::runCondorTool($cmd,\@adarray,2);
	if(!$cmdstatus)
	{
		print "Test failure due to Condor Tool Failure<$cmd>\n";
		exit(1)
	}

	my $submitline = "";
	my $cluster = -1;

	open(CMD, "<$cmdout") || die "Can not find analyze output:$!\n";;
	while(<CMD>) {
		chomp($_);
		$submitline = $_;
		if($submitline =~ /^.*cluster\s+(\d+).*$/) {
			$cluster = $1;
			print "Found my cluster which is $cluster!\n";
		}
		print "$_\n";
	}

	if ($cluster == -1) {
		die("Can not find a cluster in $cmdout\n");	
	}

	foreach $line (@adarray) {
		chomp($line);
		print "Examing line $line\n";
		if($line =~ /^\s*(\d+)\.(\d+):\s*Run\s+analysis\s+summary\.\s+.*$/) {
				print "Score!!!!! found cluster $1\n";
				print "$line\n";
				$foundcluster = 1;
		}
		if($line =~ /^\s*Requirements\s+=\s+.*$/) {
				print "Score!!!!! found -analyze\n";
				print "$line\n";
				print "condor_q -analyse prints Requirements like this\n";
				$foundanalyze = 1;
		}
	}

	$cmd = "condor_rm $cluster";
	$cmdstatus = CondorTest::runCondorTool($cmd,\@adarray,2);

	if(($foundcluster) && ($foundanalyze)) {
		print "Found analyze output\n";
	} else {
		die("Could not parse condor_q -analyze output\n");
	}
};

$aborted = sub {
	print "If all is good we abort our own job.......\n";
	exit(0);
};

$ExitSuccess = sub {
	my %info = @_;
};

CondorTest::RegisterSubmit( $testname, $submit );
CondorTest::RegisterAbort($testname, $aborted);
CondorTest::RegisterExitedSuccess( $testname, $ExitSuccess );

if( CondorTest::RunTest($testname, $cmd, 0) ) {
	print "$testname: SUCCESS\n";
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}


