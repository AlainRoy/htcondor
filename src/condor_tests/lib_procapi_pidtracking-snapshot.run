#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;

Condor::DebugOff();

$cmd = 'lib_procapi_pidtracking-snapshot.cmd';
$testname = 'We cleanup correctly after our kids. - vanilla U';
$datafile = "lib_procapi_pidtracking-snapshot.data";
$kiddatafile = "lib_procapi_pidtracking-snapshot.data.kids";
$worked = "yes";

$execute = sub
{
	Condor::debug( "Goood, job is running so we'll start the timer....\n");
	CondorTest::RegisterTimed($testname, $timed, 300); # give it 5 minutes
};

$timed = sub
{
        system("date");
        print "lib_procapi_pidtracking-snapshot HUNG !!!!!!!!!!!!!!!!!!\n";
        exit(1);
};

$ExitSuccess = sub {
	my %info = @_;
	my $line;
	my $pidline;
	my @pids;
	my @kidpids;

	open(PIN, "<$datafile") or die "Could not open data file '$datafile': $?";
	while(<PIN>)
	{
		CondorTest::fullchomp();
		$line = $_;
		if( $line =~ /\s*Relationship:\s*(\d+)\s*created\s*(\d+).*$/ )
		{
			Condor::debug( "Process $1 created $2\n");
			push @pids, $2;
		}
		Condor::debug( "$line\n");
	}
	close(PIN);
	open(PIN, "<$kiddatafile") or die "Could not open data file '$kiddatafile': $?";
	while(<PIN>)
	{
		CondorTest::fullchomp();
		$line = $_;
		if( $line =~ /\s*Relationship:\s*(\d+)\s*child\s+created\s*(\d+).*$/ )
		{
			Condor::debug( "Process $1 created $2\n");
			push @kidpids, $2;
		}
		Condor::debug( "$line\n");
	}
	close(PIN);

	# determine correct ps by expecting a certain number of lines of text

	my $pscmd = "ps -ef";
	system("which ps");
	open(PULL, "$pscmd | wc -l 2>&1 |") || die "ps -eo pid failed: $!\n";
	while(<PULL>)
	{
		my $outputlines;
		CondorTest::fullchomp();
		$outputlines = $_;
		my $linesoftext = 0;
		$linesoftext = $outputlines;
		if($linesoftext == 0)
		{
			print "Wrong ps options!\n";
			$pscmd = "ps -ax";
		}
		else
		{
			print "Ps delivered $linesoftext too check!\n";
		}
	}

	# move ahead with a valid ps command to parse output from

	open(PULL, "$pscmd 2>&1 |") || die "$pscmd failed: $!\n";
	while(<PULL>)
	{
		my $thispid;
		CondorTest::fullchomp();
		$pidline = $_;
		if( $pscmd eq "ps -ax") # with pid first
		{
			if($pidline =~ /\s*(\d+)\s*.*$/ )
			{
				$thispid = $1;
				Condor::debug("Checking againt list of removed pids --$thispid--\n");
				foreach my $pidcheck (@pids)
				{
					if($thispid eq $pidcheck)
					{
						print "Test fails because PARENT pid $pidcheck should have been removed\n";
						$worked = "no";
						system("kill -9 $pidcheck");
					}
				}
				foreach my $pidcheck (@kidpids)
				{
					if($thispid eq $pidcheck)
					{
						print "Test fails because CHILD pid $pidcheck should have been removed\n";
						$worked = "no";
						system("kill -9 $pidcheck");
					}
				}
			}
		}
		else # ps -ef with uid first
		{
			if($pidline =~ /\s*[A-Za-z]+\s*(\d+).*$/ )
			{
				$thispid = $1;
				Condor::debug("Checking againt list of removed pids --$thispid--\n");
				foreach my $pidcheck (@pids)
				{
					if($thispid eq $pidcheck)
					{
						print "Test fails because PARENT pid $pidcheck should have been removed\n";
						$worked = "no";
						system("kill -9 $pidcheck");
					}
				}
				foreach my $pidcheck (@kidpids)
				{
					if($thispid eq $pidcheck)
					{
						print "Test fails because CHILD pid $pidcheck should have been removed\n";
						$worked = "no";
						system("kill -9 $pidcheck");
					}
				}
			}
		}
		#print "$pidline\n";
	}
	close(PULL);
	if($worked eq "no")
	{
		print "$testname: FAILED. We created parent processes with children and inserted this list into testname.data \n";
		print "and testname.data.kids. When we went through these files some processes were not cleaned up. They were\n";
		print "labeled in the error as either PARENT or CHILD created by x_pid_tracking.pl. We removed them during the checking.\n";
		exit(1);
	}
};

CondorTest::RegisterExitedSuccess( $testname, $ExitSuccess );
CondorTest::RegisterExecute($testname, $execute);

if( CondorTest::RunTest($testname, $cmd, 0) ) {
	print "$testname: SUCCESS\n";
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}

