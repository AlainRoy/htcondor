#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;

$cmd      = 'job_filexfer_output-withvacate_van.cmd';
$testname = 'file transfer - look for two sets of output files with a vacate test - vanilla U';

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

my $alreadydone=0;


my $spool = `condor_config_val SPOOL`;
CondorTest::fullchomp($spool);
print "Spool is in --$spool--\n";

my $job = $$;

my $baseoutfile;
my $oute;
my $outf;
my $outg;
my $outh;
my $outi;
my $outj;

$execute = sub {
	my %args = @_;
	my $cluster = $args{"cluster"};

	$baseoutfile = $spool . "/cluster" . $cluster . ".proc0.subproc0/" . "submit_filetrans_output" . "$job";
	$oute = "$baseoutfile"."e.txt";
	$outf = "$baseoutfile"."f.txt";
	$outg = "$baseoutfile"."g.txt";
	$outh = "$baseoutfile"."h.txt";
	$outi = "$baseoutfile"."i.txt";
	$outj = "$baseoutfile"."j.txt";

	print "Looking for $oute, $outf, $outg ...\n";

	print "Vacate $cluster Now\n";
	sleep 2; # let output files get created
	my @adarray;
	my $status = 1;
	my $cmd = "condor_vacate_job $cluster";
	$status = CondorTest::runCondorTool($cmd,\@adarray,2);
	if(!$status)
	{
		print "Test failure due to Condor Tool Failure<$cmd>\n";
		exit(1)
	}

};

$aborted = sub {
	my %args = @_;
	my $cluster = $args{"cluster"};

	print "Aborted job expected from condor_rm, ok.\n";
};

$evicted = sub {
	my %args = @_;
	my $cluster = $args{"cluster"};

	sleep(4);

	if(!-f "$oute")
	{ 
		die "$oute failed to arrive\n"; 
		print "removing $cluster\n";
		my @adarray;
		my $status = 1;
		my $cmd = "condor_rm $cluster";
		$status = CondorTest::runCondorTool($cmd,\@adarray,2);
		if(!$status)
		{
			print "Test failure due to Condor Tool Failure<$cmd>\n";
			exit(1)
		}
		exit(1)
	};
	if(!-f "$outf")
	{ 
		die "$outf failed to arrive\n"; 
		print "removing $cluster\n";
		my @adarray;
		my $status = 1;
		my $cmd = "condor_rm $cluster";
		$status = CondorTest::runCondorTool($cmd,\@adarray,2);
		if(!$status)
		{
			print "Test failure due to Condor Tool Failure<$cmd>\n";
			exit(1)
		}
		exit(1)
	};
	if(!-f "$outg")
	{ 
		die "$outg failed to arrive\n"; 
		print "removing $cluster\n";
		my @adarray;
		my $status = 1;
		my $cmd = "condor_rm $cluster";
		$status = CondorTest::runCondorTool($cmd,\@adarray,2);
		if(!$status)
		{
			print "Test failure due to Condor Tool Failure<$cmd>\n";
			exit(1)
		}
		exit(1)
	};

	# Cool getting to here means the files all arrived!
	print "All files arrived as expected.....\n";
	my @adarray;
	my $status = 1;
	my $cmd = "condor_rm $cluster";
	$status = CondorTest::runCondorTool($cmd,\@adarray,2);
	if(!$status)
	{
		print "Test failure due to Condor Tool Failure<$cmd>\n";
		exit(1)
	}
};

$success = sub
{
	print "Base file transfer job!\n";
	if(!-f "$oute"){ die "$oute failed to arrive\n"; exit(1)};
	if(!-f "$outf"){ die "$outf failed to arrive\n"; exit(1)};
	if(!-f "$outg"){ die "$outg failed to arrive\n"; exit(1)};
};

$timed = sub
{
	die "Job should have ended by now. file transfer broken!\n";
};

$shadow = sub
{
	my %args = @_;
	my $cluster = $args{"cluster"};
	my $error = $args{"shadowerror"};

	print "Shadow Error: Cluster $cluster: $error\n";
	my @adarray;
	my $status = 1;
	my $cmd = "condor_rm $cluster";
	$status = CondorTest::runCondorTool($cmd,\@adarray,2);
	if(!$status)
	{
		print "Test failure due to Condor Tool Failure<$cmd>\n";
		exit(0)
	}
	print "$testname: SUCCESS\n";
	exit(0);
};



# make some needed files. All 0 sized and xxxxxx.txt for
# easy cleanup

my $job = $$;
print "Process Id for this script is  $job\n";
my $basefile = "submit_filetrans_input" . "$job";
my $in = "$basefile".".txt";
my $ina = "$basefile"."a.txt";
my $inb = "$basefile"."b.txt";
my $inc = "$basefile"."c.txt";

my $basefile = "submit_filetrans_output" . "$job";
my $oute = "$basefile"."e.txt";
my $outf = "$basefile"."f.txt";
my $outg = "$basefile"."g.txt";

my $inputdir = "job_"."$job"."_dir";

my $line = "";
my $args = "--job=$job --long ";

# pass pid for output file production
# open submitfile and fix
open(CMD,"<$cmd") || die "Can not open command file: $!\n";
open(NEWCMD,">$cmd.new") || die "Can not open command file: $!\n";
while(<CMD>)
{
	CondorTest::fullchomp($_);
	print "$_\n";
	$line = $_;
	if( $line =~ /^\s*input\s*=\s*job_\d+_dir\/([a-zA-Z_]+)\d*\.txt\s*$/)
	{
		my $input = "$1"."$job".".txt";
		print "Input file was $1\n";
		print NEWCMD "input = $inputdir/$input\n"
	}
	elsif( $line =~ /^\s*transfer_input_files\s*=\s*.*$/ )
	{
		print NEWCMD "transfer_input_files = $inputdir/$ina,$inputdir/$inb,$inputdir/$inc\n";
	}
	elsif( $line =~ /^\s*transfer_output_files\s*=\s*.*$/ )
	{
		print NEWCMD "transfer_output_files = $oute,$outf,$outg\n";
	}
	elsif( $line =~ /^\s*arguments\s*=\s*.*$/)
	{
		print NEWCMD "arguments = $args\n";
	}
	else
	{
		print NEWCMD "$line\n";
	}

}
close(CMD);
close(NEWCMD);
system("mv $cmd.new $cmd");

CondorTest::RegisterExecute($testname, $execute);
CondorTest::RegisterShadow($testname, $shadow);
CondorTest::RegisterEvicted($testname, $evicted);
CondorTest::RegisterAbort($testname, $aborted);
CondorTest::RegisterExitedSuccess($testname, $success);
#CondorTest::RegisterTimed($testname, $timed, 3600);

if( CondorTest::RunTest($testname, $cmd, 0) ) {
	print "$testname: SUCCESS\n";
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}

