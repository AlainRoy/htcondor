/************************************************************************
  Include settings/rules shared across all test Imakefile's
************************************************************************/
#include "Imakefile.common"

/* 
   If we're just doing "make all", the first thing we should do is
   build all the various lists we need (dealing with test classes,
   compiler subdirectories, etc), and do so in all the compiler  
   subdirectories.  This way, we can catch errors right away, and we
   get all that stuff out of the way early in the build.
*/
all_lists:: compiler_list
	@for X in `cat compiler_list` ; do \
	    make $$X/Makefile; \
	    cd $$X; make all_lists; cd ..; \
	done


/************************************************************************
   Shared settings/rules used by all tests in the top-level directory,
   and that deal with the testing build framework itself.
************************************************************************/

LD_DIR = -condor_ld_dir $(PRE_BUILT_RELEASE)/lib
LIB_DIR = -condor_lib $(PRE_BUILT_RELEASE)/lib
INCLUDE_FLAGS = -I$(PRE_BUILT_RELEASE)/include -I../condor_includes -I../h -I../condor_c++_util -I../condor_chirp
BUILD_FLAGS = $(TESTSUITE_FLAGS_GCC)
CC = gcc
CPlusPlus = g++
CFLAGS  = $(BUILD_FLAGS) $(INCLUDE_FLAGS) -g 
C_PLUS_FLAGS  = $(CFLAGS)

/* the perl infrastructure for running tests lives in another
   directory, so we have to add sylinks for those */
all_symlink_target(../condor_scripts/Condor.pm,Condor.pm)
all_symlink_target(../condor_scripts/CondorTest.pm,CondorTest.pm)
all_symlink_target(../condor_scripts/CondorPersonal.pm,CondorPersonal.pm)
all_symlink_target(../condor_scripts/safe_append.pl,safe_append.pl)
all_symlink_target(../condor_scripts/batch_test.pl,batch_test.pl)

BUILD_DEP($(CC),x_return-n,c,x_waste_second.o)
BUILD($(CC),x_dumpcore,c)
BUILD($(CC),x_trapsig,c)

/************************************************************************
   Rules for all the single-compiler (or no compiler) tests
************************************************************************/

/* Library tests */

/* Chirp */
#if !defined( IS_ALPHA_LINUX) && !defined( IS_HPUX10 )
/* 
   Gnats 546 Linux rh 7.2 on alph chip Needs MD5 perl module
   GNATS 548 perl md5 module missing on HPUX 10 machine(s)
*/
DESC(lib_chirpio_van,"Exercise the chirp I/O library using the C client library")
BUILD_DEP_LIB($(CC),lib_chirpio,c,,../release_dir/lib/libchirp_client.a)
DEPS(lib_chirpio_van,lib_chirpio.exe)
RUN(lib_chirpio_van)
TESTCLASS(lib_chirpio_van,lib)
TESTCLASS(lib_chirpio_van,quick)
#endif 

/* User log and log reader used by dagman tests */

/* NOTE: since we're linking these with external libraries, we need
the BUILD_DEP_LIB() rule, which provides maximum flexibility.  but, in
this case, we only need to specify libs, not dependent .o files, so we
leave the 4th argument empty...
*/

BUILD_DEP_LIB($(CPlusPlus),x_read_joblog,C,,../release_dir/lib/libcondorapi.a)
BUILD_DEP_LIB($(CPlusPlus),x_write_joblog,C,,../release_dir/lib/libcondorapi.a)

/* BUG: We seem to consistently loose track of one pid on AIX
	so we will turn this test off until this gets fixed.....
	GNATS entry #558 for core condor software / proapi
*/

#if !defined( IS_HPUX10 )
DESC(job_had_basic," Basic High Availability Daemon Test")
RUN(job_had_basic)
TESTCLASS(job_had_basic,core)
TESTCLASS(job_had_basic,quick)
#endif

#if !defined(IS_PPC_AIX)
DESC(lib_procapi_pidtracking-snapshot,"Fast Termination Child Cleanup Test")
RUN(lib_procapi_pidtracking-snapshot)
TESTCLASS(lib_procapi_pidtracking-snapshot,core)
TESTCLASS(lib_procapi_pidtracking-snapshot,quick)
#endif

DESC(lib_auth_protocol-fs,"FS authentication test")
RUN(lib_auth_protocol-fs)
TESTCLASS(lib_auth_protocol-fs,core)
TESTCLASS(lib_auth_protocol-fs,quick)

DESC(lib_auth_protocol-ctb,"CTB authentication test")
RUN(lib_auth_protocol-ctb)
TESTCLASS(lib_auth_protocol-ctb,core)
TESTCLASS(lib_auth_protocol-ctb,quick)

/* GNATS 764 - SSL missing on Dux 5.1 and HPUX 11 machines */
#if !defined( IS_ALPHA_DUX5) && !defined( IS_HPUX11 )
DESC(lib_auth_protocol-ssl,"SSL authentication test")
RUN(lib_auth_protocol-ssl)
TESTCLASS(lib_auth_protocol-ssl,core)
TESTCLASS(lib_auth_protocol-ssl,quick)

DESC(lib_auth_protocol-pw,"PW authentication test")
RUN(lib_auth_protocol-pw)
TESTCLASS(lib_auth_protocol-pw,core)
TESTCLASS(lib_auth_protocol-pw,quick)

DESC(lib_auth_protocol-gsi,"GSI authentication test")
RUN(lib_auth_protocol-gsi)
TESTCLASS(lib_auth_protocol-gsi,core)
TESTCLASS(lib_auth_protocol-gsi,quick)
#endif

DESC(lib_auth_protocol-negot,"16 way negotiation test - frist 8")
RUN(lib_auth_protocol-negot)
TESTCLASS(lib_auth_protocol-negot,core)
TESTCLASS(lib_auth_protocol-negot,quick)

DESC(lib_auth_protocol-negot-prt2,"16 way negotiation test - last 8")
RUN(lib_auth_protocol-negot-prt2)
TESTCLASS(lib_auth_protocol-negot-prt2,core)
TESTCLASS(lib_auth_protocol-negot-prt2,quick)

/* Turned off on Free BSD port GNATS 766 */

DESC(cmd_q_shows-hold,"Condor_q shows hold")
RUN(cmd_q_shows-hold)
TESTCLASS(cmd_q_shows-hold,core)
TESTCLASS(cmd_q_shows-hold,quick)

DESC(lib_userlog,"Exercise the userlog interface write and read all events");
RUN(lib_userlog)
DEPS(lib_userlog,x_read_joblog.exe)
DEPS(lib_userlog,x_write_joblog.exe)
TESTCLASS(lib_userlog,lib)
TESTCLASS(lib_userlog,quick)

#if defined(IS_I386_LINUX_RH9) || defined(IS_I386_LINUX_RH80) || defined(IS_I386_LINUX_RH72) || defined(IS_I386_LINUX_RHEL3) || defined(IS_X86_64_LINUX_RHEL3) || defined(IS_PPC_OSX_10_3) || defined(IS_CONDOR_PPC_LINUX_SLES9) || defined(IS_IA64_LINUX_SLES81) || defined(IS_IA64_LINUX_RHEL3) 
DESC(job_quill_basic,"Basic Quill Test")
RUN(job_quill_basic)
TESTCLASS(job_quill_basic,core)
TESTCLASS(job_quill_basic,quick)
TESTCLASS(job_quill_basic,btdebug)
#endif

DESC(job_core_basic_par,"Basic Parallel Universe")
RUN(job_core_basic_par)
TESTCLASS(job_core_basic_par,core)
TESTCLASS(job_core_basic_par,quick)
TESTCLASS(job_core_basic_par,btdebug)

/*
****************** Tests being readied for prime time **********************

DESC(job_core_basic-security_par,"Basic Parallel Universe w/security on")
RUN(job_core_basic-security_par)
TESTCLASS(job_core_basic-security_par,core)
TESTCLASS(job_core_basic-security_par,quick)
TESTCLASS(job_core_basic-security_par,btdebug)

DESC(job_stork_file-file,"Basic stork Test")
RUN(job_stork_file-file)
TESTCLASS(job_stork_file-file,core)
TESTCLASS(job_stork_file-file,quick)
TESTCLASS(job_stork_file-file,btdebug)

DESC(job_dagman_stork-file-file,"Basic stork dag Test")
RUN(job_dagman_stork-file-file)
TESTCLASS(job_dagman_stork-file-file,core)
TESTCLASS(job_dagman_stork-file-file,quick)
TESTCLASS(job_dagman_stork-file-file,btdebug)

DESC(job_dagman_stork-remove,"Basic stork dag w/remove Test")
RUN(job_dagman_stork-remove)
TESTCLASS(job_dagman_stork-remove,core)
TESTCLASS(job_dagman_stork-remove,quick)
TESTCLASS(job_dagman_stork-remove,btdebug)

****************** Tests being readied for prime time **********************
*/

#if !defined( IS_DARWIN ) && !defined(IS_DUX5) && !defined(IS_HPUX10) && !defined(IS_PPC_AIX) && !defined(IS_SOLARIS28) && !defined(IS_SOLARIS29) && !defined(IS_IRIX) && !defined(IS_HPUX11) && !defined(IS_CONDOR_FREEBSD)
/* 
   Gnats 545 this procapi test of pid tracking not working MacOsX
   Gnats 547 this procapi test of pid tracking not working IS_ALPHA_OSF1_V5 IS_HPUX10 IS_PPC_AIX SOLARIS28 SOLARIS29 
*/
DESC(lib_procapi_pidtracking-byenv,"Slow Termination Child Cleanup Test")
RUN(lib_procapi_pidtracking-byenv)
TESTCLASS(lib_procapi_pidtracking-byenv,core)
TESTCLASS(lib_procapi_pidtracking-byenv,quick)
#endif

#if 0
/*
   this test is just a big race condition, and doesn't actually test
   what it claims it's testing.  futhermore, it has nothing to do with
   vanilla universe, so at the very least, it should be renamed.  for
   now, i'm disabling it, since it's consistently been one of the only
   tests that's failing, and it's because of the test, not condor.
   we should either remove it completely, or re-implement it from
   scratch with a better methodology and a decent name.
*/  
DESC(job_schedd_job-tracking_van,"Scheduler: test for schedd loosing track of jobs")
RUN(job_schedd_job-tracking_van)
TESTCLASS(job_schedd_job-tracking_van,core)
TESTCLASS(job_schedd_job-tracking_van,quick)
#endif /* 0 -- test disabled */

DESC(job_core_err_java,"Java Universe: basic error test")
RUN(job_core_err_java)
TESTCLASS(job_core_err_java,core)
TESTCLASS(job_core_err_java,quick)

DESC(job_core_output_java,"Java Universe: basic output test")
RUN(job_core_output_java)
TESTCLASS(job_core_output_java,core)
TESTCLASS(job_core_output_java,quick)

DESC(job_core_hold_java,"Java Universe: basic output test")
RUN(job_core_hold_java)
TESTCLASS(job_core_hold_java,core)
TESTCLASS(job_core_hold_java,quick)

DESC(job_core_initialdir_java,"Java Universe: basic output test")
RUN(job_core_initialdir_java)
TESTCLASS(job_core_initialdir_java,core)
TESTCLASS(job_core_initialdir_java,quick)

DESC(job_core_input_java,"Java Universe: basic output test")
RUN(job_core_input_java)
TESTCLASS(job_core_input_java,core)
TESTCLASS(job_core_input_java,quick)

/*
** This test is simply submit and getting things in the job ads
** and fails unpredictably and duplicates the other "plus" tests.
***************************************************************
DESC(job_core_plus_java,"Java Universe: basic output test")
RUN(job_core_plus_java)
TESTCLASS(job_core_plus_java,core)
TESTCLASS(job_core_plus_java,quick)
***************************************************************
*/

/*
Gnats bugs 723 and 724
Gnats bug 790 for john memory failings
*/
#if !defined( IS_CONDOR_PPC_LINUX_SLES9 ) && !defined( IS_CONDOR_PPC_LINUX_YD30 ) && !defined( IS_I386_LINUX_RHEL3 ) && !defined( IS_ALPHA_DUX5 )
DESC(soap_job_tests,"Soap: currently 10 different interface tests")
RUN(soap_job_tests)
TESTCLASS(soap_job_tests,core)
TESTCLASS(soap_job_tests,quick)
#endif


DESC(job_filexfer_streamout_van,"Vanilla: test for streaming of output when both stream_output is true and false")
RUN(job_filexfer_streamout_van)
TESTCLASS(job_filexfer_streamout_van,core)
TESTCLASS(job_filexfer_streamout_van,quick)

DESC(job_filexfer_streamerr_van,"Vanilla: test for streaming of error when both stream_error is true and false")
RUN(job_filexfer_streamerr_van)
TESTCLASS(job_filexfer_streamerr_van,core)
TESTCLASS(job_filexfer_streamerr_van,quick)

#if !defined( IS_ALPHA_LINUX) && !defined(IS_HPUX10) && !defined(IS_HPUX11)
/* 
   NOTE: this is an unfortunate way to do this selection.  we should
   have reliable HAVE_GLOBUS, HAVE_CONDOR_C, and HAVE_CONDOR_G macros
   defined via autoconf so we can just check "#if HAVE_CONDOR_C"
   for these tests, instead of doing it via platforms like this.

   Gnats 544 Linux rh 7.2 on alph chip is broken
   Gnats 561 HPUX 10 does not allow submits for lack of globus support.
   gthain says condor-c is not support to work on HPUX 11, either
*/
DESC(job_condorc_ab_van,"Condor-C AB test")
RUN(job_condorc_ab_van)
TESTCLASS(job_condorc_ab_van,condorc)
TESTCLASS(job_condorc_ab_van,quick)

DESC(job_condorc_abc_van,"Condor-C ABC test")
RUN(job_condorc_abc_van)
TESTCLASS(job_condorc_abc_van,condorc)
TESTCLASS(job_condorc_abc_van,quick)
#endif

DESC(job_core_killsignal_sched,"Scheduler: Verify the specified input file is used")
RUN(job_core_killsignal_sched)
DEPS(job_core_killsignal_sched,x_trapsig.exe)
TESTCLASS(job_core_killsignal_sched,core)
TESTCLASS(job_core_killsignal_sched,quick)

/*
** The test in hanging in 6.7.x turn off for now.
DESC(job_core_holdkillsig_sched,"Scheduler: Verify ability to control signal for holds and kills")
RUN(job_core_holdkillsig_sched)
DEPS(job_core_holdkillsig_sched,x_trapsig.exe)
TESTCLASS(job_core_holdkillsig_sched,core)
TESTCLASS(job_core_holdkillsig_sched,quick)
*/

DESC(job_core_rmkillsig_sched,"Scheduler: Verify the  remove_kill_sig")
RUN(job_core_rmkillsig_sched)
DEPS(job_core_rmkillsig_sched,x_trapsig.exe)
TESTCLASS(job_core_rmkillsig_sched,core)
TESTCLASS(job_core_rmkillsig_sched,quick)

DESC(job_core_macros-dollardollar_van,"Vanilla: Did dollar dollar macros work?")
RUN(job_core_macros-dollardollar_van)
TESTCLASS(job_core_macros-dollardollar_van,core)
TESTCLASS(job_core_macros-dollardollar_van,quick)

/*
**
**DESC(job_core_killsignal_van,"Vanilla: Verify the specified input file is used")
**RUN(job_core_killsignal_van)
**DEPS(job_core_killsignal_van,x_trapsig.exe)
**TESTCLASS(job_core_killsignal_van,core)
**TESTCLASS(job_core_killsignal_van,quick)
**
**DESC(job_core_corefiles_van,"Vanillla limit of core file size - FAILS!")
**RUN(job_core_corefiles_van)
**TESTCLASS(job_core_corefiles_van,core)
**TESTCLASS(job_core_corefiles_van,quick)
**
**DESC(job_core_corefiles_sched,"Scheduler limit of core file size - FAILS!")
**RUN(job_core_corefiles_sched)
**TESTCLASS(job_core_corefiles_sched,core)
**TESTCLASS(job_core_corefiles_sched,quick)
**
*/

/**
 * Local Universe Policy Expression Tests
 **/

DESC(job_core_onexithold_local,"Local: Verify true and false triggers of on_exit_hold")
RUN(job_core_onexithold_local)
TESTCLASS(job_core_onexithold_local,core)
TESTCLASS(job_core_onexithold_local,quick)
TESTCLASS(job_core_onexithold_local,local)

DESC(job_core_onexitrem_local,"Local: Verify true and false triggers of on_exit_remove")
RUN(job_core_onexitrem_local)
TESTCLASS(job_core_onexitrem_local,core)
TESTCLASS(job_core_onexitrem_local,quick)
TESTCLASS(job_core_onexitrem_local,local)

DESC(job_core_perhold_local,"Local: verify true and false triggers for periodic hold")
RUN(job_core_perhold_local)
TESTCLASS(job_core_perhold_local,core)
TESTCLASS(job_core_perhold_local,quick)
TESTCLASS(job_core_perhold_local,local)
 
DESC(job_core_perrelease_local,"Local: verify a policy of true/false for periodic release does the right thing")
RUN(job_core_perrelease_local)
TESTCLASS(job_core_perrelease_local,core)
TESTCLASS(job_core_perrelease_local,quick)
TESTCLASS(job_core_perrelease_local,local)

DESC(job_core_perremove_local,"Local: test true/false variations of periodic remove")
RUN(job_core_perremove_local)
TESTCLASS(job_core_perremove_local,core)
TESTCLASS(job_core_perremove_local,quick)
TESTCLASS(job_core_perremove_local,local)

DESC(job_core_crontab_local,"Local: CronTab Scheduling")
RUN(job_core_crontab_local)
TESTCLASS(job_core_crontab_local,core)
TESTCLASS(job_core_crontab_local,quick)
TESTCLASS(job_core_crontab_local,local)

DESC(job_core_time-deferral_local,"Local: Verify deferred execution")
RUN(job_core_time-deferral_local)
TESTCLASS(job_core_time-deferral_local,core)
TESTCLASS(job_core_time-deferral_local,quick)
TESTCLASS(job_core_time-deferral_local,local)

DESC(job_core_time-deferral-hold_local,"Local: Verify HOLD against deferred execution")
RUN(job_core_time-deferral-hold_local)
TESTCLASS(job_core_time-deferral-hold_local,core)
TESTCLASS(job_core_time-deferral-hold_local,quick)
TESTCLASS(job_core_time-deferral-hold_local,local)

DESC(job_core_time-deferral-remove_local,"Local: Verify REMOVE against deferred execution")
RUN(job_core_time-deferral-remove_local)
TESTCLASS(job_core_time-deferral-remove_local,core)
TESTCLASS(job_core_time-deferral-remove_local,quick)
TESTCLASS(job_core_time-deferral-remove_local,local)

/* Likely Bugs in Policy matters scheduler Universe */

/*
** 
** Leave Off for now
**
**DESC(job_core_onexitrem_sched,"Scheduler: Verify true and false triggers of on_exit_remove")
**RUN(job_core_onexitrem_sched)
**TESTCLASS(job_core_onexitrem_sched,core)
**TESTCLASS(job_core_onexitrem_sched,quick)
**
**
**DESC(job_core_onexithold_sched,"Scheduler: Verify true and false triggers of on_exit_hold")
**RUN(job_core_onexithold_sched)
**TESTCLASS(job_core_onexithold_sched,core)
**TESTCLASS(job_core_onexithold_sched,quick)
**
*/

/* Likely either test or condor is wrong */

DESC(job_filexfer_basic_van,"Vanilla: send a file and get it back")
RUN(job_filexfer_basic_van)
TESTCLASS(job_filexfer_basic_van,filexfer)
TESTCLASS(job_filexfer_basic_van,quick)

DESC(job_filexfer_minus1_van,"Vanilla: extra specified output file creates shadow exception to rerun to produce missing output")
RUN(job_filexfer_minus1_van)
TESTCLASS(job_filexfer_minus1_van,filexfer)
TESTCLASS(job_filexfer_minus1_van,quick)

DESC(job_filexfer_output-withvacate_van,"Vanilla: 3 files created before vacate - verify their return")
RUN(job_filexfer_output-withvacate_van)
TESTCLASS(job_filexfer_output-withvacate_van,filexfer)
TESTCLASS(job_filexfer_output-withvacate_van,quick)

/*
**
	Gnats tools/696. Turned off test which expects a shadow exception
	after a job located in a relative location to the submit file
	when filetransfer is set to false. Test job currently runs to success
	so test fails. Exploring correct behaviour. bt
**
**
DESC(job_filexfer_trans-nodflts_van,"Vanilla: all transfers explicitely off - complains...")
RUN(job_filexfer_trans-nodflts_van)
TESTCLASS(job_filexfer_trans-nodflts_van,filexfer)
TESTCLASS(job_filexfer_trans-nodflts_van,quick)
*/

/* Tests which fail in groups but run singly reliably */

/*
** 
** Leave Off for now
**
**DESC(job_core_matchlist_van,"Vanilla: test that match_list_length is storing and rotating matches")
**RUN(job_core_matchlist_van)
**TESTCLASS(job_core_matchlist_van,core)
**TESTCLASS(job_core_matchlist_van,long)
**
**

DESC(job_core_onexitrem_van,"Vanilla: Verify true and false triggers of on_exit_remove")
RUN(job_core_onexitrem_van)
TESTCLASS(job_core_onexitrem_van,core)
TESTCLASS(job_core_onexitrem_van,quick)

*/

DESC(job_core_perhold_van,"Vanilla: verify true and false triggers for periodic hold")
RUN(job_core_perhold_van)
TESTCLASS(job_core_perhold_van,core)
TESTCLASS(job_core_perhold_van,quick)

DESC(job_core_onexithold_van,"Vanilla: Verify true and false triggers of on_exit_hold")
RUN(job_core_onexithold_van)
TESTCLASS(job_core_onexithold_van,core)
TESTCLASS(job_core_onexithold_van,quick)

DESC(job_core_holdrelease_sched,"Scheduler: Test state changes from running to hold to release.")
RUN(job_core_holdrelease_sched)
TESTCLASS(job_core_holdrelease_sched,core)
TESTCLASS(job_core_holdrelease_sched,quick)


/* runable core coverage tests */

DESC(job_core_args_van,"Vanilla: Did specify args from submit file reach the job?")
RUN(job_core_args_van)
TESTCLASS(job_core_args_van,core)
TESTCLASS(job_core_args_van,quick)

DESC(job_core_args_sched,"scheduler: Did specify args from submit file reach the job?")
RUN(job_core_args_sched)
TESTCLASS(job_core_args_sched,core)
TESTCLASS(job_core_args_sched,quick)

#if ! IS_CLIPPED
CBUILD($(CC),job_core_compressfiles,c)
DESC(job_core_compressfiles_std,"Do we handle compressed files made by standard jobs?")
DEPS(job_core_compressfiles_std,job_core_compressfiles.cndr.exe)
RUN(job_core_compressfiles_std)
TESTCLASS(job_core_compressfiles_std,core)
TESTCLASS(job_core_compressfiles_std,quick)
#endif /* ! IS_CLIPPED */


/* Hold for now
DESC(job_core_holdrelease_van,"Vanilla: Test state changes from running to hold to release.")
RUN(job_core_holdrelease_van)
TESTCLASS(job_core_holdrelease_van,core)
TESTCLASS(job_core_holdrelease_van,quick)

*/

#if !defined(IS_HPUX10)
/*
	GNATS 548 perl md5 module missing on HPUX 10 machine(s)
*/
DESC(job_core_copytospool_van,"Vanilla: test that spooled executable is same via md5 checksum of both files")
RUN(job_core_copytospool_van)
TESTCLASS(job_core_copytospool_van,core)
TESTCLASS(job_core_copytospool_van,quick)
#endif

DESC(job_core_getenv_van,"Vanilla: job which tests getenv both on and off")
RUN(job_core_getenv_van)
TESTCLASS(job_core_getenv_van,core)
TESTCLASS(job_core_getenv_van,long)

DESC(job_core_doublejeopardy_van,"Vanilla: make sure condor does not generate an abort AND the expected abnormal termination.")
RUN(job_core_doublejeopardy_van)
TESTCLASS(job_core_doublejeopardy_van,core)
TESTCLASS(job_core_doublejeopardy_van,quick)

DESC(job_core_doublejeopardy_sched,"Scheduler: make sure condor does not generate an abort AND the expected abnormal termination.")
RUN(job_core_doublejeopardy_sched)
TESTCLASS(job_core_doublejeopardy_sched,core)
TESTCLASS(job_core_doublejeopardy_sched,quick)

DESC(job_core_env_sched,"Scheduler: Does environment get to the job")
RUN(job_core_env_sched)
TESTCLASS(job_core_env_sched,core)
TESTCLASS(job_core_env_sched,quick)

DESC(job_core_env_van,"Vanilla: Does environment get to the job")
RUN(job_core_env_van)
TESTCLASS(job_core_env_van,core)
TESTCLASS(job_core_env_van,quick)

DESC(job_core_err_sched,"Scheduler: Does requested error file get used?")
RUN(job_core_err_sched)
TESTCLASS(job_core_err_sched,core)
TESTCLASS(job_core_err_sched,quick)

DESC(job_core_err_van,"Vanilla: Does requested error file get used?")
RUN(job_core_err_van)
TESTCLASS(job_core_err_van,core)
TESTCLASS(job_core_err_van,quick)

DESC(job_core_hold_sched,"Scheduler: job is told to begin on hold. So we test for that state when we get the submitted event")
RUN(job_core_hold_sched)
TESTCLASS(job_core_hold_sched,core)
TESTCLASS(job_core_hold_sched,quick)

DESC(job_core_hold_van,"Vanilla: job is told to begin on hold. So we test for that state when we get the submitted event")
RUN(job_core_hold_van)
TESTCLASS(job_core_hold_van,core)
TESTCLASS(job_core_hold_van,quick)

DESC(job_core_initialdir_sched,"Scheduler: We change the initialdir and assure log and stuff goes there")
RUN(job_core_initialdir_sched)
TESTCLASS(job_core_initialdir_sched,core)
TESTCLASS(job_core_initialdir_sched,quick)

DESC(job_core_initialdir_van,"Vanilla: We change the initialdir and assure log and stuff goes there")
RUN(job_core_initialdir_van)
TESTCLASS(job_core_initialdir_van,core)
TESTCLASS(job_core_initialdir_van,quick)

DESC(job_core_remote-initialdir_van,"Vanilla: We change the remote_initialdir and assure the job runs there")
RUN(job_core_remote-initialdir_van)
TESTCLASS(job_core_remote-initialdir_van,core)
TESTCLASS(job_core_remote-initialdir_van,quick)

DESC(job_core_input_sched,"Scheduler: Verify the specified input file is used")
RUN(job_core_input_sched)
TESTCLASS(job_core_input_sched,core)
TESTCLASS(job_core_input_sched,quick)

DESC(job_core_input_van,"Vanilla: Verify the specified input file is used")
RUN(job_core_input_van)
TESTCLASS(job_core_input_van,core)
TESTCLASS(job_core_input_van,quick)

DESC(job_core_leaveinqueue_sched,"Scheduler: verify true and false classads do leave_in_queue right")
RUN(job_core_leaveinqueue_sched)
TESTCLASS(job_core_leaveinqueue_sched,core)
TESTCLASS(job_core_leaveinqueue_sched,long)

DESC(job_core_leaveinqueue_van,"Vanilla: verify true and false classads do leave_in_queue right")
RUN(job_core_leaveinqueue_van)
TESTCLASS(job_core_leaveinqueue_van,core)
TESTCLASS(job_core_leaveinqueue_van,quick)

DESC(job_core_macros_sched,"Scheduler: a number of macros get passed in as args") 
RUN(job_core_macros_sched)
TESTCLASS(job_core_macros_sched,core)
TESTCLASS(job_core_macros_sched,quick)

DESC(job_core_niceuser_van,"Vanilla: Ensure non nice_user job completes before nice_user job") 
RUN(job_core_niceuser_van)
TESTCLASS(job_core_niceuser_van,core)
TESTCLASS(job_core_niceuser_van,quick)

DESC(job_core_output_sched,"Scheduler: Verify trivially simple output from an input file")
RUN(job_core_output_sched)
TESTCLASS(job_core_output_sched,core)
TESTCLASS(job_core_output_sched,quick)

DESC(job_core_output_van,"Vanilla: Verify trivially simple output from an input file")
RUN(job_core_output_van)
TESTCLASS(job_core_output_van,core)
TESTCLASS(job_core_output_van,quick)

DESC(job_core_perhold_sched,"Scheduler: verify true and false triggers for periodic hold")
RUN(job_core_perhold_sched)
TESTCLASS(job_core_perhold_sched,core)
TESTCLASS(job_core_perhold_sched,quick)

DESC(job_core_perrelease_sched,"Scheduler: verify a policy of true/false for periodic release does the right thing")
RUN(job_core_perrelease_sched)
TESTCLASS(job_core_perrelease_sched,core)
TESTCLASS(job_core_perrelease_sched,long)

DESC(job_core_perrelease_van,"Vanilla: verify a policy of true/false for periodic release does the right thing")
RUN(job_core_perrelease_van)
TESTCLASS(job_core_perrelease_van,core)
TESTCLASS(job_core_perrelease_van,long)

DESC(job_core_perremove_van,"Vanilla: test true/false variations of periodic remove")
RUN(job_core_perremove_van)
TESTCLASS(job_core_perremove_van,core)
TESTCLASS(job_core_perremove_van,quick)

DESC(job_core_perremove_sched,"Scheduler: test true/false variations of periodic remove")
RUN(job_core_perremove_sched)
TESTCLASS(job_core_perremove_sched,core)
TESTCLASS(job_core_perremove_sched,quick)

DESC(job_core_plus_van,"Vanilla: Verify +entries go to job ad")
RUN(job_core_plus_van)
TESTCLASS(job_core_plus_van,core)
TESTCLASS(job_core_plus_van,quick)

DESC(job_core_plus_sched,"Scheduler: Verify +entries go to job ad")
RUN(job_core_plus_sched)
TESTCLASS(job_core_plus_sched,core)
TESTCLASS(job_core_plus_sched,quick)

/*
DESC(job_core_priority_van,"Vanilla: Verify respect for job priority")
RUN(job_core_priority_van)
TESTCLASS(job_core_priority_van,core)
TESTCLASS(job_core_priority_van,quick)
TESTCLASS(job_core_priority_van,btdebug)
*/

DESC(job_core_queue_sched,"Scheduler: Verify the  queue command")
RUN(job_core_queue_sched)
TESTCLASS(job_core_queue_sched,core)
TESTCLASS(job_core_queue_sched,quick)

DESC(job_core_time-deferral_van,"Vanilla: Verify deferred execution")
RUN(job_core_time-deferral_van)
TESTCLASS(job_core_time-deferral_van,core)
TESTCLASS(job_core_time-deferral_van,quick)

/*******
 These work but always cause a ShadowException
 Commenting out for for now
 Andy - 02.17.06
DESC(job_core_time-deferral-hold_van,"Vanilla: Verify HOLD against deferred execution")
RUN(job_core_time-deferral-hold_van)
TESTCLASS(job_core_time-deferral-hold_van,core)
TESTCLASS(job_core_time-deferral-hold_van,quick)

DESC(job_core_time-deferral-remove_van,"Vanilla: Verify REMOVE against deferred execution")
RUN(job_core_time-deferral-remove_van)
TESTCLASS(job_core_time-deferral-remove_van,core)
TESTCLASS(job_core_time-deferral-remove_van,quick)
*******/

DESC(job_core_crontab_van,"Vanilla: CronTab Scheduling")
RUN(job_core_crontab_van)
TESTCLASS(job_core_crontab_van,core)
TESTCLASS(job_core_crontab_van,quick)

DESC(job_core_max-running_local,"Local: Max job running limit")
RUN(job_core_max-running_local)
TESTCLASS(job_core_max-running_local,core)
TESTCLASS(job_core_max-running_local,quick)
TESTCLASS(job_core_max-running_local,local)

DESC(job_schedd_restart-holdjobs-ok,"Held queue ok after schedd restart")
RUN(job_schedd_restart-holdjobs-ok)
TESTCLASS(job_schedd_restart-holdjobs-ok,core)
TESTCLASS(job_schedd_restart-holdjobs-ok,quick)

DESC(job_schedd_restart-runningjobs-ok,"Running queue ok after schedd restart")
RUN(job_schedd_restart-runningjobs-ok)
TESTCLASS(job_schedd_restart-runningjobs-ok,core)
TESTCLASS(job_schedd_restart-runningjobs-ok,quick)

/* File Transfer Tests */

DESC(job_filexfer_base-input1_van,"Vanilla: Tests input file does not make it with filetransfer off")
RUN(job_filexfer_base-input1_van)
TESTCLASS(job_filexfer_base-input1_van,filexfer)
TESTCLASS(job_filexfer_base-input1_van,quick)

DESC(job_filexfer_base-input4_van,"Vanilla: Verifies submit fails with input list and with filetransfer off")
RUN(job_filexfer_base-input4_van)
TESTCLASS(job_filexfer_base-input4_van,filexfer)
TESTCLASS(job_filexfer_base-input4_van,quick)

DESC(job_filexfer_base_van,"Vanilla: Is executable moved correctly to initialdir/sandbox?")
RUN(job_filexfer_base_van)
TESTCLASS(job_filexfer_base_van,filexfer)
TESTCLASS(job_filexfer_base_van,quick)

DESC(job_filexfer_input-onegone_van,"Vanilla: test for failure when specified input file is missing")
RUN(job_filexfer_input-onegone_van)
TESTCLASS(job_filexfer_input-onegone_van,filexfer)
TESTCLASS(job_filexfer_input-onegone_van,quick)

DESC(job_filexfer_limitback_van,"Vanilla: ask for exactly 2 files returned")
RUN(job_filexfer_limitback_van)
TESTCLASS(job_filexfer_limitback_van,filexfer)
TESTCLASS(job_filexfer_limitback_van,quick)

DESC(job_filexfer_trans-excut-true_van,"Vanilla: explicitely set transfer_executable... test complains")
RUN(job_filexfer_trans-excut-true_van)
TESTCLASS(job_filexfer_trans-excut-true_van,filexfer)
TESTCLASS(job_filexfer_trans-excut-true_van,quick)

DESC(job_filexfer_whento-base_van,"Vanilla: Inputless test of a job running with transfer files enabled.")
RUN(job_filexfer_whento-base_van)
TESTCLASS(job_filexfer_whento-base_van,filexfer)
TESTCLASS(job_filexfer_whento-base_van,quick)

DESC(job_filexfer_whento-simpleinput_van,"Vanilla: job runs with input file requested")
RUN(job_filexfer_whento-simpleinput_van)
TESTCLASS(job_filexfer_whento-simpleinput_van,filexfer)
TESTCLASS(job_filexfer_whento-simpleinput_van,quick)

DESC(job_filexfer_whento-withinput_van,"Vanilla: Multiple input files arrive ok")
RUN(job_filexfer_whento-withinput_van)
TESTCLASS(job_filexfer_whento-withinput_van,filexfer)
TESTCLASS(job_filexfer_whento-withinput_van,quick)

DESC(job_filexfer_output_van,"Vanilla: Are 6 output files returned")
RUN(job_filexfer_output_van)
TESTCLASS(job_filexfer_output_van,filexfer)
TESTCLASS(job_filexfer_output_van,quick)

#if !defined(IS_HPUX10)
/*
	GNATS 548 perl md5 module missing on HPUX 10 machine(s)
*/
DESC(job_filexfer_md5-remote_van,"Vanilla: Can we move 200 megs and not impact md5 checksum?")
RUN(job_filexfer_md5-remote_van)
TESTCLASS(job_filexfer_md5-remote_van,filexfer)
TESTCLASS(job_filexfer_md5-remote_van,quick)
#endif

/* Dagman Tests */

DESC(job_dagman_comlog,"Run a dag with multiple nodes sharing a common log")
DEPS(job_dagman_comlog,x_read_joblog.exe)
RUN(job_dagman_comlog)
TESTCLASS(job_dagman_comlog,dagman)
TESTCLASS(job_dagman_comlog,quick)

DESC(job_dagman_fullremove,"Ensure a removed dag is completely removed")
DEPS(job_dagman_fullremove,x_read_joblog.exe)
RUN(job_dagman_fullremove)
TESTCLASS(job_dagman_fullremove,dagman)
TESTCLASS(job_dagman_fullremove,quick)

DESC(job_dagman_basic,"Basic one node dag")
RUN(job_dagman_basic)
TESTCLASS(job_dagman_basic,dagman)
TESTCLASS(job_dagman_basic,quick)

DESC(job_dagman_maxpostscripts,"Check that throttling by post scripts works")
RUN(job_dagman_maxpostscripts)
TESTCLASS(job_dagman_maxpostscripts,dagman)
TESTCLASS(job_dagman_maxpostscripts,quick)

DESC(job_dagman_maxprescripts,"Check that throttling by pre scripts works")
RUN(job_dagman_maxprescripts)
TESTCLASS(job_dagman_maxprescripts,dagman)
TESTCLASS(job_dagman_maxprescripts,quick)

DESC(job_dagman_prepost,"Run a dag and verify each nodes pre and post scripts ran")
RUN(job_dagman_prepost)
TESTCLASS(job_dagman_prepost,dagman)
TESTCLASS(job_dagman_prepost,quick)

DESC(job_dagman_retry,"Make sure a retry dag runs correctly.")
DEPS(job_dagman_retry,x_read_joblog.exe)
RUN(job_dagman_retry)
TESTCLASS(job_dagman_retry,dagman)
TESTCLASS(job_dagman_retry,quick)

DESC(job_dagman_throttle,"Test Dagman throttling ability")
DEPS(job_dagman_throttle,x_read_joblog.exe)
RUN(job_dagman_throttle)
TESTCLASS(job_dagman_throttle,dagman)
TESTCLASS(job_dagman_throttle,long)

DESC(job_dagman_uncomlog,"Test Dagmans ability to have sepaarate job log files")
DEPS(job_dagman_uncomlog,x_read_joblog.exe)
RUN(job_dagman_uncomlog)
TESTCLASS(job_dagman_uncomlog,dagman)
TESTCLASS(job_dagman_uncomlog,quick)

DESC(job_dagman_unlessexit,"Test that the retries can be stopped with particular exit values from node.")
DEPS(job_dagman_unlessexit,x_read_joblog.exe)
RUN(job_dagman_unlessexit)
TESTCLASS(job_dagman_unlessexit,dagman)
TESTCLASS(job_dagman_unlessexit,quick)

DESC(job_dagman_xmlcomlog,"Look at Dagmans ability to handle a common XML based log file")
RUN(job_dagman_xmlcomlog)
TESTCLASS(job_dagman_xmlcomlog,dagman)
TESTCLASS(job_dagman_xmlcomlog,quick)

DESC(job_dagman_xmluncomlog,"Look at Dagmans ability to handle uncommon XML based log files")
RUN(job_dagman_xmluncomlog)
TESTCLASS(job_dagman_xmluncomlog,dagman)
TESTCLASS(job_dagman_xmluncomlog,quick)

/* Sample performance tests */

/*
** Turn off for now.
**
**DESC(perf_busy_lynn_100_100_500_sched,"Generated cpu loading performance test\n");
**RUN(perf_busy_lynn_100_100_500_sched)
**TESTCLASS(perf_busy_lynn_100_100_500_sched,performance)
**TESTCLASS(perf_busy_lynn_100_100_500_sched,long)
**
**DESC(perf_jobs_sue_10_10_30_van,"Generated jobs performance test\n");
**RUN(perf_jobs_sue_10_10_30_van)
**TESTCLASS(perf_jobs_sue_10_10_30_van,performance)
**TESTCLASS(perf_jobs_sue_10_10_30_van,long)
**
**DESC(perf_xfer_deb_10_10_30_van,"Generated transfer performance test\n");
**RUN(perf_xfer_deb_10_10_30_van)
**TESTCLASS(perf_xfer_deb_10_10_30_van,performance)
**TESTCLASS(perf_xfer_deb_10_10_30_van,long)
**
*/

/* Initial top level tests */

DESC(job_filexfer_sandbox-empty_van,"Are job sandboxes with bad permissions cleaned up?")
RUN(job_filexfer_sandbox-empty_van)
TESTCLASS(job_filexfer_sandbox-empty_van,framework)
TESTCLASS(job_filexfer_sandbox-empty_van,quick)

DESC(job_core_sh-loop_van,"Simple vanilla job that loops for N seconds")
RUN(job_core_sh-loop_van)
TESTCLASS(job_core_sh-loop_van,framework)
TESTCLASS(job_core_sh-loop_van,quick)

BUILD($(CC),job_core_bigenv,c)
DESC(job_core_bigenv_van,"Vanilla test for enormous environment")
DEPS(job_core_bigenv_van,job_core_bigenv.exe)
RUN(job_core_bigenv_van)
TESTCLASS(job_core_bigenv_van,env)
TESTCLASS(job_core_bigenv_van,framework)
TESTCLASS(job_core_bigenv_van,quick)

DESC(job_core_bigenv_sched,"Scheduler test for enormous environment")
DEPS(job_core_bigenv_sched,job_core_bigenv.exe)
RUN(job_core_bigenv_sched)
TESTCLASS(job_core_bigenv_sched,env)
TESTCLASS(job_core_bigenv_sched,quick)

/* NOTE: we want this test in the top-level, even though we're linking
   it for standard universe, since we really don't care about
   different compilers for this one... we just need to see how the
   starter/shadow behave when we drop a core file
*/
CBUILD($(CC),job_core_coredump,c)
#if ! IS_CLIPPED
DESC(job_core_coredump_std,"Do we handle core files made by standard jobs?")
DEPS(job_core_coredump_std,job_core_coredump.cndr.exe)
RUN(job_core_coredump_std)
TESTCLASS(job_core_coredump_std,framework)
TESTCLASS(job_core_coredump_std,quick)
#endif /* ! IS_CLIPPED */
/* This test fails constantly and is off for now
**DESC(job_core_coredump_van,"Do we handle core files made by vanilla jobs?")
**DEPS(job_core_coredump_van,job_core_coredump.exe)
**RUN(job_core_coredump_van)
**TESTCLASS(job_core_coredump_van,framework)
**TESTCLASS(job_core_coredump_van,quick)
*/


/************************************************************************
   Settings specific to compiler-specific subdirectories
************************************************************************/

#if ! IS_CLIPPED 

all:: compiler_list

#if HAS_FORTRAN

#if HAS_GNU_G77
/* g77 never has recursion */
F_COMPILER_TARGET(g77,$(GNU_G77),TESTSUITE_FLAGS_G77,0)
#endif

#if HAS_VENDOR_F77
#if FORTRAN_HAS_RECURSION
F_COMPILER_TARGET(f77,$(VENDOR_F77),TESTSUITE_FLAGS_F77,1)
#else 
F_COMPILER_TARGET(f77,$(VENDOR_F77),TESTSUITE_FLAGS_F77,0)
#endif /* FORTRAN_HAS_RECURSION */
#endif /* HAS_VENDOR_F77 */

#if HAS_VENDOR_F90
F_COMPILER_TARGET(f90,$(VENDOR_F90),TESTSUITE_FLAGS_F77,0)
#endif

#endif /* HAS_FORTRAN */

/* We always want to build the test suite with gcc and g++ */
C_COMPILER_TARGET(gcc,gcc,TESTSUITE_FLAGS_GCC)

CPP_COMPILER_TARGET(g++,g++,TESTSUITE_FLAGS_GPP)

/* now, let's see if we've got any vendor compilers */
#if HAS_VENDOR_CC
C_COMPILER_TARGET(cc,$(VENDOR_CC),TESTSUITE_FLAGS_CC)
#endif

#if HAS_VENDOR_CPLUS
CPP_COMPILER_TARGET($(VENDOR_CPLUS_NAME),$(VENDOR_CPLUS),TESTSUITE_FLAGS_CPP)
#endif

#else /* IS_CLIPPED */

compiler_list:
	touch compiler_list

#endif /* ! IS_CLIPPED */

resubmit::
	./x_makeclean.pl

check:: resubmit
	./batch_test.pl -r 1500

check-serialized:: resubmit
	./x_runtests.pl -c quick -t 1200

/***********************************************************************
   Empty rules to make our top-level Imakefile happy
************************************************************************/

html:
release::
stripped::
static::
clean::

