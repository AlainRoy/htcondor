#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorPersonal;

CondorPersonal::DebugOff();
Condor::DebugOff();

$cmd_template = "lib_eventlog.template";
$testname = 'lib_eventlog - test dropping of events AND job ad attributes into event log' ;
$cmd = "lib_eventlog.cmd";
$corename = "lib_eventlog";

# where am I running
$currenthost = CondorTest::getFqdnHost();
CondorTest::fullchomp($currenthost);

system("date");

$mypid = CondorPersonal::SaveMeSetup($corename);
$mysaveme = $corename . ".saveme";

if($mypid == 0) {
	die "Saveme setup for test failed\n";
}

$mysubmitnm = $corename . $mypid . ".cmd";
$mysubmitnmcmdout = $corename . $mypid . ".cmd.out";
$mysubmitnmlog = $corename . $mypid . ".log" ;
$mysubmitnmerr = $corename . $mypid . ".err" ;
$mysubmitnmout = $corename . $mypid . ".out" ;
$mycorenm = $corename . ".cmd";
$mycorenmcmdout = $corename . ".cmd.out";
$mycorenmlog = $corename . ".log";
$mycorenmerr = $corename . ".err";
$mycorenmout = $corename . ".out";

#print "Master PID is $mypid\n";
#print "Master PID submit file is $mysubmitnm\n";

system("cp x_lib_eventlog-xml_config_postsrc.template x_lib_eventlog-xml_config_postsrc");

# get a remote scheduler running (side b)
my $configrem = CondorPersonal::StartCondor("x_param.libeventlog-xml" ,"eventlog-xml");
my @parallel = split /\+/, $configrem;
my $parallelconfig = shift @parallel;
my $parallelport = shift @parallel;

print "--- eventlog config is $parallelconfig and the port is $parallelport---\n";

$ENV{CONDOR_CONFIG} = $parallelconfig;

print "Set config to $parallelconfig\n";


#print "Looking for schedd for Basic Parallel Test\n";
system("condor_status -pool $currenthost:$parallelport -schedd -format '%s\n' Name");

# Edit submit file to submit to scheduler at remote (side b) schedd.
my $line;
open(CSUB,">$mysubmitnm") || die "Can't open new submit file $mysubmitnm: $!\n";
open(TPLATE,"<$cmd_template") || die "Can't open submit file template $cmd_template: $!\n";
while(<TPLATE>)
{
	CondorTest::fullchomp($_);
	$line = $_;
	if( $line =~ /^\s*log\s*= .*$/)
	{
		my $lognm = $mysubmitnmlog;
		#print "New log name: $lognm\n";
		print CSUB "log = $lognm\n";
	}
	elsif( $line =~ /^\s*output\s*= .*$/)
	{
		my $outputnm = $mysubmitnmout;
		#print "New out name: $outputnm\n";
		print CSUB "output = $outputnm\n";
	}
	elsif( $line =~ /^\s*error\s*= .*$/)
	{
		my $errornm = $mysubmitnmerr;
		#print "New error name: $errornm\n";
		print CSUB "error = $errornm\n";
	}
	else
	{
		#print "template: $line\n";
		print CSUB "$line\n";
	}
}
close(TPLATE);
close(CSUB);


my $result = system("./lib_eventlog.pl $mysubmitnm");
print "Result of basic eventlog  test is  $result\n";

if( $result == 0 ) {
	# well did we get out the results into the log we wanted?
	# determine where the log went
	# run log reader and compare with expected values.

	print "Checking Results!!!\n";
	my $elog = `condor_config_val EVENT_LOG`;
	chomp($elog);
	my $expected = "x_lib_eventlog.expected";
	my @want;
	my @got;
	open(ELOG,"./x_read_joblog.exe $elog TRACE 2>&1 |") || die "Could not read log <<$elog>>: $!\n";
	open(EXP,"<$expected") || die "Could not read expected values <<$expected>>: $!\n";
	while(<ELOG>) {
		push  @got, $_;
	}
	close(ELOG);
	while(<EXP>) {
		push  @want, $_;
	}
	close(EXP);
	foreach $line (@got) {
		my $desired = shift(@want);
		if($desired ne $line) {
			print "Result Mismatch!:$desired ne $line!!!!\n";
			$result = 1;
			last;
		} else {
			#print "Result Match!:$desired eq $line!!!!\n";
		}
	}
	print "Results all Match! Test is a success.\n";
}

system("cp *lib_eventlog* $mysaveme");

if( -e "$mysubmitnm" )
{
	system("cp $mysubmitnm $mycorenm");
}

if( -e "$mysubmitnmout" )
{
	system("cp $mysubmitnmcmdout $mycorenmcmdout");
}

if( -e "$mysubmitnmlog" )
{
	system("cp $mysubmitnmlog $mycorenmlog");
}

if( $result != 0 )
{
	exit(1);
}

my @adarray;
my $status = 1;
my $cmd = "condor_off -fast -master";
$status = CondorTest::runCondorTool($cmd,\@adarray,2);
if(!$status)
{
	print "Test failure due to Condor Tool Failure<$cmd>\n";
	exit(1)
}

system("date");

