#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorPersonal;

CondorPersonal::DebugOff();
Condor::DebugOff();

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

$testname = 'cmd_status_shows-any';
$corename = "cmd_status_shows-any";

# where am I running
$currenthost = CondorTest::getFqdnHost();
chomp($currenthost);
$primarycollector = $currenthost;
my @adarray;

CondorTest::fullchomp($currenthost);

system("date");

$mypid = CondorPersonal::SaveMeSetup($corename);
$mysaveme = $corename . ".saveme";

if($mypid == 0) {
	die "Saveme setup for test failed\n";
}

$mysubmitnm = $corename . $mypid . ".cmd";
$mysubmitnmout = $corename . $mypid . ".cmd.out";
$mysubmitnmlog = $corename . $mypid . ".log";
$mysubmitnmout = $corename . $mypid . ".out";
$mycorenm = $corename . ".cmd";
$mycorenmout = $corename . ".cmd.out";
$mycorenmlog = $corename . ".log";

print "Master PID is $mypid\n";
print "Master PID submit file is $mysubmitnm\n";

my $version = "local";
# get a local scheduler running (side a)
my $configloc = CondorPersonal::StartCondor("x_param.cmdstatus-multi" ,$version);
my @local = split /\+/, $configloc;
my $locconfig = shift @local;
my $locport = shift @local;

print "---local config is $locconfig and local port is $locport---\n";

$primarycollector = $primarycollector . ":" . $locport;

print "Primary collector for other nodes <<$primarycollector>>\n";


$saveconfig = $ENV{CONDOR_CONFIG};
$ENV{CONDOR_CONFIG} = $locconfig;
print "New collector is this:\n";
system("condor_config_val COLLECTOR_HOST");
$ENV{CONDOR_CONFIG} = $saveconfig;

my $line;
open(SCHEDDSRC,"<x_param.cmdstatus-multi.template") || die "Could not open x_param.cmdstatus-multi.template: $!\n";
open(SCHEDDONE,">x_param.cmdstatus-multi-one") || die "Could not open x_param.cmdstatus-multi-one: $!\n";
while(<SCHEDDSRC>) {
	$line = $_;
	chomp($line);
	if($line =~ /^\s*collector\s*=.*$/) {
		print SCHEDDONE "collector  = $primarycollector\n";
	} else {
		print SCHEDDONE "$line\n";
	}
}
close(SCHEDDSRC);
close(SCHEDDONE);

$version = "scheddone";
# get another node running
my $configscheddone = CondorPersonal::StartCondor("x_param.cmdstatus-multi-one" ,$version);
my @scheddone = split /\+/, $configscheddone;
my $scheddoneconfig = shift @scheddone;
my $scheddoneport = shift @scheddone;

print "---scheddone config is $scheddoneconfig and scheddone port is $scheddoneport---\n";

my $bail = 0;

# submit into scheddone
$ENV{CONDOR_CONFIG} = $scheddoneconfig;

# start two jobs which run till killed
my $cmd = "condor_submit ./x_cmdrunforever.cmd2";
$cmdstatus = CondorTest::runCondorTool($cmd,\@adarray,2);
if(!$cmdstatus)
{
	print "Test failure due to Condor Tool Failure<$cmd>\n";
	exit(1)
}

my $qstat = CondorTest::getJobStatus(1.1);
print "remote cluster 1.1 status is $qstat\n";
while($qstat != RUNNING)
{
	print "remote Job status 1.1 not RUNNING - wait a bit\n";
	sleep 4;
	$qstat = CondorTest::getJobStatus(1.1);
}

$qstat = CondorTest::getJobStatus(1.0);
print "remote cluster 1.0 status is $qstat\n";
while($qstat != RUNNING)
{
	print "remote Job status 1.0 not RUNNING - wait a bit\n";
	sleep 4;
	$qstat = CondorTest::getJobStatus(1.0);
}

# submit into collector node schedd
$ENV{CONDOR_CONFIG} = $locconfig;

#print "Lets look at status from first pool....\n";
#system("condor_status");

# start two jobs which run till killed
my $cmd = "condor_submit ./x_cmdrunforever.cmd2";
$cmdstatus = CondorTest::runCondorTool($cmd,\@adarray,2);
if(!$cmdstatus)
{
	print "Test failure due to Condor Tool Failure<$cmd>\n";
	exit(1)
}

my $qstat = CondorTest::getJobStatus(1.1);
print "local cluster 1.1 status is $qstat\n";
while($qstat != RUNNING)
{
	print "local Job status 1.1 not RUNNING - wait a bit\n";
	sleep 4;
	$qstat = CondorTest::getJobStatus(1.1);
}

$qstat = CondorTest::getJobStatus(1.0);
print "local cluster 1 status is $qstat\n";
while($qstat != RUNNING)
{
	print "local Job status 1.0 not RUNNING - wait a bit\n";
	sleep 4;
	$qstat = CondorTest::getJobStatus(1.0);
}

my $cmdstatus;
my $sched1 = "master_" . $mypid . "local" . "@" . $currenthost;;
my $sched2 = "master_" . $mypid . "scheddone" . "@" . $currenthost;;

#Place condor_q back into the original condor config
#and aim the -global -pool command at this new collector.
#$ENV{CONDOR_CONFIG} = $saveconfig;
$ENV{CONDOR_CONFIG} = $scheddoneconfig;

#print "Lets look at status from second pool....\n";
#system("condor_status");

# allow time for all the nodes to update the collector
# by allowing N attempts
my $nattempts = 8;
my $count = 0;
my $done = 0;
my $found1 = 0;
my $cmd = "";


if($bail != 1) {
	print "Looking at new pool<condor_status>\n";
	while($count < $nattempts) {
	my $masterlocal = 0;
	my $mastersched = 0;
		$found1 = 0;
		$cmd = "condor_status";
		$cmdstatus = CondorTest::runCondorTool($cmd,\@adarray,2);
    	if(!$cmdstatus)
    	{
        	print "Test failure due to Condor Tool Failure<$cmd>\n";
        	exit(1)
    	}

		print "Looking at condor_status \n";

		foreach $line (@adarray) {
			if($line =~ /^.*master_loc.*$/) {
				print "found masterLocal: $line\n";
				$masterlocal = $masterlocal + 1;;
			} elsif($line =~ /^.*master_sch.*$/) {
				print "found master_schedd: $line\n";
				$mastersched = $mastersched + 1;;
			} else {
				#print "$line\n";
			}
		}

		if(($masterlocal == 2) && ($mastersched == 4)) {
			$bail = 1;
			print "Found expected number of startds(6)\n";
			print "Found 2 on local collector and 4 on alternate node in pool\n";
			last;
		} else {
			print "Keep going masterlocal is $masterlocal and mastersched is $mastersched\n";
		}

		$count = $count + 1;
		sleep($count * 2);
	}
}

my $numclaimed = 0;

if($bail == 1) {
    # allow time for all the nodes to update the collector
    # by allowing N attempts
    # with 4 run forever jobs we are not stable until -claimed finds exactly 4
    $nattempts = 8;
    $count = 0;
    $done = 0;

    while($count < $nattempts) {
        $cmd = "condor_status -claimed -format \"%s\\n\" name";
        print "Looking for exactly 4 claimed slots\n";
        $cmdstatus = CondorTest::runCondorTool($cmd,\@adarray,2);
        if(!$cmdstatus)
        {
            print "Test failure due to Condor Tool Failure<$cmd>\n";
            exit(1)
        }

        # 4 are busy so 4 should be claimed....

        $numclaimed = 0;
        foreach $line (@adarray) {
            if($line =~ /^\s*slot(\d+)@master.*@.*$/) {
                #print "found claimed slot: $line\n";
                $numclaimed = $numclaimed + 1;;
                print "found claimed slot: $numclaimed of 4\n";
            } else {
                #print "skip: $line\n";
            }
        }

        if($numclaimed == 4) {
            print "Condor_status -claimed found the expected 4 slots\n";
            $done = 1;
            last;
        } else {
            print "Condor_status -claimed found incorrect claimed slot count<$numclaimed>\n";
        }

        $count = $count + 1;
		sleep($count * 2);
    }
}

 
my $numany = 0;
my %discoveries = {};
my @expectations = ("Submitter", "Negotiator", "DaemonMaster", "Scheduler", "Machine");

if(($numclaimed == 4) && ($done == 1)) {
	# process one of each ad type and then compare with expected list
	$cmd = "condor_status -any -format \"%s:\" MyType -format \"%s\n\" Name";
	print "Looking at -any($cmd)\n";
	$cmdstatus = CondorTest::runCondorTool($cmd,\@adarray,2);
    if(!$cmdstatus)
    {
        print "Test failure due to Condor Tool Failure<$cmd>\n";
        exit(1)
    }
	
	foreach $line (@adarray) {
		print "-any: $line\n";
		if( $line =~ /^(\w+):(.*)$/ ) {
			if( !(exists $discoveries{$1})) {
				print "Adding ($1/$2) to hash\n";
				$discoveries{$1} = $2;
			} else {
				#print "($1) already found....\n";
			}
		}
	}

	foreach $search (@expectations) {
		# it had best be in the hash!
		if(! (exists $discoveries{$search})) {
			$done = 0;
			print "Expected ad type \"$search\" not discovered(Failure of Test)\n";
			last;
		} else {
			print "Expected Ad Type ($search) found!\n";
		}
	}
}


print "Saving things and cleaning up....\n";

system("cp *cmd_status_shows-any* $mysaveme");

if( -e "$mysubmitnm" )
{
	system("cp $mysubmitnm $mycorenm");
}

if( -e "$mysubmitnmout" )
{
	system("cp $mysubmitnmout $mycorenmout");
}

if( -e "$mysubmitnmlog" )
{
	system("cp $mysubmitnmlog $mycorenmlog");
}

# still set to local config
 $ENV{CONDOR_CONFIG} = $locconfig;

my $status = 1;
my $cmd = "condor_rm -all";
$status = CondorTest::runCondorTool($cmd,\@adarray,2);
if(!$status)
{
	print "Test failure due to Condor Tool Failure<$cmd>\n";
	exit(1)
}

sleep(5);

$cmd = "condor_off -fast -master";
$status = CondorTest::runCondorTool($cmd,\@adarray,2);
if(!$status)
{
	print "Test failure due to Condor Tool Failure<$cmd>\n";
	exit(1)
}

$ENV{CONDOR_CONFIG} = $scheddoneconfig;

$status = 1;
$cmd = "condor_rm -all";
$status = CondorTest::runCondorTool($cmd,\@adarray,2);
if(!$status)
{
	print "Test failure due to Condor Tool Failure<$cmd>\n";
	exit(1)
}

sleep(5);

$cmd = "condor_off -fast -master";
$status = CondorTest::runCondorTool($cmd,\@adarray,2);
if(!$status)
{
	print "Test failure due to Condor Tool Failure<$cmd>\n";
	exit(1)
}

system("date");

if( $done == 0 )
{
	# actual test failed but we allowed cleanup
	exit(1);
}

print "cmd_status_shows-any SUCCESS\n";
system("date");
exit(0);
