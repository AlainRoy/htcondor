#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorPersonal;

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

$testname = 'job_flocking_to';
$corename = "job_flocking_to";

# where am I running
$currenthost = CondorTest::getFqdnHost();
chomp($currenthost);
$primarycollector = $currenthost;
my @adarray;

CondorTest::fullchomp($currenthost);

system("date");

$mypid = CondorPersonal::SaveMeSetup($corename);
$mysaveme = $corename . ".saveme";

if($mypid == 0) {
	die "Saveme setup for test failed\n";
}

$mysubmitnm = $corename . $mypid . ".cmd";
$mysubmitnmout = $corename . $mypid . ".cmd.out";
$mysubmitnmlog = $corename . $mypid . ".log";
$mysubmitnmout = $corename . $mypid . ".out";
$mycorenm = $corename . ".cmd";
$mycorenmout = $corename . ".cmd.out";
$mycorenmlog = $corename . ".log";

print "Master PID is $mypid\n";
print "Master PID submit file is $mysubmitnm\n";

my $version = "flockto";
# get a local scheduler running (side a)
my $configloc = CondorPersonal::StartCondor("x_param.flocktestflockto" ,$version);
my @local = split /\+/, $configloc;
my $locconfig = shift @local;
my $locport = shift @local;

print "---local config is $locconfig and local port is $locport---\n";

$primarycollector = $primarycollector . ":" . $locport;

print "Primary collector for other nodes <<$primarycollector>>\n";

$ENV{CONDOR_CONFIG} = $locconfig;
print "New collector is this:\n";
system("condor_config_val COLLECTOR_HOST");

my $line;
open(PARAMSRC,"<x_flockto_configpostsrc.template") || die "Could not open x_param.x_flockto_configpostsrc.template: $!\n";
open(PASRAMDONE,">x_flockto_configpostsrc") || die "Could not open x_flockto_configpostsrc: $!\n";
while(<PARAMSRC>) {
	$line = $_;
	chomp($line);
	if($line =~ /^\s*FLOCK_TO\s*=.*$/) {
		print PASRAMDONE "FLOCK_TO  = $primarycollector\n";
	} else {
		print PASRAMDONE "$line\n";
	}
}
close(PASRAMSRC);
close(PASRAMDONE);

$version = "flockfrom";
# get another node running
my $configflockto = CondorPersonal::StartCondor("x_param.flocktestlocal" ,$version);
my @flockto = split /\+/, $configflockto;
my $flocktoconfig = shift @flockto;
my $flocktoport = shift @flockto;

print "---home collector config is $flocktoconfig and collector port is $flocktoport---\n";

my $bail = 0;

my $flockstatus = CondorTest::verbose_system("./job_flocking_to.pl");
print "Status of flocked job is \"$flockstatus\"\n";

print "Saving things and cleaning up....\n";

system("cp *job_flocking_to* $mysaveme");

if( -e "$mysubmitnm" )
{
	system("cp $mysubmitnm $mycorenm");
}

if( -e "$mysubmitnmout" )
{
	system("cp $mysubmitnmout $mycorenmout");
}

if( -e "$mysubmitnmlog" )
{
	system("cp $mysubmitnmlog $mycorenmlog");
}

# still set to local config
 $ENV{CONDOR_CONFIG} = $locconfig;


$cmd = "condor_off -fast -master";
$status = CondorTest::runCondorTool($cmd,\@adarray,2);
if(!$status)
{
	print "Test failure due to Condor Tool Failure<$cmd>\n";
	exit(1)
}

$ENV{CONDOR_CONFIG} = $flocktoconfig;


$cmd = "condor_off -fast -master";
$status = CondorTest::runCondorTool($cmd,\@adarray,2);
if(!$status)
{
	print "Test failure due to Condor Tool Failure<$cmd>\n";
	exit(1)
}

system("date");

if( $flockstatus != 0 )
{
	# actual test failed but we allowed cleanup
	print "job_flocking_to FAILED\n";
	system("date");
	exit(1);
}

system("date");
exit(0);
