#!/usr/bin/env perl
#########################################################
## Max Local Jobs
##
## We are testing to make sure that if the user puts
## in a requirement to limit how many local universe jobs will
## be started, the schedd will be able to block them accordingly
##
#########################################################
use CondorTest;

$testname = 'Max Running Local Universe Jobs';
$cmdfile  = 'job_core_max-running_local.cmd';
$outfile  = 'job_core_max-running_local.out';

##
## Sleep time 
## This needs to match the arguements value that is in the .cmd file
##
my $SLEEP_TIME = 10; # seconds
	
##
## Last Run Time
## When a job runs, we record the last run time
## All the jobs should only run one at a time
##
my $LAST_RUN_TIME = 0;
	
##
## If the runs succeed, but when we analyze the jobs' runtimes
## and see that they are running when they shouldn't, we will store
## the error message in here
##
my $testFailure = "";

##
##
##
my $successCallback = sub {
	my %info = @_;
	##
	## This is the time that they said they ran on the execute machine
	##
	open(FILE, $outfile) || die("Failed to open output file '$outfile'");
	my @output = <FILE>;
	close(FILE);
	my $reportTime  = "@output";
	
	##
	## If there wasn't a last run time value, then this is the first
	## job submitted. Otherwise we to check to make sure that they 
	## ran far enough apart from each other
	##
	if ( ! $LAST_RUN_TIME ) {
		if ( $reportTime - $LAST_RUN_TIME < $SLEEP_TIME ) {
			$testFailure = "More than one local job ran concurrently!";
			return ( 0 );
		}
	}
	$LAST_RUN_TIME = $reportTime;
	return ( 1 );
};
	
	
##
## Run ye olde' test
##
my $success = true;
CondorTest::RegisterExitedSuccess($testname, $successCallback );
if (CondorTest::RunTest( $testname, $cmdfile, 0)) {
	if ($testFailure) {
		print "$testname: CondorTest::RunTest() failed - $testFailure\n";
		$success = false;
	}
##
## For some reason it failed to run!
##
} else {
	print "$testname: CondorTest::RunTest() failed to run\n";
	$success = false;
}		
	
## 
## Return an exit status based on what happened with all our tests!
##
exit( $success ? 0 : -1 );
