#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use Cwd;
use Sys::Hostname;

$cmd = 'job_core_queue_sched.cmd';
$testname = 'condor_submit queue - scheduler U';
$queuelog = "submit_queue_scheduler_log.log";


my $pid = $$;
system("mkdir $pid");
my $curcwd = getcwd();
print "current directory is $curcwd\n";

my $socketname = "/tmp/queuetest";
my $newsocketname = $curcwd . "/" . $pid . "/queuetest";
print "current directory is $newsocketname\n";
@filestoedit = qw/job_core_queue.pl/;
@filestochmod = qw/job_core_queue.pl/;

# now make sure each place using socket refers to pid specific directory!
foreach $name (@filestoedit)
{
	print "Correcting socket name in $name\n";
	open(FF,"<$name") || die "Failed to open $name: $!\n";
	open(NEWFF,">$name.new") || die "Failed to open $name.new: $!\n";
	my $line = "";
	while(<FF>)
	{
		CondorTest::fullchomp($_);
		$line = $_;
		if( $line =~ /(^\s*.*)$socketname(.*$)/)
		{
			print "Found ---$1$socketname$2---\n";
			print "replacing with $1$newsocketname$2\n";
			print NEWFF "$1$newsocketname$2\n";
		}
		else
		{
			print NEWFF "$line\n";
		}
	}
	close(FF);
	close(NEWFF);
	system("mv $name.new $name");
}

foreach $name (@filestochmod)
{
	system("chmod 755 $name");
}

my $queuelength = 10;
my $submitcount = 0;
my $donecount = 0;

open(QUEUECMD,"<$cmd") || die "Can't open cmd file $!\n";
open(NEWCMD,">$cmd.new") || die "Can not open new command file: $!\n";
while(<QUEUECMD>)
{
	CondorTest::fullchomp($_);
	$line = $_;
	if( $line =~ /^\s*queue\s*.*$/ )
	{
		print NEWCMD "queue $queuelength\n";
	}
	else
	{
		print NEWCMD "$line\n";
	}
}
close(QUEUECMD);
close(NEWCMD);

system("mv $cmd.new $cmd");

$ExitSuccessBase = sub {
	my %info = @_;

};

my @lines;


$success = sub
{
    my %args = @_;
	my $cluster = $args{"cluster"};
	$donecount += 1;
	if( $donecount == $submitcount )
	{
		# kill server
		#print "x_general_client.pl $newsocketname quit\n";
		system("./x_general_client.pl $newsocketname quit");
		# test for correct number of hellos from jobs in jog
		open(FLOW,"./x_readqueuelog.pl $flowlog HELLO $queuelength | ") || die "Can not open flowlog: $!\n";
		while(<FLOW>)
		{
			my $ret;
			CondorTest::fullchomp($_);
			$ret = $_;
			print "$ret\n";
			if( $ret ne "0" )
			{
				die "failed to run exact number of pre/post scripts\n";
			}
		}
	}
};

$submit = sub
{
    my %args = @_;
	my $cluster = $args{"cluster"};
	$submitcount += 1;
};

# can not do this because we stick here as long as server runs
#system("x_general_server.pl $queuelog");
system("rm -f $queuelog");
defined(my $pid = fork) or die "Cannot fork: $!";
unless ($pid)
{
	#child runs and ceases to exist
	exec "./x_general_server.pl $newsocketname $queuelog";
	die "can not exec dumpcore!\n";
}
#main process continues here
sleep 2;

CondorTest::RegisterExitedSuccess( $testname, $success );
CondorTest::RegisterSubmit( $testname, $submit );


if( CondorTest::RunTest($testname, $cmd, 0) ) {
	print "$testname: SUCCESS\n";
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}

