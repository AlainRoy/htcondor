/*
  How to read this file:

  This file is used to generate 3 C language files -  "switches.c",
  "senders.c", and "receivers.c".  Not all of the information contained
  here is needed in every case.

  Switches are functions which are linked in with the user's code, and
  have the same names as the system call they are intended to invoke.
  The switch will determine whether the call should be done locally or
  remotely, and will invoke an appropriate mechanism to accomplish
  that.  In the case of local execution, that will most often be the
  syscall() routine.  In the case of remote calls, that will always be
  the REMOTE_syscall() routine.  The syscall() routine is generally
  provided in the C library, and REMOTE_syscall() is provided by
  Condor.  More on this in the next paragraph...

  Senders are the part of the code which packages up the arguments of a
  system call, sends them to the shadow for remote execution, and then
  package up the results so it looks to the calling routine as though
  the normal system call were done.  The REMOTE_syscall() routine is
  organized as a giant switch() statement, with one "case" for each
  system call.  Each case is called a "sender".

  Receivers are the part of the code which runs on the submitting
  machine that matches with the sender.  The receiver reads all the
  arguments to the system call, performs the call, then sends back the
  results.  We plan to eventually generate the recievers from this
  template file, but the current code doesn't do it.

  The general format of this file is a function prototype for every
  system call.  Those give the system call return type, the name, and
  the names and types of each of the system call arguments.  The system
  call prototypes have been augmented with other information needed to
  generate correct switches, senders, and receivers.  Each type of
  augmenting information is described here:

  : extract
	  Some system calls cannot be successfully executed by the syscall()
	  routine.  This is generally becuase syscall() expects that every
	  system call will pass its return value through register 0.  A few
	  system calls like getuid() will actually return 2 values, the
	  real uid in register 0, and the effective uid in register 1.  In
	  that case, there is no system call geteuid() - that information is
	  gotten as a side effect of the getuid() system call.  For this
	  reason geteuid() doesn't work with syscall().  In such a case
	  another means must be found to execute the offending system call.
	  We extract from the C library a copy of whatever the normal system
	  call stub is, and change the name by making it all upper case.
	  For example geteuid() becomes GETEUID().  The switch generator must
	  know that geteuid() has to be handled specially in the local case,
	  which is the meaning of "extract".

  in xdr_bytes( &buf, &len, len );
	  A statement like this appears with the prototype for the
	  write() system call.  Note that the parameter "buf" is a
	  pointer to void, and it is not immediately obvious whether
	  data should be sent to the remote system call receiver,
	  whether data should be sent back, or both.  Also, "buf" tells
	  us where the data starts, but it is not obvious (from the
	  syntax), how much data should be sent.  This statement tells
	  us that data should be sent to the remote system call
	  receiver by the keyword "in".  If you think of the system
	  call as simply a function, then "buf" is an "in" parameter to
	  the write() function.  "xdr_bytes( &buf, &len, len )" is the
	  xdr routine and arguments which should be used to transfer
	  the data.  A similar statement appears with the prototype for
	  read(), but in this case the keyword "out" indicates that
	  (from the point of view of the read() system call), "buf" is
	  an out parameter, i.e. data must be sent from the system call
	  receiver to the sender.  In cases where data needs to travel
	  in both directions, both an "in" and an "out" statement would
	  appear.

	map()

	Some system calls simply must be handled specially.  Examples
	are those system calls which directly affect the open files
	table used for checkpoint/restart.  Unfortunately, this
	"specialness" dosen't necessarily span all three pieces of code
	we want to generate.  For example, the switch for open() must
	be special because it affects the open files table, but the
	sender and receiver for open() don't need any special
	treatment.  We would therefore like to include a prototype for
	open(), but we must somehow tell the switch generator that it
	should not generate anything for open().  We solve the problem
	by running this file through the C preprocessor (cpp) before
	processing it.  The switch generator will ensure that the macro
	SWITCH is defined, the sender generator will instead define the
	macro SENDER, and similarly the reveiver generator will define
	the macro RECEIVER.  We then use cpp conditional statements to
	ensure that each generator sees only the prototypes for which it
	should generate code.
*/

	/* Use 32 bits for file mode (mode_t) everywhere - hope nobody wants more */
#if !defined(MODE_T)
#	if defined(AIX32)
#		define MODE_T ulong_t
#	else
#		define MODE_T unsigned int
#	endif
#endif

#define SEND_PATH(name) in xdr_string(&name,_POSIX_PATH_MAX)
#define GET_PATH(name) out xdr_string(&name,_POSIX_PATH_MAX)
#define ALLOC_PATH(name) alloc(name,_POSIX_PATH_MAX)

#if !defined (SWITCH) && !defined(CLIP)
		/*
		These calls must interact closely with the open files table,
		therefore their switches are implemented in "condor_ckpt/file_state.C",
		but we still need to generate senders and receivers for them here.
		*/
	int open( const char *path, int flags, int mode ) {
		SEND_PATH( path );
		ALLOC_PATH( path );
	}
	int close( int fd );
	int dup( int old_fd );
	int dup2( int old_fd, int new_fd );
	int fchdir( map(int fd) );
	int chdir( const char *path ) {
		SEND_PATH( path );
		ALLOC_PATH( path );
	}
#endif	/* not SWITCH and not CLIP */

#if !defined( CLIP )
	int link( const char *p1, const char *p2 ) {
		SEND_PATH( p1 );
		SEND_PATH( p2 );
		ALLOC_PATH( p1 );
		ALLOC_PATH( p2 );
	}

#	if defined(AIX32) && defined(SWITCH)
		/*
			not syscalls in aix, so don't build the switches
		*/
#	else
		/*
			build senders and recievers for everybody, and switches for
			everybody but AIX
		*/
		ssize_t write( map(int fd), const void *buf, size_t len ) {
			in xdr_bytes( &buf, &len, len );
			alloc( buf, len );
		}
		ssize_t read( map(int fd), void *buf, size_t len ) {
			out xdr_bytes( &buf, &rval, len );
			alloc( buf, len );
		}
#	endif

	off_t lseek( map(int fd), off_t offset, int whence );
	int access( const char *path, int access_mode ) {
		SEND_PATH( path );
		ALLOC_PATH( path );
	}
	void sync();

		/*
		These get special treatment by the shadow, but should work normally
		in local mode.
		*/
#	if defined(AIX32)
		pid_t getppid() : pseudo;
#	else
		pid_t getppid() : extract, pseudo;
		uid_t getuid()  : pseudo;
		gid_t getgid()  : pseudo;
#	endif
	pid_t getpid()  : pseudo;
#endif /* not CLIP */

	/*
	  These are used by the condor_starter, and thus get generated even in
	  the "clipped" version.
	*/

#if !defined(AIX32)
	uid_t geteuid() : extract, pseudo;
	gid_t getegid() : extract, pseudo;
	char * getwd( char *path_name ) : pseudo, extract {
		GET_PATH( path_name );
		ALLOC_PATH( path_name );
	}
#endif
int unlink( const char *path ) {
	SEND_PATH( path );
	ALLOC_PATH( path );
}
int rename( const char *from, const char *to ) {
	SEND_PATH( from );
	SEND_PATH( to );
	ALLOC_PATH( from );
	ALLOC_PATH( to );
}

#if !defined( SWITCH )
		/*
		These are speical operations performed by the shadow, but have
		no meaning in local mode.  Since they are special Condor operations,
		they are generally used by Condor daemons, not user programs.  Thus,
		they should be built in the special "clipped" version.
		*/
	int extern_name( const char *path, char *buf, int bufsize ) : pseudo {
		SEND_PATH( path );
		ALLOC_PATH( path );
		out xdr_bytes( &buf, &bufsize, bufsize );
		alloc( buf, bufsize );
	}
	int free_fs_blocks( const char *pathname ) : pseudo {
		SEND_PATH( pathname );
		ALLOC_PATH( pathname );
	}
	int reallyexit( int *status, struct rusage *use_p ) : pseudo {
		in xdr_int( status );
		alloc( status, INT_SIZE );
		in xdr_rusage( use_p );
		alloc( use_p, RUSAGE_SIZE );
		return( NEG_ONE );
	}
	int image_size( int kbytes ) : pseudo;
	int send_rusage( struct rusage *use_p ) : pseudo {
		in xdr_rusage( use_p );
		alloc( use_p, RUSAGE_SIZE );
	}
	int perm_error( const char *msg ) : pseudo {
		in xdr_string( &msg, MAX_STRING );
		alloc( msg, MAX_STRING );
	}
	int work_request( PROC *p, char *a_out, char *targ, char *orig, int *kill_sig ): pseudo {
		out xdr_proc( p );
		alloc( p, PROC_SIZE );
		GET_PATH( a_out );
		ALLOC_PATH( a_out );
		GET_PATH( targ );
		ALLOC_PATH( targ );
		GET_PATH( orig );
		ALLOC_PATH( orig );
		out xdr_int( kill_sig );
		alloc( kill_sig, INT_SIZE );
	}
		/*
		This function is intended for setting up the transfer
		of a whole file via a TCP stream.  This allows more
		flexibility than the similar get_file() protocol, and may
		be more efficient as well, since we bypass XDR.  The name
		of the file is the single parameter sent to the shadow, and
		the result is the length of the file, a hostname, and a port
		number from which the actual bytes can be read.
		*/
#if 0
	int get_file_stream(
		const char *file, size_t *len, char *host, u_short *port_num ): pseudo {

		SEND_PATH( file );
		ALLOC_PATH( file );

		out xdr_size_t( len );
		alloc( len, SIZE_T_SIZE );

		out xdr_string( &host, MAX_STRING );
		alloc( host, MAX_STRING );

		out xdr_u_short( port_num );
		alloc( port_num, U_SHORT_SIZE );
	}
#else
	int get_file_stream( const char *file, size_t *len, unsigned int *ip_addr,
		u_short *port_num ): pseudo {

		SEND_PATH( file );
		ALLOC_PATH( file );

		out xdr_size_t( len );
		alloc( len, SIZE_T_SIZE );

		out xdr_u_int( ip_addr );
		alloc( ip_addr, U_INT_SIZE );

		out xdr_u_short( port_num );
		alloc( port_num, U_SHORT_SIZE );
	}
#endif

		/*
		This function is intended for setting up the transfer
		of a whole file via a TCP stream.  This allows more
		flexibility than the similar put_file() protocol, and may
		be more efficient as well, since we bypass XDR.  The name
		of the file is the single parameter sent to the shadow, and
		the result is a hostname and a port number to which the
		actual bytes can be written.
		*/
#if 0
	int put_file_stream(
		const char *file, size_t len,  char *host, u_short *port_num ): pseudo {

		SEND_PATH( file );
		ALLOC_PATH( file );

		out xdr_string( &host, MAX_STRING );
		alloc( host, MAX_STRING );

		out xdr_u_short( port_num );
		alloc( port_num, U_SHORT_SIZE );
	}
#else
	int put_file_stream( const char *file, size_t len,
						unsigned int *ip_addr, u_short *port_num ): pseudo {

		SEND_PATH( file );
		ALLOC_PATH( file );

		out xdr_u_int( ip_addr );
		alloc( ip_addr, U_INT_SIZE );

		out xdr_u_short( port_num );
		alloc( port_num, U_SHORT_SIZE );
	}
#endif

#	if !defined( SENDER )
		/*
		These two functions implement protocols for sending and fetching
		whole files at a time.  Since there is a more complex protocol
		involved, it's easier to just code the senders by hand.
		They are implemented in "senders.epilogue".
		*/
	int send_file( const char *name, MODE_T mode ) : pseudo {
		SEND_PATH( name );
		ALLOC_PATH( name );
	}
	int get_file( const char *name ) : pseudo {
		SEND_PATH( name );
		ALLOC_PATH( name );
	}
#	endif	/* not SENDER */
#endif	/* not SWITCH */


#if !defined( CLIP )

#	if !defined(AIX32)
		int fstat( map(int fd), struct stat *buf ) {
			out xdr_stat( buf );
			alloc( buf, STAT_SIZE );
		}
		int stat( const char *path, struct stat *buf ) {
			SEND_PATH( path );
			ALLOC_PATH( path );
			out xdr_stat( buf );
			alloc( buf, STAT_SIZE );
		}
		int lstat( const char *path, struct stat *buf ) {
			SEND_PATH( path );
			ALLOC_PATH( path );
			out xdr_stat( buf );
			alloc( buf, STAT_SIZE );
		}
#	endif

	int mknod( const char *path, int mode, dev_t device ) {
		SEND_PATH( path );
		ALLOC_PATH( path );
	}
	int chmod( const char *path, MODE_T mode ) {
		SEND_PATH( path );
		ALLOC_PATH( path );
	}
#	if !defined(SUNOS41)
		int getfsstat( struct statfs buf[], long bufsize, int flags ) {
			out xdr_opaque( buf, STATFS_ARRAY_SIZE );
			alloc( buf, bufsize );
		}
#	endif
	int flock( map(int fd), int op );
	int fstatfs( map(int fd), struct statfs *buf ) {
		out xdr_statfs( buf );
		alloc( buf, STATFS_SIZE );
	}
	int fsync( map(int fd) );

	int symlink( const char *path1, const char *path2 ) {
		SEND_PATH( path1 );
		SEND_PATH( path2 );
		ALLOC_PATH( path1 );
		ALLOC_PATH( path2 );
	}
	int readlink( const char *path, char *buf, int buf_size ) {
		SEND_PATH( path );
		ALLOC_PATH( path );
		out xdr_bytes( &buf, buf_size, buf_size );
		alloc( buf, buf_size );
	}
	pid_t getpgrp();
	MODE_T umask( MODE_T cmask );
	int getpagesize();

#if !defined(AIX32)
		/*
		This is not a syscall in AIX.  The library routine will exercise the
		kfcntl() routine which we handle.
		*/
	int fcntl( map(int fd), int req, int arg );
#endif

	int getgroups( int gidsetsize, gid_t grouplist[] ) {
		out xdr_bytes( &grouplist, gidsetsize * GID_T_SIZE, gidsetsize * GID_T_SIZE );
		alloc( grouplist, gidsetsize * GID_T_SIZE );
	}
	int setpgrp( int pid, int pgrp );
#	if defined(SUNOS41)
		int getdents( map(int fd), char *buf, int nbytes ) {
			out xdr_bytes( &buf, &nbytes, nbytes );
			alloc( buf, nbytes );
		}
#	else
		int getdirentries( map(int fd), char *buf, int nbytes, long *basep ) {
			out xdr_bytes( &buf, &rval, rval );
			in xdr_opaque( basep, EIGHT );
			out xdr_opaque( basep, EIGHT );
			alloc( buf, nbytes );
			alloc( basep, LONG_SIZE );
		}
#	endif
	int table( int id, int index, char *addr, int nel, unsigned int lel ) {
		out xdr_bytes( &addr, nel * lel, nel * lel );
		alloc( addr, nel * lel );
	}

	int gethostname( char *address, int address_len ) {
		out xdr_bytes( &address, &address_len, address_len );
		alloc( address, address_len );
	}
	int getdtablesize();

	not_supported {
		int select();
		int poll();
	}

	int setpriority( int which, int who, int priority );
	int getpriority( int which, int who );
	int gettimeofday( struct timeval *tp, struct timezone *tzp ) {
		out xdr_timeval( tp );
		out xdr_timezone( tp );
		alloc( tp, TIMEVAL_SIZE );
		alloc( tzp, TIMEZONE_SIZE );
	}
	int fchown( map(int fd), uid_t owner, gid_t group );
#	if !defined(AIX32)
		int lchown( const char *path, uid_t owner, gid_t group ) {
			SEND_PATH( path );
			ALLOC_PATH( path );
		}
#	endif
	int chown( const char *path, uid_t owner, gid_t group ) {
		SEND_PATH( path );
		ALLOC_PATH( path );
	}

	int fchmod( map(int fd), MODE_T mode );
	int setreuid( int ruid, int euid );
	int setregid( int rgid, int egid );
	int truncate( const char *path, off_t length ) {
		SEND_PATH( path );
		ALLOC_PATH( path );
	}
	int ftruncate( map(int fd), off_t length );
	not_supported int setgid( gid_t gid );
	int mkdir( const char *path, MODE_T mode ) {
		SEND_PATH( path );
		ALLOC_PATH( path );
	}
	int rmdir( const char *path ) {
		SEND_PATH( path );
		ALLOC_PATH( path );
	}
	int utimes( const char *path, struct timeval times[] ) {
		SEND_PATH( path );
		ALLOC_PATH( path );
		in xdr_bytes( &times, TIMEVAL_ARRAY_SIZE, TIMEVAL_ARRAY_SIZE );
		alloc( times, TIMEVAL_ARRAY_SIZE );
	}
	int gethostid();
	int setrlimit( int resource, struct rlimit *rlp ) {
		in xdr_rlimit( rlp );
		alloc( rlp, RLIMIT_SIZE );
	}
	int getrlimit( int resource, struct rlimit *rlp ) {
		in xdr_rlimit( rlp );
		alloc( rlp, RLIMIT_SIZE );
	}
	pid_t setsid();
	int statfs( char *path, struct statfs *buf, int len ) {
		SEND_PATH( path );
		ALLOC_PATH( path );
		out xdr_statfs( buf );
		alloc( buf, STATFS_SIZE );
	}
	int getdomainname( char *name, int namelen ) {
		out xdr_string( &name, namelen );
		alloc( name, namelen );
	}
	int lockf( map(int fd), int request, off_t size );


		/*
		  Not implemented because our xdr_ustname() function isn't
		  working.  This is because the sizes of the strings are
		  defined differently on various platforms...
		*/
	not_supported int uname( struct utsname *name ) {
		/*
		out xdr_utsname( name );
		alloc( name, UTSNAME_SIZE );
		*/
	}


#	if !defined(AIX32)
		int mvalid( char * addr, size_t len, int prot ) {
			out xdr_bytes( &addr, &len, len );
			alloc( addr, len );
		}

		int getaddressconf( struct addressconf *buf, size_t length ) {
			out xdr_bytes( &buf, &length, length );
			alloc( buf, length );
		}
		pid_t getpgid( pid_t pid );
		int uswitch( int cmd, int value );
#	endif



		/*
		Things having to do with signals - we may support these
		one day soon.
		*/
	not_supported {
		int sigprocmask( int how, const sigset_t *set, sigset_t *o_set );
		int sigpending( sigset_t *set );
		int sigreturn( struct sigcontext *scp );
		int setitimer( int which, struct itimerval *value,
											struct itimerval *oval );
		int getitimer( int which, struct itimerval *value );
		int sigsuspend( const sigset_t *mask );
		int sigstack( struct sigstack *instack, struct sigstack *outstack );
#	if defined( AIX32)
		int kill( pid_t pid, int sig );
#	else
		int kill( pid_t pid, int sig ) : extract;
#	endif
	}

		/*
		We don't support these, but we ignore attempts to do them remotely
		for the benefit of Fortran compilers...
		*/
	ignored {
#	if defined( AIX32)
		int sigaction( int sig, const struct sigaction *act,
						struct sigaction *o_act );
#	else
		int sigaction( int sig, const struct sigaction *act,
						struct sigaction *o_act ) : extract;
#	endif
		int setsysinfo( unsigned long op, char *buffer, unsigned long nbytes,
						char * arg, unsigned long flag );
	}
#endif /* not CLIP */

#if 0
		/* Caused problems in local mode on Alpha - leave out for now */
	/*
	Things having to do with memory mapped files - we may support these
	one day soon.
	*/
not_supported {
	char * mmap( char * a, size_t l, int p, int f, map(int fd),
														off_t o ) : extract;
	int munmap( char * addr, size_t len );
	int mprotect( char * addr, size_t len, int prot );
	int madvise( char * addr, size_t len, int behav );
	int msync( char * addr, size_t len, int flags );
}
#endif

#if !defined( CLIP )
	/* Calls intended only for the super user or system managers */
not_supported {
	int mount( char *spec, char *dir, int mflag, int fstyp, char *pt, int len );
	int setuid( uid_t uid );
	int setlogin( char *name );
	int acct( char *path );
	void reboot( int howto );
	int revoke( char *path );
	int chroot( const char *path );
	int setgroups( int gidsetsize, gid_t grouplist[] );
	int sethostname( char *address, int address_len );
	int plock( int op );
	int settimeofday( struct timeval *tp, struct timezone *tzp );
	int adjtime( struct timeval *delta, struct timeval *old_delta );
	int sethostid( int host_id );
	int async_daemon();
#	if !defined(SUNOS41)
		int getfh( map(int fd), fhandle_t *fhp, int exp_fd );
		int exportfs( int access, int *record, struct exportfsdata *exdata );
#	endif
	int setdomainname( char *name, int namelen );
	int swapon( char *path, int flags, int lo_water, int hi_water );
}

	/* Calls having to do with multiple process jobs */
not_supported {
#if defined(AIX32)
	pid_t fork();
	int pipe( int fd[] );
#else
	pid_t fork() : extract;
	int pipe( int fd[] ) : extract;
#endif
	pid_t vfork();
	int execve( const char *path, char * const argv[], char * const envp [] );
	int execv( const char *path, char * const argv[] );
	int exec_with_loader( int flags, const char *loader, const char *file,
					  char * const argv[], char * const envp[] );
	pid_t wait4( pid_t pid, int *status, int options, struct rusage *ru );
	int ptrace( long req, long int process, unsigned long *address,
						unsigned long data );
	int setpgid( pid_t process_id, pid_t gid );
}

	/* Calls relating to sockets - implies multiple communicating processes */
not_supported {
	int recvmsg( int socket, struct msghdr *message, int flags );
	int sendmsg( int socket, struct msghdr *message, int flags );
	int recvfrom( int socket, char *buffer, int length, int flags,
				  struct sockaddr *address, int addr_len );
	int accept( int socket, struct sockaddr *address, int addr_len );
	int getpeername( int socket, struct sockaddr *address, int addr_len );
	int getsockname( int socket, struct sockaddr *address, int addr_len );
	int socket( int addr_family, int type, int protocol );
	int connect( int sock, struct sockaddr *address, int addr_len );
	int send( int socket, char *msg, int length, int flags );
	int recv( int socket, char *msg, int length, int flags );
	int bind( int socket, struct sockaddr *address, int addr_len );
	int listen( int socket, int backlog );
	int sendto( int sock, char *msg, int msg_len, int flags,
				struct sockaddr *dest, int dest_len );
	int shutdown( int socket, int how );
	int socketpair( int domain, int type, int protocol, int sock_vector[] );
	int getsockopt( int sock, int level, int opt_name, char *opt_val,
					int opt_len );
	int setsockopt( int sock, int level, int opt_name, char *opt_val,
					int opt_len );
	int nfssvc( int sock, int mask, int match );
}


	/*
	Things we perhaps ought to support, but aren't in the
	current implementation
	*/
not_supported {
	void profil( short *buf, unsigned int buf_size, unsigned int offset,
				 unsigned int scale );
	int quotactl( char *path, int cmd, int id, char *addr );
	int getsysinfo( unsigned long op, char * buf, unsigned long nbytes,
					int *start, char *arg );
}


	/*
	Returns a pointer to a static buffer - our generator is not
	yet sophisticated enough to generate correct stubs for this.
	*/
not_supported {
	char *getlogin();
}

	/*
	Stuff having to do with message queues.  Probably won't support
	these unless they become a standard across all the platforms.
	*/
not_supported {
	int msgctl( int msgid, int cmd, struct msqid_ds *buf );
	int msgget( key_t key, int msgflg );
	int msgrcv(int qid, void *msgp, size_t msgsz, long msgtyp, int msgflg );
	int msgsnd( int msqid, void *msgp, size_t msgsz, int msgflg );
}

	/*
	Stuff having to do with semaphores.  Probably won't support
	these unless they become a standard across all the platforms.
	*/
not_supported {
	int semctl( int semid, int semnum, int cmd, void *arg );
	int semget( key_t key, int nsems, int semflag );
	int semop( int semid, struct sembuf *sops, unsigned int nsops );
}

	/* Stuff having to do with shared memory. */
not_supported {
	int shmctl( int shmid, int cmd, struct shmid_ds *buf );
	int shmdt( char * addr );
	int shmget( key_t key, unsigned int size, unsigned int flags );
	char * shmat( int shmid, char * shmaddr, int shmflg );
}

#endif /* not CLIP */

	/* System calls unique to AIX - needed even in CLIPPED version */ 
#if defined(AIX32)
	uid_t getuidx( int which );
	gid_t getgidx( int which );
#	if !defined(SWITCH)
		char * getwd( char *path_name ) : pseudo {
			GET_PATH( path_name );
			ALLOC_PATH( path_name );
		}
#	endif
#endif


	/* System calls unique to AIX - not needed in CLIPPED version */ 
#if !defined(CLIP) && defined(AIX32)
	int statx( char *path, struct stat *buffer, int length, int command ) {
		SEND_PATH( path );
		ALLOC_PATH( path );
		out xdr_stat( buffer );
		alloc( buffer, STAT_SIZE );
	}
	int fstatx( map(int fd), struct stat *buffer, int length, int command ) {
		out xdr_stat( buffer );
		alloc( buffer, STAT_SIZE );
	}
	int accessx( char *path, int mode, int who ) {
		SEND_PATH( path );
		ALLOC_PATH( path );
	}
	int faccessx( map(int fd), int mode, int who );
	int chacl( char *path, struct acl *list, int size ) {
		SEND_PATH( path );
		ALLOC_PATH( path );
		out xdr_bytes( &list, &size, size );
		alloc( list, size );
	}
	int fchacl( map(int fd), struct acl *list, int size ) {
		out xdr_bytes( &list, &size, size );
		alloc( list, size );
	}
	int fstatacl( map(int fd), int cmd, struct acl *list, int size ) {
		out xdr_bytes( &list, &size, size );
		alloc( list, size );
	}
	int statacl( char *path, int cmd, struct acl *list, int size ) {
		SEND_PATH( path );
		ALLOC_PATH( path );
		out xdr_bytes( &list, &size, size );
		alloc( list, size );
	}
	int chownx( char *path, int owner, int group, int ext ) {
		SEND_PATH( path );
		ALLOC_PATH( path );
	}
	int fchownx( map(int fd), int owner, int group, int ext );
	long fclear( map(int fd), unsigned long nbytes );
	int frevoke( map(int fd) );
	int kgetpgrp( int pid );
	int getpri( int pid );
	int kfcntl( map(int fd), int cmd, int arg );
#if !defined (SWITCH)
		/*
		This call must interact closely with the open files table,
		therefore its switch is implemented in "condor_ckpt/file_state.C",
		but we still need to generate senders and receivers for it here.
		*/
	int openx( const char *path, int flags, int mode, int ext ) {
		SEND_PATH( path );
		ALLOC_PATH( path );
	}
#endif
	int psdanger( int sig );
	int ulimit( int cmd, int lim );
	int usrinfo( int cmd, char *buf, int count ) {
		in xdr_bytes( &buf, &count, count );
		alloc( buf, count );
	}
	not_supported {
		int audit();
		int auditbin();
		int auditevents();
		int auditlog();
		int auditobj();
		int auditproc();
		int chpriv();
		int fchpriv();
		int disclaim();
		int fscntl();
		int fstatpriv();
		int getargs();
		int getdirent();
		int getevars();
		int getpriv();
		int getproc();
		int getuser();
		int kioctl();
		int knlist();
		int kwaitpid();
		int load();
		int loadbind();
		int loadquery();
		int mntctl();
		int pause();
		int privcheck();
		int absinterval();
		int getinterval();
		int gettimer();
		int gettimerid();
		int incinterval();
		int reltimerid();
		int resabs();
		int resinc();
		int restimer();
		int settimer();
		int nsleep();
		int seteuid();
		int setgidx();
		int setpri();
		int setpriv();
		int setuidx();
		int msgxrcv();
		int sigcleanup();
		int statpriv();
		int swapoff();
		int swapqry();
		int sysconfig();
		int unameu();
		int unamex();
		int unload();
		int ustat();
		int uvmount();
		int vmount();
		int Trconflag();
		int trchook();
		int trchk();
		int trchkt();
		int trchkl();
		int trchklt();
		int trchkg();
		int trchkgt();
		int trcgen();
		int trcgent();

	}
		
#endif /* not CLIP */
