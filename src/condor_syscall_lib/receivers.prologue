#if !defined(OSF1) || defined(__GNUC__)
#	define _POSIX_SOURCE
#endif

#if defined(OSF1) && defined(__GNUC__)
	typedef struct  _quad { int val[2]; } quad;
#endif

#if defined(HPUX9)
#	define sync		__hide_sync
#endif
#include "condor_common.h"
#if	defined(HPUX9)
#	undef sync
#endif

#include "condor_debug.h"
#include "xdr_lib.h"
#include "condor_rsc.h"
#include "condor_xdr.h"
#include "condor_sys.h"
#include "condor_jobqueue.h"
#include "condor_constants.h"
#include "startup.h"
#include "condor_fix_assert.h"

#if defined(OSF1) && defined(__GNUC__ )
#	include "condor_fdset.h"
#endif

#include <sys/types.h>
#define MODE_T unsigned int	/* use 32 bits on all platforms */

#include <sys/stat.h>
#include "_condor_fix_resource.h"
#include <sys/utsname.h>

#if defined(SUNOS41)
#	include "condor_fdset.h"
#endif

#if defined(ULTRIX42) || defined(OSF1)
#	include <sys/param.h>
#	include <sys/mount.h>
#elif defined(ULTRIX43)
#   include <errno.h>
#	include <sys/param.h>
#	include "condor_fix_timeval.h"
#   include <nfs/nfs.h>
#else 
#	include <sys/mount.h>
#endif

#if defined(HPUX9)
#   include <time.h>
#   include <rpc/rpc.h>
#   include <errno.h>
#   include <nfs/export.h>
#   include <nfs/nfs.h> /* for definition of fhandle_t */
#   include <sys/vfs.h>      /* for struct statfs */
#	include <sys/signal.h>
#endif

#if defined(OSF1)
#	define _AES_SOURCE
#	include <sys/poll.h>
#endif

#if defined(SUNOS41)
#	include <sys/poll.h>
#endif

#if defined(AIX32)
	struct fsid {
		long    val[2];
	};
	typedef struct fsid fsid_t;
#	include <sys/statfs.h>		 /* for struct statfs */
#endif

#if defined(SUNOS41)
#	include <sys/vfs.h>
#endif

#include "../condor_syscall_lib/syscall_param_sizes.h"

static char *_FileName_ = __FILE__;     /* Used by EXCEPT (see except.h)    */

extern XDR *xdr_syscall;

#if defined(SYSCALL_DEBUG)
	extern char *SyscallLabel;
#endif


int CONDOR_NotSupported( int num, ... );
int CONDOR_Ignored( int num, ... );

int
do_REMOTE_syscall()
{
	int condor_sysnum;
	int	rval;
	xdr_syscall->x_op = XDR_DECODE;

	ASSERT( xdrrec_skiprecord(xdr_syscall) );
	ASSERT( xdr_int(xdr_syscall, &condor_sysnum) );

#if defined(SYSCALL_DEBUG)
	sprintf( SyscallLabel, "%-6d", condor_sysnum );
#endif

	dprintf(D_SYSCALLS,
		"Got request for syscall %d <%s>\n",
		condor_sysnum, _condor_syscall_name(condor_sysnum)
	);
	switch( condor_sysnum ) {
