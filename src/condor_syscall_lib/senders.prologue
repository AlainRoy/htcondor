#if defined(Solaris251)
#include <nfs/nfs.h>	
    /* 
	nfs.h defines fhandle_t.  Include before condor_common to
	avoid duplicate definitions of MIN.  However, only do this on 
	Solaris251, since in Solaris26, all the 64-bit interface stuff
	gets broken if you do this and you don't have the problem with
	MIN.  -Derek 6/24/98
    */  
#endif

#include "condor_common.h"
#include "condor_nfs.h"
#include "condor_debug.h"
#include "condor_syscall_mode.h"
#include "condor_io.h"
#include "condor_sys.h"
#include "condor_mmap.h"
#include "startup.h"
#include "syscall_param_sizes.h"

#include "syscall_sysdep.h"
// #include "syscall_64bit.h"

#ifdef LINK_PVM
// ClassAds needed for start_work_request used by PVM starter/shadow
#include "condor_classad.h"
#endif

static char *_FileName_ = __FILE__;

int CurrentSysCall;

extern ReliSock *syscall_sock;

extern "C" {

sigset_t
block_condor_signals()
{
	int sigscm;
	sigset_t mask, omask;

	/* Block signals requesting an exit or checkpoint for duration of
	   system call. */
	sigscm = SetSyscalls( SYS_LOCAL | SYS_UNMAPPED );
	sigemptyset( &mask );
	sigaddset( &mask, SIGTSTP );
	sigaddset( &mask, SIGUSR1 );
	sigaddset( &mask, SIGUSR2 );
	if( sigprocmask(SIG_BLOCK,&mask,&omask) < 0 ) {
		dprintf(D_ALWAYS, "sigprocmask failed: %s\n", strerror(errno));
		return omask;
	}
	SetSyscalls( sigscm );
	return omask;
}

void restore_condor_sigmask(sigset_t omask)
{
	int sigscm;

	sigscm = SetSyscalls( SYS_LOCAL | SYS_UNMAPPED );
	/* Restore previous signal mask - generally unblocks TSTP and USR1 */
	if( sigprocmask(SIG_SETMASK,&omask,0) < 0 ) {
		dprintf(D_ALWAYS, "sigprocmask failed: %s\n", strerror(errno));
		return;
	}
	SetSyscalls( sigscm );
}	

} // extern "C"

int
REMOTE_syscall( int syscall_num, ... )
{
	int		scm;
	int		terrno;
	int		rval;
	sigset_t	omask;
	va_list ap;
#if defined(USE_STUB_CLUMPS) || defined(IRIX53)
	int keep_going = 0;
#endif


	scm = SetSyscalls( SYS_LOCAL | SYS_MAPPED );
	va_start( ap, syscall_num );

	/* defined in local_startup.c and remote_startup.c */
	omask = block_condor_signals();
	
	switch( syscall_num ) {

