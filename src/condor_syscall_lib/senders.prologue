#if !defined(OSF1)
#	define _POSIX_SOURCE
#endif

#include "condor_common.h"
#define MODE_T unsigned int	/* use 32 bits on all platforms */

#include "condor_debug.h"
#include <stdarg.h>
#include <signal.h>
#include "condor_fix_assert.h"
#include "condor_syscall_mode.h"
#include "condor_xdr.h"
#include "condor_constants.h"
#include "condor_sys.h"
#include "condor_jobqueue.h"
#include "xdr_lib.h"

#if defined(SUNOS41)
#	include "condor_fdset.h"
#endif

#if defined(ULTRIX43) || defined(OSF1)
#	include <sys/param.h>
#	include <sys/mount.h>
#else
#	include <sys/mount.h>
#endif

#if defined(OSF1) || defined(SUNOS41)
#	include <sys/poll.h>
#endif

#include "syscall_param_sizes.h"

static char *_FileName_ = __FILE__;


int CurrentSysCall;

extern XDR *xdr_syscall;



int
REMOTE_syscall( int syscall_num, ... )
{
	int		scm;
	int		terrno;
	int		rval;
	sigset_t    mask, omask;
	va_list ap;


	scm = SetSyscalls( SYS_LOCAL | SYS_MAPPED );
	va_start( ap, syscall_num );

	/* Some problem with blocking and unblocking sigs on OSF1 */
#if !defined(OSF1)
		/* Block signals requesting an exit or checkpoint for duration of
		   system call. */
	sigemptyset( &mask );
	sigaddset( &mask, SIGTSTP );
	sigaddset( &mask, SIGUSR1 );
	if( sigprocmask(SIG_BLOCK,&mask,&omask) < 0 ) {
		EXCEPT( "sigprocmask" );
	}
#endif

	switch( syscall_num ) {

