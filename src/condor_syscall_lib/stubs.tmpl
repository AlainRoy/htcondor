/***********************************************************
**
** Stubs for all those system calls which don't effect the
** state of the open file table.
**
** Caution - the syscall_stubs.c file is generated automatically
**		   - do not edit
**
***********************************************************/

#if defined(OSF1)
#	define __STDC__
#endif

#include "condor_syscall_mode.h"
#include "file_table_interf.h"
#include <stdio.h>
#include "unistd.h"
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/resource.h>
#include <sys/socket.h>
#include <sys/utsname.h>

#if defined(OSF1)
#	include <sys/poll.h>
#	include <rpc/types.h>
#	include <errno.h>
#	include <sys/param.h>
#	include <nfs/nfs.h>
#	include <sys/ipc.h>
#	include <sys/shm.h>
#	include <sys/msg.h>
#	include <sys/mman.h>
#	include <sys/addrconf.h>
#	include <sys/sysinfo.h>
#	define semctl __hide_semctl
#	include <sys/sem.h>
#	undef semctl
	int semctl(int , int , int , void *);
#endif

#if defined(ULTRIX42) || defined(ULTRIX43) || defined(OSF1)
#	include <sys/param.h>
#	include <sys/mount.h>
#else
#	include <sys/mount.h>
#endif

#if defined(ULTRIX42) || defined(ULTRIX43) || defined(SUNOS41)
	typedef int ssize_t;
#endif

#if defined(SUNOS41) || defined(HPUX9)
#	include <sys/vfs.h>		 /* for struct statfs */
#endif


%%
pid_t fork() : extract;
pid_t wait4( pid_t pid, int *status, int options, struct rusage *ru ); 
int link( const char *p1, const char *p2 );
int unlink( const char *path );
int execv( const char *path, char * const argv[] );
ssize_t read( map(int fd), void *buf, size_t len );
ssize_t write( map(int fd), const void *buf, size_t len );
off_t lseek( map(int fd), off_t offset, int whence );
pid_t getpid();
int mount( char *spec, char *dir, int mflag, int fstyp, char *pt, int len );
int setuid( uid_t uid );
uid_t getuid();
int exec_with_loader( int flags, const char *loader, const char *file,
					  char * const argv[], char * const envp[] );
int ptrace( long req, long int process, ulong_t *address, ulong_t data );
int recvmsg( int socket, struct msghdr *message, int flags );
int sendmsg( int socket, struct msghdr *message, int flags );
int recvfrom( int socket, char *buffer, int length, int flags,
			  struct sockaddr *address, int addr_len );
int accept( int socket, struct sockaddr *address, int addr_len );
int getpeername( int socket, struct sockaddr *address, int addr_len );
int getsockname( int socket, struct sockaddr *address, int addr_len );
int access( const char *path, int access_mode );
void sync();
int kill( pid_t pid, int sig ) : extract;
int setpgid( pid_t process_id, pid_t gid );
int pipe( int fd[] );
void profil( short *buf, unsigned int buf_size, unsigned int offset,
			 unsigned int scale );
int sigaction( int sig, const struct sigaction *act, struct sigaction *o_act ) : extract;
gid_t getgid();
int sigprocmask( int how, const sigset_t *set, sigset_t *o_set );
char *getlogin();
int setlogin( char *name );
int acct( char *path );
int sigpending( sigset_t *set );
int fstat( map(int fd), struct stat *buf );
int fchdir( int fd );
int mknod( const char *path, int mode, dev_t device );
int chmod( const char *path, mode_t mode );
int chown( const char *path, uid_t owner, gid_t group );
int getfsstat( struct statfs *buf[], long bufsize, int flags );
int flock( map(int fd), int op );
int fstatfs( map(int fd), struct statfs *buf );
int fsync( map(int fd) );
int ioctl( map(int fd), unsigned long request, char *argp );
void reboot( int howto );
int revoke( char *path );
int symlink( const char *path1, const char *path2 );
int readlink( const char *path, char *buf, int buf_size );
int execve( const char *path, char * const argv[], char * const envp [] );
mode_t umask( mode_t mask );
int chroot( const char *path );
pid_t getpgrp();
int getpagesize();
pid_t vfork();
int stat( const char *path, struct stat *buf );
int lstat( const char *path, struct stat *buf );
int fcntl( map(int fd), int req, int arg );
caddr_t mmap( caddr_t a, size_t l, int p, int f, map(int fd), off_t o );
int munmap( caddr_t addr, size_t len );
int mprotect( caddr_t addr, size_t len, int prot );
int madvise( caddr_t addr, size_t len, int behav );
int getgroups( int gidsetsize, gid_t grouplist[] );
int setgroups( int gidsetsize, gid_t grouplist[] );
int setpgrp( int pid, int pgrp );
int setitimer( int which, struct itimerval *value, struct itimerval *oval );
int getitimer( int which, struct itimerval *value );
int getdirentries( map(int fd), char *buf, int nbytes, long *basep );
int table( int id, int index, char *addr, int nel, unsigned int lel );
int gethostname( char *address, int address_len );
int sethostname( char *address, int address_len );
int getdtablesize();
int select( int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,
			struct timeval *timeout );
int poll( struct pollfd filedes[], unsigned int nfds, int timeout );
int setpriority( int which, int who, int priority );
int getpriority( int which, int who );
int socket( int addr_family, int type, int protocol );
int connect( int sock, struct sockaddr *address, int addr_len );
int send( int socket, char *msg, int length, int flags );
int recv( int socket, char *msg, int length, int flags );
int sigreturn( struct sigcontext *scp );
int bind( int socket, struct sockaddr *address, int addr_len );
int listen( int socket, int backlog );
int plock( int op );
int sigsuspend( const sigset_t *mask );
int sigstack( struct sigstack *instack, struct sigstack *outstack );
int gettimeofday( struct timeval *tp, struct timezone *tzp );
int settimeofday( struct timeval *tp, struct timezone *tzp );
int getsockopt( int sock, int level, int opt_name, char *opt_val, int opt_len );
int setsockopt( int sock, int level, int opt_name, char *opt_val, int opt_len );
int fchown( map(int fd), uid_t owner, gid_t group );
int fchmod( map(int fd), mode_t mode );
int setreuid( int ruid, int euid );
int setregid( int rgid, int egid );
int rename( const char *from, const char *to );
int truncate( const char *path, off_t length );
int ftruncate( map(int fd), off_t length );
int setgid( gid_t gid );
int sendto( int sock, char *msg, int msg_len, int flags, struct sockaddr *dest,
			int dest_len );
int shutdown( int socket, int how );
int socketpair( int domain, int type, int protocol, int sock_vector[] );
int mkdir( const char *path, mode_t mode );
int rmdir( const char *path );
int utimes( const char *path, struct timeval times[] );
int adjtime( struct timeval *delta, struct timeval *old_delta );
int gethostid();
int sethostid( int host_id );
int setrlimit( int resource, struct rlimit *rlp );
int getrlimit( int resource, struct rlimit *rlp );
pid_t setsid();
int quotackl( char *path, int cmd, int id, char *addr );
int nfssvc( int sock, int mask, int match );
int statfs( char *path, struct statfs *buf, int len );
int async_daemon();
int getfh( map(int fd), fhandle_t *fhp, int exp_fd );
int getdomainname( char *name, int namelen );
int setdomainname( char *name, int namelen );
int exportfs( int access, int *record, struct exportfsdata *exdata );
int lockf( map(int fd), int request, off_t size );
int swapon( char *path, int flags, int lo_water, int hi_water );
int msgctl( int msgid, int cmd, struct msqid_ds *buf );
int msgget( key_t key, int msgflg );
int msgrcv(int qid, void *msgp, size_t msgsz, long msgtyp, int msgflg );
int msgsnd( int msqid, void *msgp, size_t msgsz, int msgflg );
int semctl( int semid, int semnum, int cmd, void *arg );
int semget( key_t key, int nsems, int semflag );
int semop( int semid, struct sembuf *sops, unsigned int nsops );
int lchown( const char *path, uid_t owner, gid_t group );
int uname( struct utsname *name );
caddr_t shmat( int shmid, caddr_t shmaddr, int shmflg );
int shmctl( int shmid, int cmd, struct shmid_ds *buf );
int shmdt( caddr_t addr );
int shmget( key_t key, unsigned int size, unsigned int flags );
int mvalid( caddr_t addr, size_t len, int prot );
int getaddressconf( struct addressconf *buf, size_t length );
int msync( caddr_t addr, size_t len, int flags );
pid_t getpgid( pid_t pid );
int uswitch( int cmd, int value );
int getsysinfo( unsigned long op, caddr_t buf, unsigned long nbytes,
				int *start, char *arg );
int setsysinfo( unsigned long op, caddr_t *buffer, unsigned long nbytes,
				caddr_t arg, unsigned long flag );
