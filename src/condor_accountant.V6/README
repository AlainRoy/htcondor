***********************************************
             CONDOR ACCOUNTANT
***********************************************

---------------------
Introduction
---------------------
Provides accounting information in the form of priorities.
Each customer is a user that submits jobs on some machine, and 
he is identified by his login@uid_domain.
Each resource is a startd, and it is identified by name@ip_addr.

The accountant gets information about all the matches that were
made and broken. This is done in real time, meaning that the time
the function call is made is the time recorded for the action.
The accountant supplies the priority of each customer to the negotiator
during the negotiation cycle. 


---------------------
Priority calculation
---------------------
The priorities are calculated every time interval. The basic
formula to calculate the priority of a customer is:

Prio := Beta*(Old_Prio)+(Number_of_resources_used)*(1-Beta)

This formula has the property that in a steady state (fixed
number of resources used) the priority of a customer will
be the number of resources it uses.
The variable 'Beta' determines the rate at which the priority
will change when the number of resources used changes.
To simplify the configuration, I used a Half-life-period
variable to control the rate of change: If a customer stops
using all of its resources at once, it will take a time equal
to half-life-period for its priority to decrease by half.
Beta is calculated according to the formula:

Beta=(1/2)^(Time_passed_since_last_update / half-life-period)

Note that this mechanism allows the priorities to be calculated
in non-fixed time intervals.

---------------------
Targets
---------------------
This directory makes two targets:

libacct.a - contains all the accounting interface. This library
  is meant to be linked with the negotiator, and take care of
  priority management when the accountant daemon is not running.
  When running in this mode, information about broken matches 
  can't be recieved from the startd's and schedd's. Instead,
  we get the information by scanning all the startd class-ads,
  and brake a match when the state field is 'Unclaimed'.

condor_accountant - the accountant daemon executable. The daemon
  runs independently and recieves information from the negotiator
  (new matches), and from the startd's schedd's (broken matches).
  The daemon is not implemented yet (V6).

------------------------------
Implementation & Interface
------------------------------
The library is implemented as a class, called Accountant.
The class uses two hash tables to track all priority and match
information:
The customers table holds all the active customers. Each customer's
record contains his current priority, and a list of all resources
used. When a customer becomes inactive, it is deleted from the table.
The resources tables holds all used resources. Each resource's record
holds the name of the customer using it, and the start time of the match.
 
The methods available are:

GetPriority - get the priority of a customer 
SetPriority - set the priority of a customer (used internally by LoadState,
                                              should not be called normally)
AddMatch - add a new match
RemoveMatch - called when a match is broken
UpdatePriorities - update all the priorities
CheckMatches - go through all startd's class ads, and break matches
               when the state field is 'Unclaimed'.
SaveState - Save the state to log files (Priority.log and Matches.log)
LoadState - Load the state from the log file (used by the constructor,
                                              should not be called normally)

---------------------
files
---------------------
condor_includes/condor_accountant.h - Header file for the class.
Accountant.C - The Accountant class.
AcctDaemon.C - The daemon class (not implemented yet).
AcctDaemon.h - The daemon class header file (not implemented yet).
accountant_main.C - the main module.
