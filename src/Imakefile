#define AllFiles etc include src lib libexec bin sbin man 

#if HAS_FORTRAN
  TEST_SUITE_F = test_suite_F.V5
#endif

#if WANT_PVM
  TEST_SUITE_PVM = test_suite_pvm
#endif

#if WANT_JAVA
  TEST_SUITE_JAVA = test_suite_java
#endif

TEST_SUITE_C = test_suite_C.V5

TEST_SUITE_BASE = test_suite_base

#if !(NEEDS_KBDD)
#   define kbdd
#endif

#if !DOES_CHECKPOINTING
#   define standalone
#endif

#if WANT_PVM
#define PvmProgs starter.jim shadow.jim 
#else
#define PvmProgs
#endif

#define StdUnvProgs shadow.V6 starter.V5 
#define StdUnvLibs ckpt syscall_lib

#if WANT_CONDOR_G && HAS_GLOBUS
#define GlobusProgs gridmanager globus
#else
#define GlobusProgs
#endif

#if WANT_NEW_CLASSADS && HAS_GLOBUS
#define CreddProgs credd
#else
#define CreddProgs
#endif

#if WANT_NETMAN
#define NetmanLibs netman
#define Eventd eventd
#define EventdTar eventd.tar
#else
#define NetmanLibs
#define Eventd
#define EventdTar
#endif

#if WANT_DRMAA
#define DrmaaLibs drmaa
#else
#define DrmaaLibs
#endif

#if WANT_STORK
#define StorkProgs stork
#else
#define StorkProgs
#endif

#define Programs \
		procapi sysapi accountant.V6 ckpt_server \
		master.V6 negotiator.V6 schedd.V6 prio q.V6 rm.V6 \
		scripts startd.V6 StdUnvProgs submit.V6 status.V6 \
		tools kbdd collector.V6 PvmProgs dagman userlog Eventd \
		GlobusProgs starter.V6.1 shadow.V6.1 dcskel c-gahp \
		CreddProgs

#define Libraries \
		util_lib daemon_client classad c++_util condor_procapi/libprocapi.a \
		condor_sysapi/libsysapi.a io \
		daemon_core.V6 \
		condor_ckpt_server/ckpt_server_api.a \
		condor_schedd.V6/libqmgmt.a condor_accountant.V6/libacct.a \
		StdUnvLibs NetmanLibs chirp DrmaaLibs \
		owl/libanalysis.a

#if HAS_STATIC
#define StaticDirectories \
	static_dir static_dir/bin static_dir/sbin static_dir/lib \
	static_dir/libexec \
	static_dir/etc static_dir/etc/examples static_dir/include \
	static_dir/src static_dir/src/chirp \
	static_dir/man static_dir/man/man1 \
	static_contrib static_contrib/bin static_contrib/lib \
	static_contrib/sbin static_contrib/etc \
	static_contrib/etc/examples static_contrib/include
#else
#define StaticDirectories
#endif

#define Directories \
	html condor_release \
	release_dir release_dir/bin release_dir/lib release_dir/sbin \
	release_dir/libexec \
	release_dir/include release_dir/src release_dir/src/chirp \
	release_dir/man release_dir/man/man1 pure_bin \
	strip_dir strip_dir/bin strip_dir/sbin strip_dir/lib \
	strip_dir/libexec \
	strip_dir/etc strip_dir/etc/examples strip_dir/include \
	strip_dir/src strip_dir/src/chirp \
	strip_dir/man strip_dir/man/man1 \
	strip_contrib strip_contrib/bin strip_contrib/lib \
	strip_contrib/sbin strip_contrib/etc \
	strip_contrib/etc/examples strip_contrib/include StaticDirectories

all: h h_all externals condor_includes makefiles Directories Libraries \
	Programs examples 
release:: all
stripped:: all
static:: all
libs:: h h_all condor_includes makefiles Directories Libraries

ALL_TEST_SUITE = $(TEST_SUITE_C) $(TEST_SUITE_F) $(TEST_SUITE_JAVA) $(TEST_SUITE_BASE)

test_suite: $(ALL_TEST_SUITE)

simple_dir_target(release_dir)
simple_dir_target(release_dir/bin)
simple_dir_target(release_dir/lib)
simple_dir_target(release_dir/libexec)
simple_dir_target(release_dir/sbin)
simple_dir_target(release_dir/include)
simple_dir_target(release_dir/src)
simple_dir_target(release_dir/src/chirp)
simple_dir_target(release_dir/man)
simple_dir_target(release_dir/man/man1)

simple_dir_target(pure_bin)

simple_dir_target(strip_dir)
simple_dir_target(strip_dir/bin)
simple_dir_target(strip_dir/lib)
simple_dir_target(strip_dir/libexec)
simple_dir_target(strip_dir/sbin)
simple_dir_target(strip_dir/etc)
simple_dir_target(strip_dir/etc/examples)
simple_dir_target(strip_dir/include)
simple_dir_target(strip_dir/src)
simple_dir_target(strip_dir/src/chirp)
simple_dir_target(strip_dir/man)
simple_dir_target(strip_dir/man/man1)

simple_dir_target(strip_contrib)
simple_dir_target(strip_contrib/bin)
simple_dir_target(strip_contrib/lib)
simple_dir_target(strip_contrib/libexec)
simple_dir_target(strip_contrib/sbin)
simple_dir_target(strip_contrib/etc)
simple_dir_target(strip_contrib/etc/examples)
simple_dir_target(strip_contrib/include)

#if HAS_STATIC
simple_dir_target(static_dir)
simple_dir_target(static_dir/bin)
simple_dir_target(static_dir/lib)
simple_dir_target(static_dir/libexec)
simple_dir_target(static_dir/sbin)
simple_dir_target(static_dir/etc)
simple_dir_target(static_dir/etc/examples)
simple_dir_target(static_dir/include)
simple_dir_target(static_dir/src)
simple_dir_target(static_dir/src/chirp)
simple_dir_target(static_dir/man)
simple_dir_target(static_dir/man/man1)
simple_dir_target(static_contrib)
simple_dir_target(static_contrib/bin)
simple_dir_target(static_contrib/lib)
simple_dir_target(static_contrib/libexec)
simple_dir_target(static_contrib/sbin)
simple_dir_target(static_contrib/etc)
simple_dir_target(static_contrib/etc/examples)
simple_dir_target(static_contrib/include)
simple_dir_target(static_contrib/src)
#endif /* HAS_STATIC */

object_target(util_lib)
object_target(c++_util)
object_target(procapi)
object_target(sysapi)
object_target(tools)
object_target(examples)
#if WANT_NETMAN
object_target(eventd)
#endif
object_target(accountant.V6)
object_target(ckpt_server)

object_target(shadow.V6)
object_target(starter.V5)

object_target(startd.V6)
object_target(schedd.V6)
object_target(status.V6)
object_target(dagman)
object_target(userlog)
#if NEEDS_KBDD
   object_target(kbdd)
#endif
object_target(negotiator.V6)
object_target(collector.V6)
object_target(master.V6)
object_target(q.V6)
object_target(rm.V6)
object_target(submit.V6)

object_target(ckpt)
object_target(syscall_lib)

#if WANT_NETMAN
object_target(netman)
#endif
object_target(io)
object_target(classad)
object_target(daemon_core.V6)
object_target(daemon_client)
#if WANT_PVM
   object_target(starter.jim)
   object_target(shadow.jim)
#endif
object_target(prio)
object_target(scripts)
#if WANT_CONDOR_G && HAS_GLOBUS
    object_target(gridmanager)
	object_target(globus)
#endif
#if WANT_NEW_CLASSADS && HAS_GLOBUS
	object_target(credd)
#endif
object_target(starter.V6.1)
object_target(shadow.V6.1)
object_target(c-gahp)
object_target(dcskel)
#if WANT_DRMAA
object_target(drmaa)
#endif
object_target(chirp)

object_dir_target(h)
object_dir_target(condor_includes)
object_dir_target(condor_release)
object_dir_target(html)
object_dir_target(condor_bypass)
object_dir_target(condor_sdk)
#if WANT_STORK
/* Just create the Stork directory for now. */
object_dir_target(stork)
#endif
object_dir_target(owl)

single_target(condor_procapi,libprocapi.a)
single_target(condor_sysapi,libsysapi.a)
single_target(condor_schedd.V6,libqmgmt.a)
single_target(condor_accountant.V6,libacct.a)
single_target(condor_ckpt_server,ckpt_server_api.a)
single_target(owl,libanalysis.a)

object_target(tests)
object_target(test_suite_C.V5)
object_target(test_suite_base)


#if HAS_FORTRAN
   object_target($(TEST_SUITE_F))
#endif
#if WANT_JAVA
   object_target($(TEST_SUITE_JAVA))
#endif
#if WANT_PVM
/*   object_target($(TEST_SUITE_PVM))*/
#endif

h_all: h/Makefile h/syscall_numbers.h h/syscall_numbers.o

makefiles:: h/Makefile

h/Makefile: h h/Imakefile
	cd h; ../condor_imake

h/syscall_numbers.h: h/syscall_numbers.tmpl h/Makefile
	cd h; make syscall_numbers.h

h/syscall_numbers.o: h/syscall_numbers.tmpl h/Makefile
	cd h; make syscall_numbers.o

makefiles:: owl/Makefile

owl/Makefile: owl owl/Imakefile
	cd owl; ../condor_imake

check_platform_target

clean:: 
	cd h; make clean
	make clean-up

really-clean:: clean-up

clean-up:
	rm -rf *.out Makefile */Makefile* release_* \
		strip_dir strip_contrib static_dir static_contrib pure_bin

reallyclean: really-clean

htmldocs: html docs
	cd html; ./build_doc++_index

pure_target(condor_startd.V6,condor_startd.pure)
pure_target(condor_gridmanager,condor_gridmanager.pure)
pure_target(condor_schedd.V6,condor_schedd.pure)
pure_target(condor_master.V6,condor_master.pure)

pure_target(condor_shadow.V6,condor_shadow.std.pure)
pure_target(condor_starter.V5,condor_starter.std.pure)

pure_target(condor_shadow.V6.1,condor_shadow.pure)
pure_target(condor_starter.V6.1,condor_starter.pure)
pure_target(condor_collector.V6,condor_collector.pure)
pure_target(condor_negotiator.V6,condor_negotiator.pure)
pure_target(condor_dagman,condor_dagman.pure)


ext_target(EXT_ZLIB_VERSION,$(NULL))
#if WANT_EXT_GLIBC
ext_target(EXT_GLIBC_VERSION,$(NULL))
#endif
#if WANT_KERBEROS
ext_target(EXT_KERBEROS_VERSION,$(NULL))
#endif
#if HAS_GLOBUS
ext_target(EXT_GLOBUS_VERSION,$(EXT_TRIGGER)/$(EXT_GPT_VERSION))
ext_target(EXT_GAHP_VERSION,$(EXT_TRIGGER)/$(EXT_GLOBUS_VERSION))
ext_target(EXT_GPT_VERSION,$(NULL))
ext_target(EXT_GT3GAHP_VERSION,$(NULL))
#endif
#if WANT_PVM
ext_target(EXT_PVM_VERSION,$(NULL))
#endif
ext_nodep_target(EXT_MAN_VERSION,$(NULL))
#if WANT_NEW_CLASSADS
ext_target(EXT_CLASSADS_VERSION, $(NULL))
#endif

clean::
	rm -rf $(PURE_DIR)

today:
	/bin/rm -f condor_c++_util/condor_version.o
	cd condor_c++_util; make


#if HAS_STATIC
#define StaticTar static.tar
static.tar: static manpages
	rm -f static_dir/release.tar
	cd static_dir; $(TAR_CMD) -cvf release.tar AllFiles
#else
#define StaticTar
#endif 

strip.tar: stripped manpages
	rm -f strip_dir/release.tar
	cd strip_dir; $(TAR_CMD) -cvf release.tar AllFiles

all_tarballs: strip.tar StaticTar

public: release all_tarballs
	if test ! -d ../public; then mkdir ../public; fi
	rm -f ../public/unstripped-release.tar.gz
	cd release_dir; $(TAR_CMD) -zcvf ../../public/unstripped-release.tar.gz *
	perl condor_scripts/make_final_tarballs --sys=$(SYSNAME) --tarcmd="$(TAR_CMD)" --cpcmd="$(CP_CMD)" --target=../public
	$(MakeRPMs)


#if WANT_MAN_PAGES
man_target(condor_advertise.1)
man_target(condor_checkpoint.1)
man_target(condor_compile.1)
man_target(condor_configure.1)
man_target(condor_config_val.1)
man_target(condor_findhost.1)
man_target(condor_glidein.1)
man_target(condor_history.1)
man_target(condor_hold.1)
man_target(condor_master.1)
man_target(condor_master_off.1)
man_target(condor_off.1)
man_target(condor_on.1)
man_target(condor_preen.1)
man_target(condor_prio.1)
man_target(condor_q.1)
man_target(condor_qedit.1)
man_target(condor_reconfig.1)
man_target(condor_reconfig_schedd.1)
man_target(condor_release.1)
man_target(condor_reschedule.1)
man_target(condor_restart.1)
man_target(condor_rm.1)
man_target(condor_run.1)
man_target(condor_stats.1)
man_target(condor_status.1)
man_target(condor_store_cred.1)
man_target(condor_submit.1)
man_target(condor_submit_dag.1)
man_target(condor_updates_stats.1)
man_target(condor_userlog.1)
man_target(condor_userprio.1)
man_target(condor_vacate.1)
man_target(condor_vacate_job.1)
#else
manpages::
	@echo "You're trying to package Condor but you don't want man pages!"
	@exit 1
#endif

