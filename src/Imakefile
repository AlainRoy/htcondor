CFLAGS = $(STD_C_FLAGS)


#if !HAS_FORTRAN
#define test_suite_F
#endif

#if !HAS_X
#define kbdd
#endif

#if !DOES_CHECKPOINTING
#	define standalone
#endif

#if WANT_PVM && HAS_PVM
PVM_LIBRARY = pvmd
#endif


#if IS_ALPHA_OSF1
#	define Programs \
		scripts tools shadow.Alpha starter.Alpha startd \
		schedd kbdd  negotiator collector globalq master prio q rm \
		submit.v3  on off test_suite_C.Alpha test_suite_F.Alpha
#		define Libraries	c++_util util_lib xdr_lib ckpt syscall_lib
#else
#	define Programs \
		scripts standalone tools shadow starter startd \
		schedd kbdd  negotiator collector globalq master prio q rm \
		submit.v2 submit.v3  on off \
		test_suite_C test_suite_F
#		define Libraries	c++_util util_lib xdr_lib $(SYSCALL_LIB) $(PVM_LIBRARY)
#endif


#define Directories release_dir release_dir/bin release_dir/lib
all: makefiles Directories Libraries Programs
release:: all

#if IS_ALPHA_OSF1
distrib: release
	cd ../doc; make distrib
	cd condor_test_suite_C.Alpha; make distrib
	cd condor_test_suite_F.Alpha; make distrib
#endif

simple_dir_target(release_dir)
simple_dir_target(release_dir/bin)
simple_dir_target(release_dir/lib)
object_target(util_lib)
object_target(c++_util)
object_target(xdr_lib)

#if WANT_PVM && HAS_PVM
	object_target($(PVM_LIBRARY))
#endif


object_target(submit.v3)
object_target(tools)

#if IS_ALPHA_OSF1
	object_target(shadow.Alpha)
	object_target(starter.Alpha)
	object_target(test_suite_C.Alpha)
	object_target(test_suite_F.Alpha)
	object_target(ckpt)
	object_target(syscall_lib)
makefiles:: ../doc/Makefile
../doc/Makefile:
	cd ../doc; imake -I../config -DTilde=/usr/home/condor -s Makefile
#else
	object_target(shadow)
	object_target(starter)
	object_target(submit.v2)
	object_target($(SYSCALL_LIB))
	object_target(test_suite_C)
#	if HAS_FORTRAN
		object_target(test_suite_F)
#	endif
#	if DOES_CHECKPOINTING
		object_target(standalone)
#	endif
#endif

object_target(startd)
object_target(schedd)
#if HAS_X
object_target(kbdd)
#endif
object_target(negotiator)
object_target(collector)
object_target(globalq)
object_target(master)
object_target(prio)
object_target(q)
object_target(rm)
object_target(on)
object_target(off)
object_target(scripts)




check_platform_target
