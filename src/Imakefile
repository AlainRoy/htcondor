#define AllFiles etc include lib bin sbin

#define AdminTools sbin/condor_off sbin/condor_on sbin/condor_reconfig \
  sbin/condor_restart sbin/condor_master_off sbin/condor_preen

#define MasterFiles sbin/condor_master AdminTools

#define SubmitSbinFiles sbin/condor_schedd sbin/condor_shadow \
  sbin/condor_checkpoint sbin/condor_vacate sbin/condor_reschedule

#define SubmitOnlyFiles bin lib include etc SubmitSbinFiles MasterFiles

#define LinkOnlyFiles lib bin/condor_compile include

#define PvmFiles sbin/condor_pvmd sbin/condor_pvmgs \
  sbin/condor_shadow.pvm sbin/condor_starter.pvm

#define CkptServerFiles sbin/condor_ckpt_server sbin/condor_cleanckpts \
  etc/examples/condor_config.local.ckpt.server

#define SMPFiles sbin/condor_startd sbin/condor_preen bin/condor_status

#define SMPContribFiles etc/examples/condor_config.local.smp \
  sbin/condor_starter

#define ViewServerFiles sbin/condor_collector sbin/condor_stats

#define ViewServerContribFiles etc/examples/condor_config.local.view_server

#define ViewClientFiles sbin/condor_stats

#if HAS_FORTRAN
  TEST_SUITE_F = test_suite_F.V5
#endif

#if !HAS_X
#   define kbdd
#endif

#if !DOES_CHECKPOINTING
#   define standalone
#endif

#if WANT_PVM && HAS_PVM
   #define PvmProgs starter.jim shadow.jim 
#else
   #define PvmProgs
#endif

#define Programs \
		accountant.V6 ckpt_server \
		master.V6 negotiator.V6 schedd.V6 prio q.V6 rm.V6 \
		scripts shadow.V6 startd.V6 starter.V5 submit.V6 status.V6 \
		tools kbdd collector.V6 PvmProgs dagman

#define Libraries \
		util_lib c++_util procapi io classad daemon_core.V6 \
		ckpt syscall_lib condor_ckpt_server/ckpt_server_api.a \
		condor_schedd.V6/libqmgmt.a condor_accountant.V6/libacct.a

#if HAS_STATIC
#define StaticDirectories \
	static_dir static_dir/bin static_dir/sbin static_dir/lib \
	static_dir/etc static_dir/etc/examples static_dir/include \
	static_contrib static_contrib/bin static_contrib/lib \
	static_contrib/sbin static_contrib/etc \
	static_contrib/etc/examples static_contrib/include
#else
#define StaticDirectories
#endif

#define Directories \
	condor_shadow.V6.1 condor_starter.V6.1 html \
	release_dir release_dir/bin release_dir/lib release_dir/sbin \
	release_dir/include pure_bin \
	strip_dir strip_dir/bin strip_dir/sbin strip_dir/lib \
	strip_dir/etc strip_dir/etc/examples strip_dir/include \
	strip_contrib strip_contrib/bin strip_contrib/lib \
	strip_contrib/sbin strip_contrib/etc \
	strip_contrib/etc/examples strip_contrib/include StaticDirectories

all: h h_all condor_includes makefiles Directories Libraries \
	Programs examples condor_release_all
release:: all
stripped:: all
static:: all
libs:: h h_all condor_includes makefiles Directories Libraries

public:: strip.tar 

strip.tar: stripped
	cd strip_dir; rm -f release.tar; tar -cvf release.tar AllFiles

afs_release.tar:: afs_strip.tar

afs_strip.tar: strip.tar
	cp strip_dir/release.tar $(PUBLIC_D_TARGET)

#if HAS_STATIC
public:: static.tar

afs_release.tar:: afs_static.tar

static.tar: static
	cd static_dir; rm -f release.tar; tar -cvf release.tar AllFiles

afs_static.tar: static.tar
	cp static_dir/release.tar $(PUBLIC_S_TARGET)

#endif 

release_tarball( submit.tar, SubmitOnlyFiles )
release_tarball( link.tar, LinkOnlyFiles  )
release_tarball( master.tar, MasterFiles )

/* contrib_tarball( view_client.tar, ViewClientFiles ) */
contrib_tarball( ckpt_server.tar, CkptServerFiles )

both_tarball( smp_startd.tar, SMPFiles, SMPContribFiles )
both_tarball( view_server.tar, ViewServerFiles, ViewServerContribFiles )


#if WANT_PVM && HAS_PVM
#define PvmTar pvm.tar
#define AfsPvmTar afs_pvm.tar
contrib_tarball( pvm.tar, PvmFiles )
#else
#define PvmTar 
#define AfsPvmTar 
#endif 

all_tarballs: smp_startd.tar view_server.tar ckpt_server.tar PvmTar 

afs_tarballs: afs_smp_startd.tar afs_view_server.tar afs_release.tar \
	afs_ckpt_server.tar AfsPvmTar

public:: all_tarballs

PUBLIC_TARGET_PATH = /p/condor/workspaces/release
#if defined( PublicTargetName )
  PUBLIC_TARGET_NAME = PublicTargetName
  PUBLIC_D_TARGET = $(PUBLIC_TARGET_PATH)/V61_releases/$(PUBLIC_TARGET_NAME)
  PUBLIC_S_TARGET = $(PUBLIC_TARGET_PATH)/V61_static_releases/$(PUBLIC_TARGET_NAME)
#else 
  PUBLIC_D_TARGET = $(PUBLIC_TARGET_PATH)/V61_release
  PUBLIC_S_TARGET = $(PUBLIC_TARGET_PATH)/V61_static_release
#endif

simple_dir_target(release_dir)
simple_dir_target(release_dir/bin)
simple_dir_target(release_dir/lib)
simple_dir_target(release_dir/sbin)
simple_dir_target(release_dir/include)

simple_dir_target(pure_bin)

simple_dir_target(strip_dir)
simple_dir_target(strip_dir/bin)
simple_dir_target(strip_dir/lib)
simple_dir_target(strip_dir/sbin)
simple_dir_target(strip_dir/etc)
simple_dir_target(strip_dir/etc/examples)
simple_dir_target(strip_dir/include)

simple_dir_target(strip_contrib)
simple_dir_target(strip_contrib/bin)
simple_dir_target(strip_contrib/lib)
simple_dir_target(strip_contrib/sbin)
simple_dir_target(strip_contrib/etc)
simple_dir_target(strip_contrib/etc/examples)
simple_dir_target(strip_contrib/include)

#if HAS_STATIC
simple_dir_target(static_dir)
simple_dir_target(static_dir/bin)
simple_dir_target(static_dir/lib)
simple_dir_target(static_dir/sbin)
simple_dir_target(static_dir/etc)
simple_dir_target(static_dir/etc/examples)
simple_dir_target(static_dir/include)

simple_dir_target(static_contrib)
simple_dir_target(static_contrib/bin)
simple_dir_target(static_contrib/lib)
simple_dir_target(static_contrib/sbin)
simple_dir_target(static_contrib/etc)
simple_dir_target(static_contrib/etc/examples)
simple_dir_target(static_contrib/include)
#endif /* HAS_STATIC */

object_target(util_lib)
object_target(c++_util)
object_target(procapi)
object_target(tools)
object_target(examples)
object_target(accountant.V6)
object_target(ckpt_server)
object_target(shadow.V6)
object_target(starter.V5)
object_target(startd.V6)
object_target(schedd.V6)
object_target(status.V6)
object_target(dagman)
#if HAS_X
   object_target(kbdd)
#endif
object_target(negotiator.V6)
object_target(collector.V6)
object_target(master.V6)
object_target(q.V6)
object_target(rm.V6)
object_target(submit.V6)
object_target(test_suite_C.V5)
#if HAS_FORTRAN
   object_target($(TEST_SUITE_F))
#endif
object_target(ckpt)
object_target(syscall_lib)
object_target(io)
object_target(classad)
object_target(daemon_core.V6)
#if WANT_PVM && HAS_PVM
   object_target(starter.jim)
   object_target(shadow.jim)
#endif
object_target(prio)
object_target(scripts)

object_dir_target(h)
object_dir_target(condor_includes)
object_dir_target(condor_release)
object_dir_target(condor_release/examples)
object_dir_target(condor_shadow.V6.1)
object_dir_target(condor_starter.V6.1)
object_dir_target(html)

single_target(condor_schedd.V6, libqmgmt.a)
single_target(condor_accountant.V6, libacct.a)
single_target(condor_ckpt_server, ckpt_server_api.a)

condor_release_all:
	make condor_release
	rm -rf condor_release/examples
	make condor_release/examples

h_all: h/Makefile h/syscall_numbers.h h/syscall_numbers.o

makefiles:: h/Makefile

h/Makefile: h h/Imakefile
	cd h; imake IMAKE_FLAGS

h/syscall_numbers.h: h/syscall_numbers.tmpl h/Makefile
	cd h; make syscall_numbers.h

h/syscall_numbers.o: h/syscall_numbers.tmpl h/Makefile
	cd h; make syscall_numbers.o

check_platform_target

clean:: 
	cd h; make clean
	make clean-up

really-clean:: clean-up

clean-up:
	rm -rf *.out Makefile */Makefile* release_* \
		strip_dir strip_contrib static_dir static_contrib pure_bin

reallyclean: really-clean

htmldocs: html docs
	cd html; ./build_doc++_index

pure_target( condor_startd.V6, condor_startd.pure )
pure_target( condor_schedd.V6, condor_schedd.pure )
pure_target( condor_master.V6, condor_master.pure )
pure_target( condor_shadow.V6, condor_shadow.pure )
pure_target( condor_starter.V5, condor_starter.pure )
pure_target( condor_collector.V6, condor_collector.pure )
pure_target( condor_negotiator.V6, condor_negotiator.pure )

clean::
	rm -rf $(PURE_DIR)
