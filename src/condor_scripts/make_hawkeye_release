#! /s/std/bin/perl -w
use strict;

# Version info, dirs, etc
my $HawkeyeVersion = "";
my $Temp = "../tmp-$$";
my $HawkeyeRelease = "hawkeye_release";
my @BinDirs = ( "bin", "sbin" );
my $Modules = "hawkeye_modules";
my $ModulesTarget = "modules";
my $Install = "install";
my $Examples = "condor_examples";
my $CondorRel = "condor_release";
my $Scripts = "condor_scripts";
my $ClassAdViewer = "/p/condor/workspaces/shared/wenger/dist/";
my $ReleaseDir = "../Hawkeye-Release";
my $TarBallPat = "Hawkeye-%s.tar";
my $RelTarBallPat = "Hawkeye-%s.tar.gz";

# Script version, etc
my $Version = "0.2";
my $Usage = "$0 version";

# Env variable overrides the dirctory from the file...
if ( exists $ENV{HAWKEYE_RELEASE_DIR} )
{
    $ReleaseDir = $ENV{HAWKEYE_RELEASE_DIR};
}

# Prototypes
sub CopyAll( $$$ );

# Process command line..
foreach my $Arg ( @ARGV )
{
    # Option (no options supported for now)
    if ( $Arg =~ /^-/ )
    {
	die "$Usage";
    }

    # Grab the version
    $HawkeyeVersion = $Arg;
}

# Make stdout unbufferred...
$| = 1;

# Version specified?
die "$Usage" if ( $HawkeyeVersion eq "" );

# Temp better not exist!
die "$Temp exists" if ( -d $Temp );

# Check modules dir
die "No '$Modules' dir!" if ( ! -d $Modules );
die "'$Modules' is empty!" if ( ! -f "$Modules/df" );

# Make the hawkeye release dir
print "Creating the Hawkeye directory..\n";
die "Can't make hawkeye!" if ( system( "./condor_scripts/make_hawkeye" ) );

# Make the temp directory...
mkdir( $Temp, 0755 ) || die "Can't create $Temp";
mkdir "$Temp/$Install" || die "Can't create $Temp/$Install";

# Let the user know what's going on
print "\n == Filling temp release directory ==\n\n";

# Start populating it..
foreach my $Bin ( @BinDirs )
{
    CopyAll( "$HawkeyeRelease/$Bin", "$Temp/$Bin", "*" );
}

# Copy the modules
CopyAll( $Modules, "$Temp/$ModulesTarget", "test" );
CopyAll( $Modules, "$Temp/$ModulesTarget", "*pm" );

# Copy the module installer, configs, etc.
CopyAll( $Scripts, "$Temp/$Install", "hawkeye_install_*" );
CopyAll( $Examples, "$Temp/$Install", "*hawkeye*" );

# Rename 'em to .example'
foreach my $File ( split ( /\s+/, `echo $Temp/$Install/*` ) )
{
    if ( -f $File )
    {
	rename ( $File, "$File.example" );
    }
}

# Create the release directory
mkdir( $ReleaseDir, 0755 ) if ( ! -d $ReleaseDir );

# Finally, make the damn tarball
my $BinTarBall;
{
    my $TarBall = sprintf( $TarBallPat, $HawkeyeVersion );
    my $TarBallPath = "$ReleaseDir/$TarBall";
    print "\nCreating tarball '$TarBallPath'...  ";
    system( "gtar -C $Temp -cf $TarBallPath ." );
    print "Done\n";
    system( "ls -l $TarBallPath" );

    # Blow away tmp, and move the newly created tarball there
    system( "rm -r $Temp" );
    die "Can't create $Temp" if ( ! mkdir( "$Temp", 0755 ) );
    system( "mv $TarBallPath $Temp" );
    $BinTarBall = $TarBall;
}

# Copy in the last minute pieces..
CopyAll( $CondorRel, $Temp, "*hawkeye*" );
CopyAll( $ClassAdViewer, $Temp, "h*tgz*" );

# Copy the install script, but clean it up along the way...
{
    my $InstallIn = "$Scripts/hawkeye_install";
    my $InstallOut = "$Temp/hawkeye_install";
    open( IN, $InstallIn ) || die "Can't read '$InstallIn'\n";
    open( OUT, ">$InstallOut" ) || die "Can't write to '$InstallOut'\n";
    while( <IN> )
    {
	s/TARBALL/$BinTarBall/;
	print OUT;
    }
    close( IN );
    close( OUT );
    chmod( 0755, $InstallOut );
}

# Now, make the release tarball...
{
    my $TarBall = sprintf( $RelTarBallPat, $HawkeyeVersion );
    my $TarBallPath = "$ReleaseDir/$TarBall";
    print "\nCreating release tarball '$TarBallPath'...  ";
    system( "gtar --gzip -C $Temp -cf $TarBallPath ." );
    print "Done\n";
    system( "ls -l $TarBallPath" );
    system( "tar --gzip -tvf $TarBallPath" );
}

# Clean up the temp dir
print "Cleaning up the $Temp directory...\n";
system( "rm -r $Temp" );
exit 0;

# Stupid subroutine to copy files
sub CopyAll( $$$ )
{
    my ( $SrcDir, $DestDir, $FilePat ) = @_;
    print "Copy/Link '$FilePat' from '$SrcDir' to '$DestDir':\n";
    if ( ! -d $DestDir )
    {
	mkdir( "$DestDir", 0755 ) || die "Can't create $DestDir";
    }
    my @FileList = split( /\s+/, `cd $SrcDir; /bin/ls -1 $FilePat` );
    foreach my $File ( @FileList )
    {
	next if ( ! -f "$SrcDir/$File" );
	print "   $SrcDir/$File -> $DestDir:  ";

	if ( ( -l $SrcDir ) || ( -l "$SrcDir/$File" ) )
	{
	    system( "/bin/cp $SrcDir/$File $DestDir" );
	    chmod( 0755, "$DestDir/$File" ) if ( -x "$SrcDir/$File" );
	    print "Copy done\n";
	}
	elsif ( -f "$SrcDir/$File" )
	{
	    link "$SrcDir/$File", "$DestDir/$File" || die "link: $!";
	    print "Link done\n";
	}
	else
	{
	    print "\n";
	    die "Don't know how to handle '$SrcDir/$File'\n";
	}
    }
    system "ls -li $DestDir";
}
