#if IS_MIPS_ULTRIX42 || IS_SPARC_SUNOS41 || IS_HPPAR_HPUX9
CC = gcc
#endif

CMNT
CMNT Set the following if you want a PVM ready checkpointing library
CMNT compiled.  This will require that the PVM library be linked into
CMNT the application.
CMNT

CMNT PVM_CHECKPOINT = -DPVM_CHECKPOINTING

#if DOES_SAVE_SIGSTATE
SAVE_SIGSTATE = -DSAVE_SIGSTATE
SAVE_SIGSTATE_OBJ = signals_support.o
SAVE_SIGSTATE_SRC = signals_support.c

#if IS_SPARC_SUNOS41
EXTRACT = SIGVEC.o _SIGVEC.o
#elif IS_ALPHA_OSF1
EXTRACT = SIGACTION.o SIGPROCMASK.o _SIGPROCMSK.o SIGSUSPEND.o
#elif IS_MIPS_ULTRIX43
EXTRACT = SIGVEC.o SIGACTION.o SIGPROCMASK.o SIGSUSPEND.o SIGNAL.o
#endif

#endif  /* ======= of if DOES_SAVE_SIGSTATE ==========*/

C_PLUS_FLAGS = $(STD_C_PLUS_FLAGS) $(SAVE_SIGSTATE) $(STATIC) $(PVM_CHECKPOINT)

CFLAGS = $(STD_C_FLAGS)

SRC_DIR = $(SRC_TREE)/condor_ckpt

OS = OperatingSystem


#if IS_HPPAR_HPUX9
ASSEMBLER_SRC = get_reginfo.HPUX.s
ASSEMBLER_OBJ = get_reginfo.HPUX.o
.s.o:
	as /lib/pcc_prefix.s $<
#endif

#if IS_R6000_AIX32
ASSEMBLER_SRC = _longjmp.AIX32.s
ASSEMBLER_OBJ = _longjmp.AIX32.o
.s.o:
	m4 /usr/include/sys/asdef.s $*.s | as -o $*.o
#endif

#if IS_R6000_AIX32
UTIL_OBJ = dprintf.o dprintf_config.o except.o condor_errlst.o flock.o
#elif IS_HPPAR_HPUX9
UTIL_OBJ = dprintf.o dprintf_config.o except.o condor_errlst.o flock.o \
		   seteuid.o setegid.o getwd.o
#else
UTIL_OBJ = dprintf.o dprintf_config.o except.o condor_errlst.o
#endif

SRC =	ToUpper.c image.C machdep.$(OS).C file_state.C tmp_stack.C syscall_mode.c \
		local_startup.c fake_remote_syscall.c $(SAVE_SIGSTATE_SRC)

#if DOES_CHECKPOINTING
OBJ =	image.o machdep.$(OS).o file_state.o tmp_stack.o syscall_mode.o \
		local_startup.o fake_remote_syscall.o $(SAVE_SIGSTATE_OBJ) $(EXTRACT) \
		$(ASSEMBLER_OBJ) $(UTIL_OBJ)
#else
OBJ =	syscall_mode.o
#endif

#if IS_R6000_AIX32
RELEASE_OBJ = $(LIB_DIR)/libckpt.a $(LIB_DIR)/c_plus_alloc.o
#endif

#if DOES_CHECKPOINTING
	all_target(ToUpper machdep_test libckpt.a c_plus_alloc.o $(RELEASE_OBJ))
	library_target(libckpt.a,$(OBJ))
	release_library(libckpt.a,$(RELEASE_DIR)/lib)
	release_target(c_plus_alloc.o,$(RELEASE_DIR)/lib,OBJECT_MODE)
#else
	all_target(syscall_mode.o)
release:: all
#endif

#if IS_HPPAR_HPUX9
SIGNAL.o :  $(SIMPLE_LIBC)  ToUpper
	ar x    $(SIMPLE_LIBC)      signal.o      ; mv  signal.o  $(TMP_DIR)
	ToUpper $(TMP_DIR)/signal.o   SIGNAL.o   signal   SIGNAL
	rm -f $(TMP_DIR)/signal.o
	mv SIGNAL.o tmp1
	ToUpper tmp1 SIGNAL.o _SIGNALvector _signalvector
	rm -f tmp1
#else
uppercase_target($(SIMPLE_LIBC),signal.o,SIGNAL.o,signal,SIGNAL)
#endif

uppercase_target($(SIMPLE_LIBC),sigvec.o,SIGVEC.o,sigvec,SIGVEC)
uppercase_target($(SIMPLE_LIBC),_sigvec.o,_SIGVEC.o,_sigvec,_SIGVEC)
uppercase_target($(SIMPLE_LIBC),sigaction.o,SIGACTION.o,sigaction,SIGACTION)
uppercase_target($(SIMPLE_LIBC),sigprocmask.o,SIGPROCMASK.o,sigprocmask,SIGPROCMASK)
uppercase_target($(SIMPLE_LIBC),_sigprocmsk.o,_SIGPROCMSK.o,_sigprocmask,_SIGPROCMASK)

#if IS_ALPHA_OSF1
SIGSUSPEND.o :  $(SIMPLE_LIBC)  ToUpper
	ar x    $(SIMPLE_LIBC)      sigsuspend.o 	  ; mv  sigsuspend.o  $(TMP_DIR)
	ToUpper $(TMP_DIR)/sigsuspend.o   $(TMP_DIR)/SIGSUSPEND.o   sigsuspend   SIGSUSPEND
	ToUpper $(TMP_DIR)/SIGSUSPEND.o SIGSUSPEND.o _SIGSUSPEND _sigsuspend
	rm -f $(TMP_DIR)/sigsuspend.o $(TMP_DIR)/SIGSUSPEND.o
#else
uppercase_target($(SIMPLE_LIBC),sigsuspend.o,SIGSUSPEND.o,sigsuspend,SIGSUSPEND)
#endif


depend_target($(SRC) )

program_target(machdep_test,machdep_test.o machdep.$(OS).o tmp_stack.o $(ASSEMBLER_OBJ), )

program_target(ToUpper,ToUpper.o,$(NULL))
release_target(ToUpper,$(RELEASE_DIR)/bin,EXECUTABLE_MODE)


IMPORT_LINKS = ../../config/import_links
import(../condor_util_lib,$(UTIL_OBJ))

clean::
	rm -f c_plus_alloc.o syscall_mode.o
