
CMNT
CMNT Set the following if you want a PVM ready checkpointing library
CMNT compiled.  This will require that the PVM library be linked into
CMNT the application.
CMNT

PVM_CHECKPOINT = -DPVM_CHECKPOINTING

FILE_TABLE = -DFILE_TABLE
FILE_TABLE_OBJ = file_state.o condor_file.o condor_file_local.o condor_file_remote.o condor_file_special.o file_table_interf.o file_table_switches.o buffer_cache.o

#if DOES_SAVE_SIGSTATE
SAVE_SIGSTATE = -DSAVE_SIGSTATE
SAVE_SIGSTATE_OBJ = signals_support.o signals_control.o

#if IS_DUX
SIG_EXTRACT = SIGACTION.o SIGPROCMASK.o SIGSUSPEND.o SIGNAL.o
#elif IS_X86_SOLARIS
SIG_EXTRACT = SIGACTION.o _SIGACTION.o i386_data.o
#elif IS_SUN4X_SOLARIS
SIG_EXTRACT = SIGACTION.o _SIGACTION.o
#elif IS_HPUX
PLATFORM_EXTRACT = SYSCALL.o __SYSCALL.o
#endif

#endif  /* ======= of if DOES_SAVE_SIGSTATE ==========*/

#if IS_GLIBC_LINUX
PLATFORM_EXTRACT = MMAP.o SYSCALL.o SYSDEP.o
#elif IS_LINUX || IS_SOLARIS
PLATFORM_EXTRACT = MMAP.o SYSCALL.o 
#elif IS_ALPHA_OSF1
PLATFORM_EXTRACT = MMAP.o SYSCALL.o
#elif IS_HPUX
PLATFORM_EXTRACT = SYSCALL.o __SYSCALL.o
#else
PLATFORM_EXTRACT = 
#endif

EXTRACT = $(SIG_EXTRACT) $(PLATFORM_EXTRACT)

#if DOES_COMPRESS_CKPT
#if IS_SUN4X_SOLARIS
COMPRESS_OBJ = malloc.o zimage.o _rem.o
#else
COMPRESS_OBJ = malloc.o zimage.o
#endif
COMPRESS_FLAGS = -DCOMPRESS_CKPT -I/s/zlib/include
COMPRESS_LIB = libzckpt.a
#endif

C_PLUS_FLAGS = $(STD_C_PLUS_FLAGS) $(SAVE_SIGSTATE) $(STATIC) \
	$(FILE_TABLE) $(PVM_CHECKPOINT)

#if IS_HPUX10
CFLAGS = $(STD_C_FLAGS) $(STATIC)
#else
CFLAGS = $(STD_C_FLAGS)
#endif

#if IS_IRIX62
OS = IRIX62
#elif IS_HPUX10
OS = HPUX10
#else
OS = OperatingSystem
#endif

#if IS_SGI_IRIX62
ASSEMBLER_OBJ = SYSCALL.MIPS.IRIX62.o MMAP.MIPS.IRIX62.o
.s.o:
	gas -o $*.o $*.s
#endif

#if DOES_CHECKPOINTING
OBJ =	image.o machdep.$(OS).o tmp_stack.o \
	syscall_mode.o local_startup.o fake_remote_syscall.o fake_hooks.o \
	$(SAVE_SIGSTATE_OBJ) fake_util_lib.o eprintf.o $(EXTRACT) \
	$(ASSEMBLER_OBJ) $(FILE_TABLE_OBJ)
#else
OBJ =	syscall_mode.o
#endif

#if DOES_CHECKPOINTING
	all_target(ToUpper libckpt.a c_plus_alloc.o condor_rt0.o $(COMPRESS_LIB) $(RELEASE_OBJ) )

#if IS_X86_SOLARIS || IS_GLIBC_LINUX
	library_target(libtmp.a,$(OBJ))

clean::
	rm -f libckpt.a

libckpt.a: libtmp.a ToUpper
#   if (IS_X86_SOLARIS)
	./ToUpper libtmp.a libckpt.a __cerror __CERROR
#   else /* GLIBC Linux */
	./ToUpper libtmp.a libckpt.a __syscall_error __SYSCALL_ERROR
#   endif /* Solaris */
#else  /* Not GLIBC Linux or Intel Solaris */

	library_target(libckpt.a,$(OBJ))

#endif /* GLIBC Linux or Intel Solaris */

	release_library(libckpt.a,$(RELEASE_DIR)/lib)
	release_target(c_plus_alloc.o,$(RELEASE_DIR)/lib,OBJECT_MODE)
	strip_library(libckpt.a,$(STRIP_DIR)/lib)
	strip_copy_target(c_plus_alloc.o,$(STRIP_DIR)/lib,c_plus_alloc.o,OBJECT_MODE)
	static_library(libckpt.a,$(STATIC_DIR)/lib)
	static_copy_target(c_plus_alloc.o,$(STATIC_DIR)/lib,c_plus_alloc.o,OBJECT_MODE)
#if	DOES_COMPRESS_CKPT
	release_library($(COMPRESS_LIB),$(RELEASE_DIR)/lib)
	strip_library($(COMPRESS_LIB),$(STRIP_DIR)/lib)
	static_library($(COMPRESS_LIB),$(STATIC_DIR)/lib)
#endif

#else /* Not DOES_CHECKPOINTING */

	all_target(syscall_mode.o ToUpper)
release:: all
stripped:: all
#endif


#if IS_HPUX
SIGNAL.o :  $(SIMPLE_LIBC)  ToUpper
	ar x    $(SIMPLE_LIBC)      signal.o      ; mv  signal.o  $(TMP_DIR)
	./ToUpper $(TMP_DIR)/signal.o   SIGNAL.o   signal   SIGNAL
	rm -f $(TMP_DIR)/signal.o
	mv SIGNAL.o tmp1
	./ToUpper tmp1 SIGNAL.o _SIGNALvector _signalvector
	rm -f tmp1
#else
uppercase_target($(SIMPLE_LIBC),signal.o,SIGNAL.o,signal,SIGNAL)
#endif

#if IS_X86_SOLARIS
i386_data.o : $(SIMPLE_LIBC)
	ar x $(SIMPLE_LIBC) i386_data.o
#endif

uppercase_target($(SIMPLE_LIBC),sigvec.o,SIGVEC.o,sigvec,SIGVEC)
uppercase_target($(SIMPLE_LIBC),_sigvec.o,_SIGVEC.o,_sigvec,_SIGVEC)

#if IS_X86_SOLARIS
SIGACTION.o : ToUpper $(SIMPLE_LIBC)
	ar x $(SIMPLE_LIBC) sigaction.o
	./ToUpper sigaction.o sigaction.tmp.o sigaction SIGACTION
	./ToUpper sigaction.tmp.o SIGACTION.o _siguhandler _SIGUHANDLER
	rm -f sigaction.tmp.o sigaction.o
#elif IS_ALPHA_OSF1
uppercase_target($(SIMPLE_LIBC),mmap.o,MMAP.o,mmap,MMAP)
#else
uppercase_target($(SIMPLE_LIBC),sigaction.o,SIGACTION.o,sigaction,SIGACTION)
#endif

#if IS_SOLARIS
uppercase_target($(SIMPLE_LIBC),mmap.o,MMAP.o,mmap,MMAP)
uppercase_target($(SIMPLE_LIBC),syscall.o,SYSCALL.o,syscall,SYSCALL)
uppercase_target($(SIMPLE_LIBC),_sigaction.o,_SIGACTION.o,sigaction,SIGACTION)
#endif

uppercase_target($(SIMPLE_LIBC),sigprocmask.o,SIGPROCMASK.o,sigprocmask,SIGPROCMASK)

#if IS_ALPHA_OSF1
SIGSUSPEND.o :  $(SIMPLE_LIBC)  ToUpper
	ar x    $(SIMPLE_LIBC)      sigsuspend.o 	  ; mv  sigsuspend.o  $(TMP_DIR)
	./ToUpper $(TMP_DIR)/sigsuspend.o   $(TMP_DIR)/SIGSUSPEND.o   sigsuspend   SIGSUSPEND
	./ToUpper $(TMP_DIR)/SIGSUSPEND.o $(TMP_DIR)/SIGSUSPEND1.o _SIGSUSPEND _sigsuspend
	./ToUpper $(TMP_DIR)/SIGSUSPEND1.o SIGSUSPEND.o __sigsuspend __SIGSUSPEND
	rm -f $(TMP_DIR)/sigsuspend.o $(TMP_DIR)/SIGSUSPEND.o $(TMP_DIR)/SIGSUSPEND1.o
SIGACTION.o : $(SIMPLE_LIBC) ToUpper
	ar x $(SIMPLE_LIBC) sigaction.o; mv sigaction.o $(TMP_DIR)
	./ToUpper $(TMP_DIR)/sigaction.o $(TMP_DIR)/SIGACTION.o sigaction SIGACTION
	./ToUpper $(TMP_DIR)/SIGACTION.o SIGACTION.o _sigtramp _SIGTRAMP
	rm -f $(TMP_DIR)/sigaction.o $(TMP_DIR)/SIGACTION.o
#else
uppercase_target($(SIMPLE_LIBC),sigsuspend.o,SIGSUSPEND.o,sigsuspend,SIGSUSPEND)
#endif

#if IS_LINUX
uppercase_target($(SIMPLE_LIBC),mmap.o,MMAP.o,mmap,MMAP)
#endif


#if IS_GLIBC_LINUX
uppercase_target($(SIMPLE_LIBC),sysdep.o,SYSDEP.o,__syscall_error,__SYSCALL_ERROR)
uppercase_target($(SIMPLE_LIBC),syscall.o,SYSCALL_TMP.o,syscall,SYSCALL)

SYSCALL.o: SYSCALL_TMP.o ToUpper
	./ToUpper SYSCALL_TMP.o SYSCALL.o __SYSCALL_error __syscall_error

clean::
	rm -f SYSCALL_TMP.o
#elif IS_LINUX || IS_DUX || IS_HPUX
uppercase_target($(SIMPLE_LIBC),syscall.o,SYSCALL.o,syscall,SYSCALL)
uppercase_target($(SIMPLE_LIBC),__syscall.o,__SYSCALL.o,__syscall,__SYSCALL)
#endif

#if IS_SOLARIS
program_target(machdep_test,machdep_test.o machdep.$(OS).o tmp_stack.o $(ASSEMBLER_OBJ) MMAP.o SYSCALL.o fake_util_lib.o, )
#else
program_target(machdep_test,machdep_test.o machdep.$(OS).o tmp_stack.o $(ASSEMBLER_OBJ) fake_util_lib.o, )
#endif

program_target(ToUpper,ToUpper.o,$(NULL))

#if DOES_COMPRESS_CKPT
malloc.o : malloc.c
	CCompiler -O2 -g -DMORECORE=condor_morecore -DHAVE_MMAP=0 -c malloc.c
zimage.o : image.C
	CPlusCompiler $(C_PLUS_FLAGS) $(COMPRESS_FLAGS) -o zimage.o -c image.C
#if IS_SUN4X_SOLARIS
_rem.o : $(SIMPLE_LIBC)
	ar x $(SIMPLE_LIBC) _rem.o
#endif
$(COMPRESS_LIB): libckpt.a $(COMPRESS_OBJ)
	cp libckpt.a $(COMPRESS_LIB)
	ar -d $(COMPRESS_LIB) image.o
	ar -r $(COMPRESS_LIB) $(COMPRESS_OBJ)
clean::
	rm -f $(COMPRESS_LIB) $(COMPRESS_OBJ)
#endif

CMNT
CMNT The libc entry points to the file table are built
CMNT using the same mechanism as the syscall library.
CMNT

IMPORT_LINKS = ../../config/import_links
import(../condor_util_lib,stub_gen)
import(../condor_syscall_lib,syscall.tmpl)
import(../condor_syscall_lib,switches.prologue)
import(../condor_syscall_lib,switches.epilogue)
import(../condor_syscall_lib,syscall_macros.h)
import(../condor_syscall_lib,switches.remap-SOLARIS.h)
import(../condor_syscall_lib,switches.remap-SOLARIS26.h)
import(../condor_syscall_lib,switches.remap-LINUX.h)
import(../condor_syscall_lib,switches.remap-HPUX.h)
import(../condor_syscall_lib,switches.remap-IRIX62.h)
import(../condor_syscall_lib,switches.remap-DUX4.h)

CPP = PreProcessCmd

#if IS_I386_LINUX
STUB_GEN_PLATFORM = GlibCFlag
#elif IS_SOLARIS251
STUB_GEN_PLATFORM = -DSolaris251
#elif IS_SOLARIS26
STUB_GEN_PLATFORM = -DSolaris26
#elif IS_HPUX10
STUB_GEN_PLATFORM = -DHPUX10
#elif IS_IRIX62
STUB_GEN_PLATFORM = -DIRIX62
#endif

STUB_GEN_FLAGS = $(STUB_GEN_PLATFORM) $(DL_EXTRACT) -D$(OS) \
	$(SAVE_SIGSTATE) $(FILE_TABLE) $(CLIP) -Wall

file_table_switches.C: syscall.tmpl stub_gen switches.prologue switches.epilogue syscall_macros.h switches.remap-SOLARIS.h switches.remap-SOLARIS26.h switches.remap-LINUX.h switches.remap-HPUX.h switches.remap-IRIX62.h switches.remap-DUX4.h
	$(CPP) -DSWITCH $(STUB_GEN_FLAGS) syscall.tmpl | \
	./stub_gen -mode switches  -p switches.prologue -e switches.epilogue \
	> file_table_switches.C

clean::
	rm -f file_table_switches.C *.o

CMNT
CMNT Create a replacement for crt0.o to be linked with condor programs.
CMNT N.B. This is done differently than other objects in that we start out
CMNT with a copy of crt0.o, and change the name of "main" to "MAIN".
CMNT
#if IS_HPUX
condor_rt0.o: Crt0 ToUpper
	./ToUpper Crt0 tmp1 _start _START 
	./ToUpper tmp1 tmp2 _data_START _data_start
	./ToUpper tmp2 condor_rt0.o _text_START _text_start
	rm -f tmp1 tmp2
clean::
	rm -f condor_rt0.o
#elif IS_SUN4X_SOLARIS
condor_rt0.o: Crt0 ToUpper
	./ToUpper Crt0 condor_rt0.o main  MAIN
clean::
	rm -f condor_rt0.o
#elif  IS_X86_SOLARIS
condor_rt0.o: Crt0 ToUpper
	./ToUpper Crt0 condor_rt0.o main  MAIN
clean::
	rm -f condor_rt0.o
#else
condor_rt0.o: Crt0 ToUpper
	./ToUpper Crt0 condor_rt0.o main  MAIN
clean::
	rm -f condor_rt0.o
#endif

clean::
	rm -f c_plus_alloc.o syscall_mode.o

html_target( buffer_cache.h condor_file.h file_state.h ../condor_includes/file_table_interf.h )
