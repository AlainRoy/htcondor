#if IS_MIPS_ULTRIX42 || IS_SPARC_SUNOS41 || IS_HPPAR_HPUX9 || IS_I386_LINUX
CC = gcc
#endif

CMNT
CMNT Set the following if you want a PVM ready checkpointing library
CMNT compiled.  This will require that the PVM library be linked into
CMNT the application.
CMNT

CMNT PVM_CHECKPOINT = -DPVM_CHECKPOINTING

#if DOES_SAVE_SIGSTATE
SAVE_SIGSTATE = -DSAVE_SIGSTATE
SAVE_SIGSTATE_OBJ = signals_support.o
SAVE_SIGSTATE_SRC = signals_support.c

#if IS_SPARC_SUNOS41
SIG_EXTRACT = SIGVEC.o _SIGVEC.o
#elif IS_ALPHA_OSF1
SIG_EXTRACT = SIGACTION.o SIGPROCMASK.o SIGSUSPEND.o SIGNAL.o
#elif IS_MIPS_ULTRIX43
SIG_EXTRACT = SIGVEC.o SIGACTION.o SIGPROCMASK.o SIGSUSPEND.o SIGNAL.o
#elif (IS_SUN4M_SOLARIS) || (IS_X86_SOLARIS) || (IS_SUN4M_SOLARIS251)
SIG_EXTRACT = SIGACTION.o _SIGACTION.o
#elif (IS_X86_SOLARIS25)
SIG_EXTRACT = SIGACTION.o _SIGACTION.o i386_data.o
#endif

#endif  /* ======= of if DOES_SAVE_SIGSTATE ==========*/

#if (IS_SUN4M_SOLARIS) || (IS_X86_SOLARIS) || (IS_SUN4M_SOLARIS251) || (IS_X86_SOLARIS25)
EXTRACT = MMAP.o SYSCALL.o $(SIG_EXTRACT)
#elif (IS_I386_LINUX)
EXTRACT = MMAP.o SYSCALL.o
#else
EXTRACT = $(SIG_EXTRACT)
#endif

C_PLUS_FLAGS = $(STD_C_PLUS_FLAGS) $(SAVE_SIGSTATE) $(STATIC) $(PVM_CHECKPOINT)

#if IS_HPPAR_HPUX10
CFLAGS = $(STD_C_FLAGS) $(STATIC)
#else
CFLAGS = $(STD_C_FLAGS)
#endif

SRC_DIR = $(SRC_TREE)/condor_ckpt

#if IS_SGI_IRIX62
OS = IRIX62
#elif IS_HPPAR_HPUX10
OS = HPUX10
#else
OS = OperatingSystem
#endif

#if !HAS_FLOCK
FLOCK_OBJ = flock.o
#endif

#if IS_HPPAR_HPUX9 && !IS_HPPAR_HPUX10
ASSEMBLER_SRC = get_reginfo.HPUX.s
ASSEMBLER_OBJ = get_reginfo.HPUX.o
.s.o:
	as /lib/pcc_prefix.s $<
#endif

#if IS_R6000_AIX32
ASSEMBLER_SRC = _longjmp.AIX32.s
ASSEMBLER_OBJ = _longjmp.AIX32.o
.s.o:
	m4 /usr/include/sys/asdef.s $*.s | as -o $*.o
#endif

#if IS_SGI_IRIX62
ASSEMBLER_SRC = SYSCALL.MIPS.IRIX62.s MMAP.MIPS.IRIX62.s
ASSEMBLER_OBJ = SYSCALL.MIPS.IRIX62.o MMAP.MIPS.IRIX62.o
.s.o:
	gas -o $*.o $*.s
#elif IS_SGI_IRIX53
ASSEMBLER_SRC = SYSCALL.MIPS.IRIX53.s MMAP.MIPS.IRIX53.s
ASSEMBLER_OBJ = SYSCALL.MIPS.IRIX53.o MMAP.MIPS.IRIX53.o
.s.o:
	gas -o $*.o $*.s
#endif

#if !HAS_GETWD
GETWD_OBJ = getwd.o
#endif

#if IS_R6000_AIX32
UTIL_OBJ = dprintf.o dprintf_config.o except.o condor_errlst.o $(FLOCK_OBJ) $(GETWD_OBJ)
#elif IS_HPPAR_HPUX9
UTIL_OBJ = dprintf.o dprintf_config.o except.o condor_errlst.o $(FLOCK_OBJ) \
		   seteuid.o setegid.o $(GETWD_OBJ)
#else
UTIL_OBJ = dprintf.o dprintf_config.o except.o condor_errlst.o $(FLOCK_OBJ) $(GETWD_OBJ)
#endif

URL_OBJ = url_condor.o include_urls.o cbstp_url.o file_url.o http_url.o \
	cfilter_url.o filter_url.o mailto_url.o ftp_url.o

SRC =	ToUpper.c image.C machdep.$(OS).C file_state.C tmp_stack.C \
	syscall_mode.c local_startup.c fake_remote_syscall.c fake_hooks.c \
	$(SAVE_SIGSTATE_SRC)

#if DOES_CHECKPOINTING
OBJ =	image.o machdep.$(OS).o file_state.o tmp_stack.o syscall_mode.o \
	local_startup.o fake_remote_syscall.o fake_hooks.o \
	$(SAVE_SIGSTATE_OBJ) $(EXTRACT) \
	$(ASSEMBLER_OBJ) $(UTIL_OBJ) $(URL_OBJ)
#else
OBJ =	syscall_mode.o
#endif

#if IS_R6000_AIX32
RELEASE_OBJ = $(LIB_DIR)/libckpt.a $(LIB_DIR)/c_plus_alloc.o
#endif

#if DOES_CHECKPOINTING
	all_target(ToUpper machdep_test libckpt.a c_plus_alloc.o condor_rt0.o $(RELEASE_OBJ) )
	library_target(libckpt.a,$(OBJ))
	release_library(libckpt.a,$(RELEASE_DIR)/lib)
	release_target(c_plus_alloc.o,$(RELEASE_DIR)/lib,OBJECT_MODE)
#else
	all_target(syscall_mode.o ToUpper)
release:: all
#endif


#if IS_HPPAR_HPUX9
SIGNAL.o :  $(SIMPLE_LIBC)  ToUpper
	ar x    $(SIMPLE_LIBC)      signal.o      ; mv  signal.o  $(TMP_DIR)
	ToUpper $(TMP_DIR)/signal.o   SIGNAL.o   signal   SIGNAL
	rm -f $(TMP_DIR)/signal.o
	mv SIGNAL.o tmp1
	ToUpper tmp1 SIGNAL.o _SIGNALvector _signalvector
	rm -f tmp1
#else
uppercase_target($(SIMPLE_LIBC),signal.o,SIGNAL.o,signal,SIGNAL)
#endif

#if (IS_X86_SOLARIS25)
i386_data.o : $(SIMPLE_LIBC)
	ar x $(SIMPLE_LIBC) i386_data.o
#endif

uppercase_target($(SIMPLE_LIBC),sigvec.o,SIGVEC.o,sigvec,SIGVEC)
uppercase_target($(SIMPLE_LIBC),_sigvec.o,_SIGVEC.o,_sigvec,_SIGVEC)
#if !IS_ALPHA_OSF1
uppercase_target($(SIMPLE_LIBC),sigaction.o,SIGACTION.o,sigaction,SIGACTION)
#endif
#if (IS_SUN4M_SOLARIS) || (IS_X86_SOLARIS) || (IS_SUN4M_SOLARIS251) || (IS_X86_SOLARIS25)
uppercase_target($(SIMPLE_LIBC),mmap.o,MMAP.o,mmap,MMAP)
uppercase_target($(SIMPLE_LIBC),syscall.o,SYSCALL.o,syscall,SYSCALL)
uppercase_target($(SIMPLE_LIBC),_sigaction.o,_SIGACTION.o,sigaction,SIGACTION)
#endif
uppercase_target($(SIMPLE_LIBC),sigprocmask.o,SIGPROCMASK.o,sigprocmask,SIGPROCMASK)

#if IS_ALPHA_OSF1
SIGSUSPEND.o :  $(SIMPLE_LIBC)  ToUpper
	ar x    $(SIMPLE_LIBC)      sigsuspend.o 	  ; mv  sigsuspend.o  $(TMP_DIR)
	ToUpper $(TMP_DIR)/sigsuspend.o   $(TMP_DIR)/SIGSUSPEND.o   sigsuspend   SIGSUSPEND
	ToUpper $(TMP_DIR)/SIGSUSPEND.o $(TMP_DIR)/SIGSUSPEND1.o _SIGSUSPEND _sigsuspend
	ToUpper $(TMP_DIR)/SIGSUSPEND1.o SIGSUSPEND.o __sigsuspend __SIGSUSPEND 
	rm -f $(TMP_DIR)/sigsuspend.o $(TMP_DIR)/SIGSUSPEND.o
SIGACTION.o : $(SIMPLE_LIBC) ToUpper
	ar x $(SIMPLE_LIBC) sigaction.o; mv sigaction.o $(TMP_DIR)
	ToUpper $(TMP_DIR)/sigaction.o $(TMP_DIR)/SIGACTION.o sigaction SIGACTION
	ToUpper $(TMP_DIR)/SIGACTION.o SIGACTION.o _sigtramp _SIGTRAMP
	rm -f $(TMP_DIR)/sigaction.o $(TMP_DIR)/SIGACTION.o
#else
uppercase_target($(SIMPLE_LIBC),sigsuspend.o,SIGSUSPEND.o,sigsuspend,SIGSUSPEND)
#endif

#if IS_I386_LINUX
uppercase_target($(SIMPLE_LIBC),mmap.o,MMAP.o,mmap,MMAP)
uppercase_target($(SIMPLE_LIBC),syscall.o,SYSCALL.o,syscall,SYSCALL)
#endif

depend_target($(SRC) )

#if (IS_SUN4M_SOLARIS) || (IS_X86_SOLARIS) || (IS_SUN4M_SOLARIS251) || (IS_X86_SOLARIS25)
program_target(machdep_test,machdep_test.o machdep.$(OS).o tmp_stack.o $(ASSEMBLER_OBJ) dprintf.o $(FLOCK_OBJ) MMAP.o SYSCALL.o, )
#elif (IS_HPPAR_HPUX9)
program_target(machdep_test,machdep_test.o machdep.$(OS).o tmp_stack.o $(ASSEMBLER_OBJ) seteuid.o flock.o setegid.o, dprintf.o )
#elif (IS_I386_LINUX)
program_target(machdep_test,machdep_test.o machdep.$(OS).o tmp_stack.o $(ASSEMBLER_OBJ) dprintf.o, )
#else
program_target(machdep_test,machdep_test.o machdep.$(OS).o tmp_stack.o $(ASSEMBLER_OBJ), dprintf.o )
#endif

program_target(ToUpper,ToUpper.o,$(NULL))
release_target(ToUpper,$(RELEASE_DIR)/bin,EXECUTABLE_MODE)

CMNT
CMNT Create a replacement for crt0.o to be linked with condor programs.
CMNT N.B. This is done differently than other objects in that we start out
CMNT with a copy of crt0.o, and change the name of "main" to "MAIN".
CMNT
#if IS_HPPAR_HPUX9
condor_rt0.o: Crt0 ToUpper
	ToUpper Crt0 tmp1 _start _START 
	ToUpper tmp1 tmp2 _data_START _data_start
	ToUpper tmp2 condor_rt0.o _text_START _text_start
	rm -f tmp1 tmp2
clean::
	rm -f condor_rt0.o
#elif (IS_SUN4M_SOLARIS) || (IS_SUN4M_SOLARIS251)
#undef sparc
#undef sun
condor_rt0.o: Crt0 ToUpper
	ToUpper Crt0 condor_rt0.o main  MAIN
clean::
	rm -f condor_rt0.o
#define sparc
#define sun
#elif  (IS_X86_SOLARIS)
#undef i386
#undef sun
condor_rt0.o: Crt0 ToUpper
	ToUpper Crt0 condor_rt0.o main  MAIN
clean::
	rm -f condor_rt0.o
#define i386
#define sun
#else
condor_rt0.o: Crt0 ToUpper
	ToUpper Crt0 condor_rt0.o main  MAIN
clean::
	rm -f condor_rt0.o
#endif


IMPORT_LINKS = ../../config/import_links
import(../condor_util_lib,$(UTIL_OBJ))
import(../condor_c++_util,$(URL_OBJ))

clean::
	rm -f c_plus_alloc.o syscall_mode.o
