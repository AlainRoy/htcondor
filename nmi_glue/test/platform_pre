#!/usr/bin/env perl

######################################################################
# $Id: platform_pre,v 1.1.4.5.116.3 2006-03-22 17:20:11 bt Exp $
# Submit-side NMI build system infrastructure to setup platform
# specific input for test jobs.  All we have to do is trim down the
# architecture-dependent results.tar.gz file to remove all the
# tarballs we don't care about for testing, and just leave the single 
# input file we care about.  We'll write the name of that file into a
# well-known file for our remote-side scripts to easily find it.
######################################################################

use Cwd;

# autoflush our STDOUT
$| = 1;

my $BaseDir = getcwd();

my $tarball_file = "CONDOR-TARBALL-NAME";
my $results = "results.tar.gz";
-f $results || die "$results does not exist!\n";

######################################################################
# -1) If we are dealing with a Windows build simply save the
#     results.tar.gz name in the marker file because it holds only
#     what we want. Then leave.
######################################################################


if( ($ENV{NMI_PLATFORM} =~ /winnt/) ) {
    print "Writing tarball filename to $tarball_file\n";
    open( TARBALL_FILE, ">$tarball_file" ) ||
        die "Can't open $tarball_file: $!\n";
    print TARBALL_FILE "$results\n";
    close( TARBALL_FILE );

    print "All steps completed successfully\n";
    exit 0;
}

######################################################################
# 0) Grab command-line arg to decide what binaries to test
######################################################################

my $test_type = $ARGV[0];
if( ! $test_type ) {
    $test_type = "dynamic";
}
print "Preparing input for $test_type test job in $BaseDir\n";


######################################################################
# 1) find the specific binary we care about for this test-type 
######################################################################

print "Searching in results.tar.gz for binaries that match '$test_type'\n";
open( LTAR, "tar -ztf $results|" ) || 
    die "Can't open tar -ztf $results: $!\n";
my $saved_tarball;
while( <LTAR> ) {
    chomp;
    print "Considering: $_\n";
    if( $test_type eq "dynamic" ) {
		# in this case, we want to ignore RPMs, and only grab the
		# dynamically-linked version of the tarballs
		if( /.*$test_type.*\.tar\.(gz|Z)$/ ) {
	    	$saved_tarball = $_;
	    	print "Found tarball that matches '$test_type'!\n";
	    	last;
		}
    }
    # Someday, we can add cases for other kinds of $test_type here... 
} 
close( LTAR );
if( ! $saved_tarball ) {
    die "Can't find any tarball that matches '$test_type' in $results\n";
}


######################################################################
# 2) Now that we found the binary we want, untar it from the tarball,
#    move it to this parent directory, and remove results.tar.gz
######################################################################

print "Unpacking architecture-dependent results.tar.gz\n";
open( UNTAR, "tar -zxvf $results $saved_tarball|" ) || 
    die "Can't open tar -zxvf $results $saved_tarball: $!\n";
while( <UNTAR> ) {
    print;
}
close( UNTAR );
if( $? ) {
    die "'tar -zxvf $results $saved_tarball' failed with status $?\n";
}

@path_parts = split( '/', $saved_tarball );
$tar_name = pop( @path_parts );
print "TarName is: $tar_name\n";

# Now, copy it to the parent
print "Copying $tar_name to $BaseDir\n";
system( "cp $saved_tarball $BaseDir" );
if( $? ) {
    die "'cp $saved_tarball $BaseDir' failed with status $?\n";
}

# Finally, blow away anything still in public and the results.tar.gz
print "Removing all other arch-dependent data\n";
system( "rm -rf public $results" );
if( $? ) {
    die "'rm -rf public $results' failed with status $?\n";
}

print "Writing tarball filename to $tarball_file\n";
open( TARBALL_FILE, ">$tarball_file" ) || 
    die "Can't open $tarball_file: $!\n";
print TARBALL_FILE "$tar_name\n";
close( TARBALL_FILE );

print "All steps completed successfully\n";
exit 0;
