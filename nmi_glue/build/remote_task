#!/usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************


######################################################################
# $Id: remote_task,v 1.3.12.2 2008-01-28 19:17:18 burnett Exp $
# Perform a given build task, and return the status of that task
# 0 = success
# 1 = build failed
# 3 = internal fatal error (a.k.a. die)
######################################################################

use Cwd;
my $BaseDir = getcwd();
my $SrcDir = "$BaseDir/src";
my $MSBuildDir = "$BaseDir/msbuild";
my $PublicDir = "$BaseDir/public";

# WINDOWS SPECIFIC ENV...
if ($ENV{NMI_PLATFORM} =~ /winnt/) {
    $BaseDir =~ s/\//\\/g;
    $SrcDir = "$BaseDir\\src";
    $MSBuildDir = "$BaseDir\\msbuild";
    $PublicDir = "$BaseDir\\public";
    $ENV{USERPROFILE} = "c:\\temp";
    $ENV{TMP} = "c:\\temp";
    $ENV{PATH} .= ";\"C:\\Program Files\\Microsoft Visual Studio 9.0\\VC\"";
    $ENV{PATH} .= ";\"C:\\Program Files\\Microsoft Visual Studio 9.0\\VC\\bin\"";
    $ENV{PATH} .= ";\"C:\\Program Files\\Microsoft Platform SDK\"";
    $ENV{PATH} .= ";$MSBuildDir";
}

# autoflush our STDOUT
$| = 1;

######################################################################
###### WARNING!!!  The return value of this script has special  ######
###### meaning, so you can NOT just call die().  you MUST       ######
###### use the special c_die() method so we return 3!!!!        ######
######################################################################

if( ! defined $ENV{_NMI_TASKNAME} ) {
    c_die("_NMI_TASKNAME not in environment, can't build anything!\n");
}
my $taskname = $ENV{_NMI_TASKNAME};
if( ! $taskname ) {
    # if we have no task, just return success immediately
    print "No tasks specified, returning SUCCESS\n";
    exit 0;
}

print "------------------------- ENV DUMP ------------------------\n";
if ($ENV{NMI_PLATFORM} =~ /winnt/) {
    system("set");
} else {
    system("env");
}
print "------------------------- ENV DUMP ------------------------\n";
######################################################################
# build the task
######################################################################


if ($taskname eq "win_make") {
    chdir("$MSBuildDir") || c_die("Can't chdir($MSBuildDir): $!\n");
    system("make.bat /exit");
}
elsif ($taskname eq "win_release") {
    mkdir("$PublicDir", 0777) || c_die ("Can't mkdir($PublicDir): $!\n");
    chdir("$MSBuildDir") || c_die("Can't chdir($MSBuildDir): $!\n");
    system("dorelease $PublicDir");
}
else {
    chdir("$SrcDir") || c_die("Can't chdir($SrcDir): $!\n");
    open( BUILD, "make $taskname 2>&1 |" ) || 
        c_die("Can't run make $taskname\n");
    while( <BUILD> ) {
        print $_;
    }
    close( BUILD );
}
$buildstatus = $?;


# now check the build status and return appropriately
if( $buildstatus == 0 ) {
    print "Building $taskname: SUCCESS\n";
    exit 0;
}

print "Building $taskname: FAILURE ($buildstatus)\n";
exit 1;


sub c_die {
    my( $msg ) = @_;
    print $msg;
    exit 3;
}
