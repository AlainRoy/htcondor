#!/usr/bin/env perl

######################################################################
# $Id: pre_all,v 1.1.4.2.86.1 2005-11-09 22:17:52 pavlo Exp $ 
# Submit-side NMI build system infrastructure to prepare sources for
# the Condor build
#
# We assume the 'common' subdir contains everything we checked out of
# CVS.  We need to go into that directory, and do a few things:
# 1) Figure out what version of Condor we're building
# 2) run autoconf so we have a working configure script
# 3) build the nroff source for the man pages so that the man-current
#    external package will work
# 4) Setup the sources as a release-able source tarball
######################################################################

######################################################################
# NOTE: This script depends on the following bootstrap programs:
# - GNU tar (so long as it supports --exclude)
# - GNU autoconf (version 2.57 or greater)
# - everything require for "make nroff"
#    - latex
#    - latex2html
#    ...  ;) (could fill this in later)
######################################################################

use Cwd;

# autoflush our STDOUT
$| = 1;

my $CommonDir = getcwd();
my $SrcDir = "$CommonDir/src";
my $DocDir = "$CommonDir/doc";
my $ExtDir = "$CommonDir/externals";

-d $CommonDir || die "$CommonDir does not exist!\n";
-d $SrcDir || die "$SrcDir does not exist!\n";
-d $DocDir || die "$DocDir does not exist!\n";
-d $ExtDir || die "$ExtDir does not exist!\n";

my $result = "results.tar.gz";


######################################################################
# 1) Figure out what version of Condor we're building
######################################################################

print "Figuring out Condor version\n";
chdir( "$CommonDir" ) || die "Can't chdir($CommonDir): $!\n";
my $vers_src="$SrcDir/condor_c++_util/condor_version.C";
my $vers_file="CONDOR-VERSION";
my $majorv;
my $minorv;
my $releasev;
my $version;

open( VERS_SRC, "<$vers_src" ) || die "Can't open $vers_src: $!\n";
while( <VERS_SRC> ) {
    if( /^static char\* CondorVersionString = \"\$CondorVersion: (\d+)\.(\d+)\.(\d+).*/ ) {
	$majorv = $1;
	$minorv = $2;
	$releasev = $3;
	$version = "$majorv.$minorv.$releasev";
	last;
    }
}
close( VERS_SRC );
if( $version =~ /(\d+)\.(\d+)\.(\d+)/ ) {
    print "Condor version is: $version\n";
} else {
    die "ERROR: Can't parse the version string!";
}
open( VERS_FILE, ">$vers_file") || die "Can't open $vers_file: $!\n";
print VERS_FILE "$version";
close( VERS_FILE );


######################################################################
# Step #2: run autoconf
######################################################################

print "Running autoconf to generate configure script\n";
chdir( "$SrcDir" ) || die "Can't chdir($SrcDir): $!\n";
system( "autoconf" );
$ac_status = $?;
if( $ac_status ) {
    die "Autoconf failed with status $ac_status\n";
}
system( "rm -rf autom4te.cache" );
$status = $?;
if( $status ) {
    warn "Can't remove autom4te.cache directory!\n";
}
print "Finished running autoconf\n";


######################################################################
# Step #3: build nroff sources
######################################################################

# print "Building man page nroff source\n";
# chdir( "$DocDir" ) || die "Can't chdir($DocDir): $!\n";
# my $doc_log = "$CommonDir/nroff.log";
# open( DOC, "make nroff 2>&1|" ) || die "Can't open 'make nroff': $!\n";
# open( DOC_LOG, ">$doc_log" ) || die "Can't open $doc_log: $!\n";
# $oldfh = select(DOC_LOG); $| = 1; select($oldfh);
# while( <DOC> ) {
#     print DOC_LOG "$_";
# }
# close( DOC );
# close( DOC_LOG );
# $nroff_status = $?;
# if( $nroff_status ) {
#     die "Building nroff man pages failed with status $nroff_status!\n";
# } else {
#     unlink( $doc_log ) || warn "Can't unlink($doc_log): $!\n";
# }
# system("tar zcf $ExtDir/bundles/man/current/man-current.tar.gz man");
# print "Finished building man page nroff source\n";
# 
# chdir( "$CommonDir" ) || die "Can't chdir($CommonDir): $!\n";
# print "Removing doc directory\n";
# system( "rm -rf $DocDir" );
# print "Done removing doc directory\n";


######################################################################
# 4) Setup the sources as a release-able source tarball
######################################################################

print "Creating source tarball\n";
chdir( "$CommonDir" ) || die "Can't chdir($CommonDir): $!\n";
my $src_tar_dir = "condor-$version";
my $src_tarball = "$src_tar_dir.tar.gz";
mkdir( "$src_tar_dir" ) || die "Can't mkdir($src_tar_dir): $!\n";

safe_sys( "cp $SrcDir/README.building $src_tar_dir" );
safe_sys( "cp src/condor_release/LICENSE.TXT $src_tar_dir" );
safe_sys( "mv NTconfig config imake src externals $src_tar_dir" );
safe_sys( "tar --exclude=CVS -zcf $src_tarball $src_tar_dir" );
print "Done creating source tarball\n";

print "Removing all source directories\n";
safe_sys( "rm -rf $src_tar_dir" );
print "Done removing all source directories\n";


######################################################################
# 5) Create platform-independent results.tar.gz file
######################################################################

# All we want to do is tar the files in common into
# common/results.tar.gz so that we can save them.
print "Tarring up contents of common to save for later\n";
chdir( "$CommonDir" ) || die "Can't chdir($CommonDir): $!\n";
open( TAR, "tar -zcvf $result $vers_file $src_tarball|" ) ||
    die "Can't open(tar -zcvf $result $vers_file $src_tarball): $!\n";
while( <TAR> ) {
    print $_;
}
close( TAR );
if( $? ) {
    die "Tar failed with status $?\n";
}
print "tar completed successfully\n";

print "All steps completed successfully!\n";
exit 0;


######################################################################
# subroutines
######################################################################

sub safe_sys() {
    my ( $arg ) = @_;
    system $arg;
    my $status = $?;
    if( $status ) {
	die "$arg failed with status $status\n";
    }
}
