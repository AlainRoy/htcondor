#!/usr/bin/env perl
use Cwd;

# update the relevant information below, pre-create the $target_root
# directory (below) in AFS, and run this script from nmi-s001 in a
# directory containing lots of space (e.g. 14+ GB was needed for 6.8.0)

my $run_id = "64173";
my $gid = "cndrauto_nmi-s003.cs.wisc.edu_1195352121_26757";
# TODO: could extract all of these from the $gid
my $nmi_user = "cndrauto";
my $build_year = "2007";
my $build_month = "11";


my $target_root = "/scratch.1/wright/6.9.5";
my $vers_dir = "v6.9";
my $scp_ident = "wright\@tonic.cs.wisc.edu";

# the below list needs to change only if we change which platforms
# we support, or if you want to just update a subset of them.

my @platforms = (
   "hppa_hpux_11",
   "ia64_rhas_3",
   "ia64_sles_8",
   "ppc64_sles_9",
   "ppc_aix_5.2",
   "ppc_macos_10.4",
   "ps3_ydl_5.0",
   "sun4u_sol_5.8",
   "sun4u_sol_5.9",
   "x86_64_rhas_3",
   "x86_deb_4.0",
   "x86_freebsd_6",
   "x86_macos_10.4",
   "x86_rh_9",
   "x86_rhap_5",
   "x86_rhas_3",
);


#
# you probably shouldn't change anything below this line
#

my @condor_files = ();
my $userdir_root = "/nmi/run/$nmi_user/$build_year/$build_month/$gid/userdir";
my $cur_dir;
my $results;
my $pub_ver = "public/$vers_dir";

print "Transfering tarballs from run: $run_id\n";
print "GID is: $gid\n";

-d $run_id || mkdir( "$run_id", 0777 ) || die "Can't mkdir($run_id): $!\n";
my $cwd = getcwd();
my $base = "$cwd/$run_id";

foreach $platform ( @platforms ) {
    print "Working on platform: $platform\n";
    $target_dir = $pub_ver;
    $cur_dir = "$userdir_root/$platform";
    $results = "$cur_dir/results.tar.gz"; 
    if( ! -f $results ) {
        print "ERROR: no results.tar.gz found for $platform, skipping\n";
        next;
    }
    chdir( "$base" ) || die "Can't chdir($base): $!\n";
    if( ! -d $platform ) {
        mkdir( $platform, 0777 ) || die "Can't mkdir($platform): $!\n";
    }
    chdir( "$base/$platform" ) || die "Can't chdir($base/$platform): $!\n";

    print "Unpacking $target_dir from results.tar.gz for $platform\n";
    if( ! open(UNTAR, "tar -zxvf $results $target_dir|") ) {
        print "Can't open tar -zxvf $results $target_dir: $!\n";
        next;
    }
    @tar_out = <UNTAR>;
    close( UNTAR );
    if( $? ) {
        print "'tar -zxvf $results $target_dir' failed with status $?\n";
        print @tar_out . "\n";
        next;
    }
    opendir( DIR, $pub_ver );
    foreach $file ( readdir(DIR) ) {
        $full_path = "$base/$platform/$pub_ver/$file";
        if( $file =~ /^\./ ) {
            next;
        } elsif( $file =~ /condor-g.*/ ) {
            next;
        } elsif( $file =~ /condor.*/ ) {
            push( @condor_files, $full_path );
        }
    }
    closedir DIR;
}


foreach $file ( @condor_files ) {
    print "$file\n";
}


print "transfering condor files\n";
$scp_cmd = "scp " . join(" ", @condor_files) .
    " $scp_ident:$target_root/";
if( open(SCP, "$scp_cmd|") ) {
    while( <SCP> ) {
        print;
    }
    close( SCP );
    if( $? ) {
        print "scp command failed with status $?\n";
    }
} else { 
    print "Can't open scp command: $!\n";
}

#print "removing local copies\n";
#foreach $file ( @condor_files ) {
#    unlink( "$file" ) || die "Can't unlink($file): $!\n";
#}

print "done\n";
exit 0;
