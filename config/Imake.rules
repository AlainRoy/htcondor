#if IS_MIPS_ULTRIX43
#define IMAKE_FLAGS	-I../../config -Dultrix43a -DTilde=$(TILDE) -s Makefile
#else
#define IMAKE_FLAGS	-I../../config -DTilde=$(TILDE) -s Makefile
#endif

/*
** Build an object directory with symbolic links back into the
** source directory.  Making it appear as though all the source
** files are in the directory where we want to build the objects
** will simplify the Makefiles.
*/
#ifndef object_dir_target
#define object_dir_target(dir_name)										@@\
## dir_name##:															@@\
	mkdir dir_name														@@\
	cd dir_name##; for file in `ls $(SRC_TREE)/##dir_name##`;	\		@@\
		do ln -s $(SRC_TREE)/##dir_name##/$$file .; done;				@@\
	cd dir_name##; imake IMAKE_FLAGS
#endif object_dir_target

/*
** Just make a simple directory.
*/
#ifndef simple_dir_target
#define simple_dir_target(dirname)						@@\
## dirname##:											@@\
	mkdir dirname
#endif simple_dir_target

/*
** Set up to make all the objects in a particular directory.
*/
#ifndef object_target
#define object_target(obj_name)							@@\
## obj_name##: condor_##obj_name						@@\
	cd condor_##obj_name; make 							@@\
release:: condor_##obj_name								@@\
	cd condor_##obj_name; make release					@@\
clean:: condor_##obj_name								@@\
	cd condor_##obj_name; make clean					@@\
tags:: condor_##obj_name								@@\
	cd condor_##obj_name; make tags						@@\
depend:: condor_##obj_name								@@\
	cd condor_##obj_name; make depend					@@\
makefiles:: condor_##obj_name##/Makefile				@@\
condor_##obj_name##/Makefile:							@@\
	cd condor_##obj_name ; imake IMAKE_FLAGS			@@\
object_dir_target(condor_##obj_name)
#endif

/*
** Build a skeleton object tree for a particular platform.
*/
#ifndef platform_target
#define platform_target(platform)						@@\
platform.init: platform ALWAYS							@@\
	cp GENERIC/CheckPlatformType.c platform				@@\
	cp Imakefile.platform_skel platform/Imakefile		@@\
	cd platform ; imake IMAKE_FLAGS						@@\
	cd platform ; make directories; make depend			@@\
platform: 												@@\
	mkdir platform
#endif

/*
** Check to make sure we are running on the correct kind of machine
** and operating system to make object files for this platform.
*/
#ifndef check_platform_target
#define check_platform_target											@@\
CheckPlatformType:														@@\
	rm -f CheckPlatformType												@@\
	cc $(CFLAGS) -o CheckPlatformType ../GENERIC/CheckPlatformType.c	@@\
	./CheckPlatformType													@@\
	rm -f CheckPlatformType
#endif

/*
** Build a library from .o files.
*/
#if IS_V5
#define library_target(libname, objlist)			@@\
## libname ## :	objlist								@@\
	rm -f libname									@@\
	AR_REPLACE( libname, objlist )					@@\
clean ## ::											@@\
	rm -f libname objlist
#else
#define library_target(libname, objlist,rel)		@@\
## libname ## :	objlist								@@\
	rm -f libname									@@\
	AR_REPLACE( libname, objlist )					@@\
## rel ## :: libname								@@\
	COPY_LIBRARY( libname, $(RELEASE_DIR)/lib )		@@\
	RANLIB_TOUCH( $(RELEASE_DIR)/lib/libname )		@@\
clean ## ::											@@\
	rm -f libname objlist
#endif


/*
** Build a program from .o files and libraries.
*/
#if IS_V5
#define	program_target(program, objlist, libs)			@@\
##program: objlist libs									@@\
	$(CC) $(CFLAGS) -o program objlist libs $(LDFLAGS)	@@\
clean:: 												@@\
	rm -f program objlist
#else
#define	program_target(program, objlist, libs, rel)		@@\
##program: objlist libs									@@\
	$(CC) $(CFLAGS) -o program objlist libs $(LDFLAGS)	@@\
clean:: 												@@\
	rm -f program objlist								@@\
##rel::													@@\
	/bin/rm -f $(RELEASE_DIR)/bin/##program				@@\
	cp program $(RELEASE_DIR)/bin
#endif


/*
** Build a C++ program from .o files and libraries.
*/
.SUFFIXES: .C

.C.o:
	$(CPlusPlus) $(C_PLUS_FLAGS) -c $<

#if IS_ALPHA_OSF1
DEMANGLE = 2>&1 | demangle
#endif

#if IS_V5
#define	c_plus_target(program, objlist, libs )						@@\
##program: objlist libs												@@\
	$(CPlusPlus) $(C_PLUS_FLAGS) -o program objlist libs $(LDFLAGS) $(DEMANGLE) @@\
clean:: 															@@\
	rm -f program objlist
#else
#define	c_plus_target(program, objlist, libs, rel)					@@\
##program: objlist libs												@@\
	$(CPlusPlus) $(C_PLUS_FLAGS) -o program objlist libs $(LDFLAGS) $(DEMANGLE) @@\
clean:: 															@@\
	rm -f program objlist											@@\
##rel::	$(RELEASE_DIR)/bin/##program								@@\
	/bin/rm -f $(RELEASE_DIR)/bin/##program							@@\
	cp program $(RELEASE_DIR)/bin
#endif

#if IS_V5
#define SET_GID_MODE	02775
#define EXECUTABLE_MODE	0755
#define OBJECT_MODE		0644
#define release_target(file, dir, mode )							@@\
##dir##/##file##: file												@@\
	/bin/rm -f dir##/##file											@@\
	cp file dir														@@\
	chmod mode dir##/##file											@@\
##release##:: dir##/##file
#endif

#if IS_V5
#define release_library(lib, dir )									@@\
##dir##/##lib##: lib												@@\
	COPY_LIBRARY( lib, dir##/##lib )								@@\
	RANLIB_TOUCH( dir##/##lib )										@@\
##release##:: dir##/##lib
#endif


#if IS_SPARC_SUNOS41
#define	pure_cplus_targ(program, objlist, libs, rel)	@@\
##program: objlist libs									@@\
	purify -collector=$(TILDE)/bin/collect2 -linker=$(TILDE)/bin/ld $(CPlusPlus) -o program objlist libs $(LDFLAGS)						@@\
clean:: 												@@\
	rm -f program objlist								@@\
##rel::													@@\
	/bin/rm -f $(RELEASE_DIR)/bin/##program				@@\
	cp program $(RELEASE_DIR)/bin
#else
#define	pure_cplus_targ(program, objlist, libs, rel)	/* NULL MACRO */
#endif	/* pure_cplus_targ */

/*
** Make sure setgid bit gets turned on after this program gets
** copied into release directory.
*/
#ifndef setgid_target
#define setgid_target(targ)								@@\
##release:: $(RELEASE_DIR)/bin/##targ					@@\
	chmod g+s $(RELEASE_DIR)/bin/##targ
#endif

/*
** Target is made by simply copying a file from one directory to another.
*/
#ifndef copy_target
#define copy_target(src,dst)						@@\
dst:												@@\
	cp src dst										@@\
clean::												@@\
	rm -f dst
#endif

/*
** Build a tags file for a source directory.
*/
#ifndef tags_target
#define tags_target(c_files, libdirs)				@@\
tags: ALWAYS										@@\
	condor_ctags c_files -l libdirs					@@\
clean::												@@\
	rm -f tags
#endif

/*
** Build Makefile dependencies for an object tree.
*/
#ifndef depend_target
#define depend_target(src_list)						@@\
depend: ALWAYS										@@\
	$(MKDEPEND) $(CFLAGS) src_list
#endif

/*
** List everything which should be built in this object tree.
*/
#if IS_V5
#define all_target(targetlist)						@@\
## all: targetlist
#else
#define all_target(targetlist)						@@\
## all: targetlist									@@\
release:: all
#endif

/*
** Save changes via RCS.
*/
#ifndef	rcs_target
#define rcs_target(sourcefile)						@@\
sourcefile: RCS/sourcefile,v						@@\
	co -r sourcefile
#endif

/*
** These special object files are created by extracting a
** standard routine from a system library and changing the
** name by conversion to uppercase.
*/
#ifndef uppercase_target
#define uppercase_target(libname,objname,newname,old_string,new_string)		@@\
##newname: libname ToUpper													@@\
	cd $(TMP_DIR); AR_EXTRACT( libname, objname	)							@@\
	ToUpper $(TMP_DIR)/##objname newname old_string new_string				@@\
	rm -f $(TMP_DIR)/##objname
#endif


/*
** This target made in conjunction with building another library.  The
** other library should have been made first.
*/
#ifndef prev_library_target
#define prev_library_target(targ,prev_lib,this_lib)				@@\
targ:															@@\
	@echo prev_lib must be up to date before making this_lib	@@\
	@echo MISSING targ											@@\
	@false
#endif

/*
** Make a .o file from a .c when the location of the .c is not obvious
** and therefore is not handled by the default rules.
*/
#ifndef C_target
#define C_target(src,obj)						@@\
obj:											@@\
	$(CC) -c $(CFLAGS) src
#endif

/*
** Build a fortran program from .o files and libraries.
*/
#ifndef simple_target_F
#define	simple_target_F(program,objlist,libs)			@@\
BuildSimple_F(program,objlist,libs)						@@\
clean:: 												@@\
	rm -f program objlist
#endif

/*
** Build a C program from .o files and libraries.
*/
#ifndef simple_target_C
#define	simple_target_C(program,objlist,libs)			@@\
BuildSimple_C(program,objlist,libs)						@@\
clean:: 												@@\
	rm -f program objlist
#endif

/*
** Build a checkpointing, (but not remote system call), version of a
** FORTRAN program from .o files and libraries.
*/
#ifndef ckpt_target_F
#define	ckpt_target_F(program, objlist, libs)						@@\
BuildCkpt_F(program,objlist,libs)									@@\
clean:: 															@@\
	rm -f program objlist
#endif

/*
** Build a checkpointing, (but not remote system call), version of a
** C program from .o files and libraries.
*/
#ifndef ckpt_target_C
#define	ckpt_target_C(program, objlist, libs)						@@\
BuildCkpt_C(program,objlist,libs)									@@\
clean:: 															@@\
	rm -f program objlist
#endif

/*
** Build a checkpointing and remote system call version of a C
** program from .o files and libraries.
*/
#ifndef remote_target_C
#define remote_target_C(program,objlist,libs)						@@\
BuildCondor_C(program,objlist,libs)									@@\
clean::																@@\
	rm -f program objlist
#endif

/*
** Build a checkpointing and remote system call version of a FORTRAN
** program from .o files and libraries.
*/
#ifndef remote_target_F
#define remote_target_F(program,objlist,libs)						@@\
BuildCondor_F(program,objlist,libs)									@@\
clean::																@@\
	rm -f program objlist
#endif

/*
** Generate a platform specific version of a shell script file using imake.
*/
#if IS_V5
#define script_target(targ,dir,dest,mode)									@@\
##targ: targ##.generic														@@\
	imake -I../../config -T Scripts.template -s targ##.tmp -f targ##.generic@@\
	awk -f awk.prog targ##.tmp > targ										@@\
	rm -f targ##.tmp														@@\
clean:: 																	@@\
	rm -f targ 																@@\
release:: $(RELEASE_DIR)/##dir##/##dest##									@@\
																			@@\
$(RELEASE_DIR)/##dir##/##dest##: targ										@@\
	/bin/rm -f $(RELEASE_DIR)/##dir##/##targ								@@\
	/bin/rm -f $(RELEASE_DIR)/##dir##/##dest								@@\
	cp targ $(RELEASE_DIR)/##dir##/##dest									@@\
	chmod mode $(RELEASE_DIR)/##dir##/##dest
#else
#define script_target(targ,dest)											@@\
##targ: targ##.generic														@@\
	imake -I../../config -T Scripts.template -s targ##.tmp -f targ##.generic@@\
	awk -f awk.prog targ##.tmp > targ										@@\
	rm -f targ##.tmp														@@\
	chmod u+x targ															@@\
clean:: 																	@@\
	rm -f targ 																@@\
release::																	@@\
	/bin/rm -f $(RELEASE_DIR)/##dest##/##targ								@@\
	cp targ $(RELEASE_DIR)/##dest##/##targ									@@\
	chmod u+x $(RELEASE_DIR)/##dest##/##targ
#endif

/*
** Generate a platform specific version of a text file file using imake.
*/
#if IS_V5
#define text_target(targ,dir,dest)											@@\
##targ: targ##.generic														@@\
	imake -I../../config -T Scripts.template -s targ##.tmp -f targ##.generic@@\
	awk -f awk.prog targ##.tmp > targ										@@\
	rm -f targ##.tmp														@@\
clean:: 																	@@\
	rm -f targ 																@@\
release:: $(RELEASE_DIR)/##dir##/##dest										@@\
																			@@\
$(RELEASE_DIR)/##dir##/##dest##: targ										@@\
	/bin/rm -f $(RELEASE_DIR)/##dir##/##targ								@@\
	/bin/rm -f $(RELEASE_DIR)/##dir##/##dest								@@\
	cp targ $(RELEASE_DIR)/##dir##/##dest
#else
#define text_target(targ,dest)												@@\
##targ: targ##.generic														@@\
	imake -I../../config -T Scripts.template -s targ##.tmp -f targ##.generic@@\
	awk -f awk.prog targ##.tmp > targ										@@\
	rm -f targ##.tmp														@@\
clean:: 																	@@\
	rm -f targ 																@@\
release::																	@@\
	/bin/rm -f $(RELEASE_DIR)/##dest##/##targ								@@\
	cp targ $(RELEASE_DIR)/##dest##/##targ
#endif

/*
** Build a file using an awk program
*/
#ifndef awk_target
#define awk_target(targ,input,prog)			@@\
##targ:	input prog							@@\
	awk -f prog input > targ				@@\
##clean::									@@\
	rm -f targ
#endif

/*
** Import ".o" files from another directory as symbolic links.  Uses
** Make macro "IMPORT_LINKS" which must be initialized to the
** "import_links" shell script in this directory.
*/
#define import(dir,obj)			@@\
## obj ## :						@@\
	$(IMPORT_LINKS) dir obj		@@\
## clean::						@@\
	rm -f obj
