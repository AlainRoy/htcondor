/***************************************************************
 *
 * Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
 * University of Wisconsin-Madison, WI.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License.  You may
 * obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ***************************************************************/

/************************************************************************** 
** There shouldn't be any platform-specific info in this.  By now, all
** the platform, version and OS specific files have been included.
**************************************************************************/

TOP = Top
PLATFORM = Platform

PLATFORM_DIR	=	$(TOP)/$(PLATFORM)
RELEASE_DIR	=	../release_dir
TESTBIN_DIR	=	../testbin_dir
STRIP_DIR	=	../strip_dir
STRIP_CONTRIB	=	../strip_contrib
STATIC_DIR	=	../static_dir
STATIC_CONTRIB	=	../static_contrib
STATIC_UNSTRIP_DIR =	../static_unstrip_dir
PURE_DIR	=	pure_bin

LIB_DIR =		$(RELEASE_DIR)/lib
CONFIG_DIR =		$(TOP)/config
SRC_TREE =		$(TOP)/src
DOC_TREE =		$(TOP)/doc
INCLUDE_DIR =		../h
NEW_INCLUDE_DIR =	../condor_includes
C_PLUS_INCLUDE =	../condor_c++_util
DAEMONCLIENT_INCLUDE =	../condor_daemon_client
DAEMONCORE_INCLUDE =	../condor_daemon_core.V6


#if !defined( CLinker )
#define CLinker CCompiler
#endif

#if !defined( CPlusLinker )
#define CPlusLinker CPlusCompiler
#endif

#if !defined(PlatformGccFlags)
#define PlatformGccFlags
#endif

#if !defined(PlatformGppFlags)
#define PlatformGppFlags
#endif

#ifdef HAVE_RPM
MakeRPMs = perl condor_scripts/make_public_rpms $(RPM_CMD)
#else
MakeRPMs =
#endif

/*
   These next few lines are not supposed to be pre-processor
   directives, but GNU-make understood directives.  They don't want a
   hash mark in front of them.  If you're having problems at these lines,
   you're probably not using gmake.  -peter keller 9/8/2000
*/
ifdef DEBUG_BUILD
CC =  $(DEBUG_BUILD) CCompiler
CPlusPlus = $(DEBUG_BUILD) CPlusCompiler
C_LINK = $(DEBUG_BUILD) CLinker
CC_LINK = $(DEBUG_BUILD) CPlusLinker
else
CC = CCompiler
CPlusPlus = CPlusCompiler
C_LINK = CLinker
CC_LINK = CPlusLinker
endif


STATIC	= -static
STAR	= *

PLATFORM_LDFLAGS = PlatformLdFlags
PURIFY_PLATFORM_LDFLAGS = PurifyPlatformLdFlags
TEST_PLATFORM_LDFLAGS = TestPlatformLdFlags

/*
   Our tests often link with libcondorapi.a, which has calls to dlopen
   and friends.  However, since we're already including all the
   autoconf discovered LIBS on the link line for the test suite, we
   don't have to duplicate any of that here.  the only exceptions are
   libraries we test for in autoconf that we don't just use the
   default autoconf behavior and add to LIBS.  for now, that only
   involves libgen, which is where dirname() lives on some platforms.
*/
#if HAVE_LIBGEN
TEST_PLATFORM_LDFLAGS += -lgen
#endif


/*
   These next few lines are not supposed to be pre-processor
   directives, but GNU-make understood directives.  They don't want a
   hash mark in front of them.  If you're having problems at these lines,
   you're probably not using gmake.  -Derek Wright 6/16/99
*/
ifdef SMP_NUM_JOBS
SMP_FLAGS = -j $(SMP_NUM_JOBS)
else
SMP_FLAGS =
endif

#define UNIX_RT0	$(CRT0)
#define CKPT_RT0	$(RELEASE_DIR)/lib/condor_rt0.o
#define CONDOR_RT0	$(RELEASE_DIR)/lib/condor_rt0.o
#define CKPT_LIBC	$(RELEASE_DIR)/lib/libckpt.a
#define CONDOR_LIBC	$(RELEASE_DIR)/lib/libcondor.a

#define AR_DELETE(libname,objects)ar d libname objects
#define AR_EXTRACT(libname,objects)ar x libname objects

#if HAS_AR_S_OPTION
#define AR_REPLACE(libname,objects)ar vrs libname objects
#else
#define AR_REPLACE(libname,objects) \
	ar vr libname objects @@\
	ranlib libname
#endif


#if HAS_CP_PRESERVE			/* cp lib w/o changing modify time - don't ranlib */
#	define COPY_LIBRARY(src,dst)cp -p src dst
#	define RANLIB_TOUCH(lib)$(TRUE)
#else
#	if HAS_RANLIB_TOUCH		/* cp lib changes modify time - ranlib -t */
#		define COPY_LIBRARY(src,dst)cp src dst
#		define RANLIB_TOUCH(libname)ranlib -t libname
#	else						/* dumb cp and ranlib - do it the hard way */
#		define COPY_LIBRARY(src,dst)cp src dst
#		define RANLIB_TOUCH(libname)ranlib libname
#	endif
#endif

OS_FLAG = OperatingSystem
ARCH_FLAG = Architecture
DIST_FLAG = Distribution

#if HAVE_EXT_CLASSADS
#	define WANT_CLASSAD_ANALYSIS YES
#endif


/**********************************************************************
A whole bunch of settings related to things included in the Condor
externals tree.
**********************************************************************/

/****************************************
 Now that all that is taken care of, we
 can setup a bunch of make variables
 depending on what features are enabled
****************************************/

/* Kerberos */
#if HAVE_EXT_KRB5
# if HAS_EXTERNALS
   KERBEROS_FLAG = -I$(KERBEROS_INC)
# endif
#endif

/* Encryption */


/* This is an ugly hack to get NMI R5 released on AIX 5.1 with no lead
time.  this should all be cleaned up ASAP!  apparently, if we don't
manually enable static linking on the link line around these two
libraries, they end up being dynamically linked in and the resulting
binaries only run on the machine where they were built.  somehow, it's
only happening to the globus libraries and only on AIX.  go figure.
NOTE: we also need the same crap for libpcre.a...
*/
#if IS_AIX5
  PRE_EXT_LIBS = -Wl,-bstatic
  POST_EXT_LIBS = -Wl,-bdynamic
#else
  PRE_EXT_LIBS =
  POST_EXT_LIBS =
#endif


#if HAVE_EXT_GLOBUS
# if HAS_EXTERNALS
  GSI_LIB   = \
	      $(GLOBUS_DIR)/lib/libglobus_gss_assist_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_gssapi_gsi_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_gsi_proxy_core_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_gsi_credential_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_gsi_callback_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libssl_$(GlobusFlavor).a \
   	      $(GLOBUS_DIR)/lib/libglobus_gsi_sysconfig_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_oldgaa_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_gsi_cert_utils_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_openssl_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_openssl_error_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_proxy_ssl_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_callout_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_common_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libltdl_$(GlobusFlavor).a
# endif
#endif

#if HAVE_EXT_OPENSSL
#  if USE_GLOBUS_OPENSSL
    OPENSSL_FLAGS = -I$(OPENSSL_DIR)/include/$(GlobusFlavor)
    OPENSSL_LIB = $(PRE_GLOBUS_LIBS) \
		  $(OPENSSL_DIR)/lib/libssl_$(GlobusFlavor).a \
		  $(OPENSSL_DIR)/lib/libcrypto_$(GlobusFlavor).a \
		  $(POST_GLOBUS_LIBS)
    OPENSSL_MD_LIB = $(OPENSSL_DIR)/lib/libcrypto_$(GlobusFlavor).a 
#  else
#   if HAS_EXTERNALS
      OPENSSL_FLAGS = -I$(OPENSSL_DIR)/include
      OPENSSL_LIB = $(OPENSSL_DIR)/lib/libssl.a $(OPENSSL_DIR)/lib/libcrypto.a
      OPENSSL_MD_LIB = $(OPENSSL_DIR)/lib/libcrypto.a 
#   endif
#  endif
#endif

#if HAVE_EXT_OPENSSL
/* WITH_OPENSSL is used inside gSOAP's stdsoap2.h/C, it's important */
    GSOAP_FLAGS = -DWITH_OPENSSL -DCOMPILE_SOAP_SSL
#endif

/* Collect all the security-related variables into a single variable */
SECURITY_FLAGS = $(KERBEROS_FLAG) \
		 $(OPENSSL_FLAGS)
SECURITY_LIB   = $(KERBEROS_LIB) \
		 $(GSI_LIB) $(OPENSSL_LIB)

#ifdef ENABLE_NETMAN
NETMAN_LIB = ../condor_netman/libnetman.a
NETMAN_FLAGS = -DWANT_NETMAN
#endif

#if HAVE_EXT_COREDUMPER
COREDUMPER_FLAGS = -I$(COREDUMPER_INC)
COREDUMPER_LINK_LIB = $(COREDUMPER_LIB)/libcoredumper.a
#endif

/* PCRE is sorta required everywhere at the moment */
#if HAVE_EXT_PCRE
#if HAS_EXTERNALS
PCRE_FLAGS = -I$(PCRE_INC)
PCRE_LIB = $(PCRE_DIR)/lib/libpcre.a
#endif
#endif

#ifdef WANT_TT
/*
TT_LIB = $(POSTGRESQL_LIB)/libpq.a $(ORACLE_HOME)/lib/libocci10.a $(ORACLE_HOME)/lib/libclntst10.a $(ORACLE_HOME)/lib/libnnz10.a -lirc -lpthread
*/
#if HAS_EXTERNALS
POSTGRESQL_LIBS = $(POSTGRESQL_LIB)/libpq.a 
TT_LIB = $(POSTGRESQL_LIBS) $(ORACLE_LIB)
TT_INC = -I$(POSTGRESQL_INC) $(ORACLE_INC)
#endif
TT_FLAGS = -DWANT_TT  
#endif

#ifdef WANT_QUILL
#if HAS_EXTERNALS
QUILL_LIB = $(POSTGRESQL_LIB)/libpq.a 
QUILL_INC = -I$(POSTGRESQL_INC) 
#endif
QUILL_FLAGS = -DWANT_QUILL 
#endif


#if HAVE_EXT_GCB
#  if ! HAVE_GNU_LD
#    error GCB ENABLED BUT WE DO NOT HAVE GNU LD
#  endif
WRAP_LDFLAGS = -Wl,--wrap,socket -Wl,--wrap,bind -Wl,--wrap,listen -Wl,--wrap,connect -Wl,--wrap,accept -Wl,--wrap,select -Wl,--wrap,recv -Wl,--wrap,read -Wl,--wrap,recvfrom -Wl,--wrap,send -Wl,--wrap,sendto -Wl,--wrap,write -Wl,--wrap,close -Wl,--wrap,dup -Wl,--wrap,dup2 -Wl,--wrap,getsockname -Wl,--wrap,getsockaddr -Wl,--wrap,getsockopt -Wl,--wrap,execv -Wl,--wrap,execve -Wl,--wrap,execl
GCB_FLAGS = -I$(GCB_INC)
#endif


/********************************************
 end of externals-specific settings and flags
********************************************/

VENDOR_C_FLAGS = -I.. -I../.. -I$(INCLUDE_DIR) -I$(NEW_INCLUDE_DIR) \
		 -I$(C_PLUS_INCLUDE) -I$(DAEMONCLIENT_INCLUDE) \
		 -I$(DAEMONCORE_INCLUDE) \
		 $(CONFIGURE_DEFS) -D$(ARCH_FLAG)=$(ARCH_FLAG) \
		 -D$(OS_FLAG)=$(OS_FLAG) $(SITE_C_FLAGS) \
		 $(SECURITY_FLAGS) $(NETMAN_FLAGS) \
		 $(QUILL_FLAGS) $(TT_FLAGS) $(GCB_FLAGS) \
		 $(CONFIGURE_CFLAGS) $(CONFIGURE_CPPFLAGS)


/* This flag is a bad idea since when this stuff eventually goes truly obselete
	we'll have to fix it anyway. */
#if defined(IS_C_COMP_MAJOR_GCC_3) || defined(IS_C_COMP_MAJOR_GCC_4)
GPP_VERS_FLAGS = -Wno-deprecated
#else
GPP_VERS_FLAGS =
#endif

/**
 * Special flags needed for OSX using gcc4
 * We force the platform/arch information to be passed into the compilation
 * This is because TargetConditionals.h gives an 'unknown compiler' error
 * Andy - 07.07.06
 **/
#if defined(IS_DARWIN) && defined(IS_I386)
GPP_ARCH_FLAGS = -DTARGET_OS_MAC=1 -DTARGET_CPU_X86=1
#elif defined(IS_DARWIN) && defined(IS_PPC)
GPP_ARCH_FLAGS = -DTARGET_OS_MAC=1 -DTARGET_CPU_PPC=1
#else
GPP_ARCH_FLAGS =
#endif

GPP_SHARED_FLAGS = $(GPP_VERS_FLAGS) $(GPP_ARCH_FLAGS)

/* Flags shared between C and C++ compilers */
SHARED_COMPILER_FLAGS = $(VENDOR_C_FLAGS) $(COMP_DEBUG_FLAGS) $(CC_PIC_FLAG) PlatformFlags $(CCOMPILER_ID) $(GSOAP_FLAGS) $(PCRE_FLAGS) $(COREDUMPER_FLAGS)

/* We use separate flag definitions for the C compiler and the C++ compiler.
	These are the flags actually passed to the respective compilers. 
	Don't forget to mix in flags specific to one compiler or the other. */
STD_C_FLAGS = $(SHARED_COMPILER_FLAGS) $(GCC_DEBUG_FLAGS) PlatformGccFlags
STD_C_PLUS_FLAGS = $(SHARED_COMPILER_FLAGS) $(GPP_DEBUG_FLAGS) $(GPP_SHARED_FLAGS) PlatformGppFlags 

/* We basically want INST_C_PLUS_FLAGS to be equal to STD_C_PLUS_FLAGS,
	but make sure there isn't -fno-implicit-templates in it
	since we want any templates which need to be created to be created in 
	template instantiation files. */
/* XXX Uh, the comment doesn't match this code (and I think it should--psilord)
	figure out why. */
INST_C_PLUS_FLAGS = $(STD_C_FLAGS) $(GPP_VERS_FLAGS) PlatformGppFlags

TESTSUITE_FLAGS_GCC =  $(STD_C_FLAGS)
TESTSUITE_FLAGS_GPP = $(STD_C_PLUS_FLAGS)
TESTSUITE_FLAGS_G77 =  $(filter-out -Wendif-labels -Wextra -Wvolatile-register-var -fstack-protector,$(STD_C_FLAGS))
TESTSUITE_FLAGS_CC = -g $(VENDOR_C_FLAGS) VendorCTestFlags PlatformFlags
TESTSUITE_FLAGS_CPP = -g $(VENDOR_C_FLAGS) VendorCPPTestFlags PlatformFlags
TESTSUITE_FLAGS_F77 = -g $(VENDOR_C_FLAGS) PlatformFlags


CKPT_SERV_LIB = ../condor_ckpt_server/ckpt_server_api.a
QMGMT_LIB = ../condor_schedd.V6/libqmgmt.a
CLASSAD_LIB = ../condor_classad/libclassad.a
IO_LIB = ../condor_io/libcedar.a
CUTIL_LIB = ../condor_util_lib/util_lib.a
CPLUS_LIB = ../condor_c++_util/cplus_lib.a
PROCAPI_LIB = ../condor_procapi/libprocapi.a
SYSAPI_LIB = ../condor_sysapi/libsysapi.a
ACCT_LIB    = ../condor_accountant.V6/libacct.a
DAEMONCORE_LIB = ../condor_daemon_core.V6/daemon_core.a $(COREDUMPER_LINK_LIB)
PROCD_CLIENT_LIB = ../condor_procd/procd_client.a
PRIVSEP_CLIENT_LIB = ../condor_privsep/privsep_client.a


/* common ld flags which should be first in the list */
COM_LDFLAGS_F = $(GCC_RDYNAMIC_FLAG) $(GCC_STACK_PROTECTOR) -lm \
                $(LDFLAGS) $(CONFIGURE_LIBS) $(CONFIGURE_LDFLAGS)

/* common ld flags which should be last in the list */
COM_LDFLAGS_L = 

/* The various lists of needed ldflags for differing contexts */
NOWRAP_LDFLAGS = $(COM_LDFLAGS_F) $(PLATFORM_LDFLAGS) $(COM_LDFLAGS_L)
ALL_LDFLAGS = $(NOWRAP_LDFLAGS) $(WRAP_LDFLAGS)
TEST_LDFLAGS = $(COM_LDFLAGS_F) $(TEST_PLATFORM_LDFLAGS) $(COM_LDFLAGS_L)
PURIFY_LDFLAGS = $(COM_LDFLAGS_F) $(PURIFY_PLATFORM_LDFLAGS) $(COM_LDFLAGS_L) $(WRAP_LDFLAGS)


STD_LIBS = \
  $(CUTIL_LIB) \
  $(CPLUS_LIB) \
  $(CKPT_SERV_LIB) \
  $(QMGMT_LIB) \
  $(ACCT_LIB) \
  $(PROCAPI_LIB) \
  $(SYSAPI_LIB) \
  $(CPLUS_LIB) \
  $(CLASSAD_LIB) \
  $(IO_LIB) \
  $(CPLUS_LIB) \
  $(CUTIL_LIB) \
  $(SYSAPI_LIB) \
  $(CPLUS_LIB) \
  $(CUTIL_LIB) \
  $(SYSAPI_LIB) \
  $(CLASSAD_LIB) \
  $(IO_LIB) \
  $(CPLUS_LIB) \
  $(IO_LIB) \
  $(CPLUS_LIB) \
  $(CUTIL_LIB) \
  $(PRE_EXT_LIBS) \
  $(SECURITY_LIB) \
  $(PCRE_LIB) \
  $(GCB_LIB) \
  $(POST_EXT_LIBS) \
  $(PROCD_CLIENT_LIB) \
  $(PRIVSEP_CLIENT_LIB) \
  $(CUTIL_LIB) \
  $(GSOAP_LIB)
