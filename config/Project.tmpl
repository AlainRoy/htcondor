/************************************************************************** 
** There shouldn't be any platform-specific info in this.  By now, all
** the platform, version and OS specific files have been included.
**************************************************************************/

LIBC = LibC
SIMPLE_LIBC = SimpleLibC

TOP = Top
PLATFORM = Platform

PLATFORM_DIR	=	$(TOP)/$(PLATFORM)
RELEASE_DIR	=	../release_dir
STRIP_DIR	=	../strip_dir
STRIP_CONTRIB	=	../strip_contrib
STATIC_DIR	=	../static_dir
STATIC_CONTRIB	=	../static_contrib
STATIC_UNSTRIP_DIR =	../static_unstrip_dir
PURE_DIR	=	pure_bin

LIB_DIR =		$(RELEASE_DIR)/lib
CONFIG_DIR =		$(TOP)/config
SRC_TREE =		$(TOP)/src
DOC_TREE =		$(TOP)/doc
INCLUDE_DIR =		../h
NEW_INCLUDE_DIR =	../condor_includes
C_PLUS_INCLUDE =	../condor_c++_util
DAEMONCLIENT_INCLUDE =	../condor_daemon_client

#ifdef NEED_SNPRINTF
SNPRINTF_FLAGS = -DNEED_SNPRINTF
#else
SNPRINTF_FLAGS = 
#endif


#if !defined( CLinker )
#define CLinker CCompiler
#endif

#if !defined( CPlusLinker )
#define CPlusLinker CPlusCompiler
#endif

#if !defined(PlatformGccFlags)
#define PlatformGccFlags
#endif

#if !defined(PlatformGppFlags)
#define PlatformGppFlags
#endif

#if !defined(PlatformLdFlags)
#define PlatformLdFlags
#endif

#if !defined(TestPlatformLdFlags)
#define TestPlatformLdFlags
#endif

#if !defined(PurifyPlatformLdFlags)
#define PurifyPlatformLdFlags
#endif

#if HAS_RPM
MakeRPMs = perl condor_scripts/make_public_rpms
#else
MakeRPMs =
#endif

/*
   These next few lines are not supposed to be pre-processor
   directives, but GNU-make understood directives.  They don't want a
   hash mark in front of them.  If you're having problems at these lines,
   you're probably not using gmake.  -peter keller 9/8/2000
*/
ifdef DEBUG_BUILD
CC =  $(DEBUG_BUILD) CCompiler
CPlusPlus = $(DEBUG_BUILD) CPlusCompiler
C_LINK = $(DEBUG_BUILD) CLinker
CC_LINK = $(DEBUG_BUILD) CPlusLinker
else
CC = CCompiler
CPlusPlus = CPlusCompiler
C_LINK = CLinker
CC_LINK = CPlusLinker
endif


STATIC	= -static
STAR	= *

PLATFORM_LDFLAGS = PlatformLdFlags
PURIFY_PLATFORM_LDFLAGS = PurifyPlatformLdFlags
TEST_PLATFORM_LDFLAGS = TestPlatformLdFlags

/*
   Our tests often link with libcondorapi.a, which has calls to dlopen
   and friends.  However, since we're already including all the
   autoconf discovered LIBS on the link line for the test suite, we
   don't have to duplicate any of that here.  the only exceptions are
   libraries we test for in autoconf that we don't just use the
   default autoconf behavior and add to LIBS.  for now, that only
   involves libgen, which is where dirname() lives on some platforms.
*/
#if HAVE_LIBGEN
TEST_PLATFORM_LDFLAGS += -lgen
#endif


/*
   These next few lines are not supposed to be pre-processor
   directives, but GNU-make understood directives.  They don't want a
   hash mark in front of them.  If you're having problems at these lines,
   you're probably not using gmake.  -Derek Wright 6/16/99
*/
ifdef SMP_NUM_JOBS
SMP_FLAGS = -j $(SMP_NUM_JOBS)
else
SMP_FLAGS =
endif

#define UNIX_RT0	$(CRT0)
#define UNIX_LIBC	$(LIBC)
#define CKPT_RT0	$(RELEASE_DIR)/lib/condor_rt0.o
#define CONDOR_RT0	$(RELEASE_DIR)/lib/condor_rt0.o
#define CKPT_LIBC	$(RELEASE_DIR)/lib/libckpt.a
#define CONDOR_LIBC	$(RELEASE_DIR)/lib/libcondor.a

#define AR_DELETE(libname,objects)ar d libname objects
#define AR_EXTRACT(libname,objects)ar x libname objects

#if HAS_AR_S_OPTION
#define AR_REPLACE(libname,objects)ar vrs libname objects
#else
#define AR_REPLACE(libname,objects) \
	ar vr libname objects @@\
	ranlib libname
#endif


#if HAS_CP_PRESERVE			/* cp lib w/o changing modify time - don't ranlib */
#	define COPY_LIBRARY(src,dst)cp -p src dst
#	define RANLIB_TOUCH(lib)$(TRUE)
#else
#	if HAS_RANLIB_TOUCH		/* cp lib changes modify time - ranlib -t */
#		define COPY_LIBRARY(src,dst)cp src dst
#		define RANLIB_TOUCH(libname)ranlib -t libname
#	else						/* dumb cp and ranlib - do it the hard way */
#		define COPY_LIBRARY(src,dst)cp src dst
#		define RANLIB_TOUCH(libname)ranlib libname
#	endif
#endif

#ifndef IS_CLIPPED
#  define IS_CLIPPED NO
#endif
#if IS_CLIPPED
#  undef DOES_CHECKPOINTING
#  define DOES_CHECKPOINTING NO
#  undef DOES_COMPRESS_CKPT
#  define DOES_COMPRESS_CKPT NO
#  undef DOES_REMOTE_SYSCALLS
#  define DOES_REMOTE_SYSCALLS NO
#endif /* IS_CLIPPED */

#ifndef FORTRAN_HAS_RECURSION
#define FORTRAN_HAS_RECURSION NO
#endif

#ifndef HAS_INET_NTOA
#define HAS_INET_NTOA YES
#endif

#ifndef HAS_PURIFY
#define HAS_PURIFY NO
#endif

OS_FLAG = OperatingSystem
ARCH_FLAG = Architecture
DIST_FLAG = Distribution

#if !defined( DebugFlag )
#define DebugFlag -g -Wall
#endif

DEBUG_FLAG = DebugFlag

#if !defined( PlatformFlags ) 
#define PlatformFlags
#endif

#if !defined( VendorCTestFlags )
#define VendorCTestFlags
#endif

#if !defined( VendorCPPTestFlags )
#define VendorCPPTestFlags
#endif

#if !defined( VendorFTestFlags )
#define VendorFTestFlags
#endif

#if WANT_CLASSAD_FUNCTIONS && HAS_DLOPEN
#   define CLASSAD_FUNCTIONS YES
#endif

#if WANT_NEW_CLASSADS
#	define WANT_CLASSAD_ANALYSIS YES
#endif

#if WANT_DAGMAN_HELPER && HAS_DAGMAN_HELPER
#   define DAGMAN_HELPER YES
#endif 

#if !defined(WANT_ORACLE_UNIVERSE)
#   define WANT_ORACLE_UNIVERSE NO
#endif


/**********************************************************************
A whole bunch of settings related to things included in the Condor
externals tree.  First, we make sure this particular build has been
configured to use the externals, and if not, we disable a bunch of
stuff, even if the rest of the imake configuration things we want it.
**********************************************************************/

#if ! HAS_EXTERNALS

#ifdef WANT_MAN_PAGES
#undef WANT_MAN_PAGES
#endif
#define WANT_MAN_PAGES	NO

#ifdef WANT_PVM
#undef WANT_PVM
#endif
#define WANT_PVM	NO

#ifdef WANT_CONDOR_G
#undef WANT_CONDOR_G
#endif
#define WANT_CONDOR_G	NO

#ifdef WANT_GSI
#undef WANT_GSI
#endif
#define WANT_GSI	NO

#ifdef WANT_X509
#undef WANT_X509
#endif
#define WANT_X509	NO

#ifdef WANT_KERBEROS
#undef WANT_KERBEROS
#endif
#define WANT_KERBEROS	NO

#ifdef WANT_MD
#undef WANT_MD
#endif
#define WANT_MD		NO

#ifdef WANT_3DES
#undef WANT_3DES
#endif
#define WANT_3DES	NO

#ifdef WANT_BLOWFISH
#undef WANT_BLOWFISH
#endif
#define WANT_BLOWFISH	NO

#ifdef USE_GLOBUS_OPENSSL
#undef USE_GLOBUS_OPENSSL
#endif
#define USE_GLOBUS_OPENSSL	NO


#endif /* ! HAS_EXTERNALS */

/****************************************
 Now that all that is taken care of, we
 can setup a bunch of make variables
 depending on what features are enabled
****************************************/

#if WANT_CONDOR_G

  CONDOR_G_FLAGS = -DCONDOR_G

#else
 CONDOR_G_FLAGS =
#endif /* WantCondorG */

/* GSI Authentication requires globus*/
#if WANT_GSI && HAS_GSI
#  define NEEDS_GSI YES
  GSI_AUTH_FLAGS = -DGSI_AUTHENTICATION
  GSI_AUTH_LIB =
#else
  GSI_AUTH_FLAGS =
  GSI_AUTH_LIB   = 
#endif /* WANT_GSI && HAS_GSI */

/* Kerberos */
#if WANT_KERBEROS
  KERBEROS_FLAG = -DKERBEROS_AUTHENTICATION -I$(KERBEROS_INC)
#else
  KERBEROS_FLAG = 
#endif /* !defined(WANT_KERBEROS) */

/* Encryption */
#if WANT_3DES && HAS_OPENSSL
#  define CONDOR_3DES_ENCRYPTION YES
  3DES_FLAGS = -DCONDOR_3DES_ENCRYPTION
#  define NEEDS_OPENSSL YES
#  define WANT_ENCRYPTION YES
#else
  3DES_FLAGS =
#endif

#if WANT_BLOWFISH && HAS_OPENSSL
#  define CONDOR_BLOWFISH_ENCRYPTION YES
  BLOWFISH_FLAGS = -DCONDOR_BLOWFISH_ENCRYPTION
#  define NEEDS_OPENSSL YES
#  define WANT_ENCRYPTION YES
#else
  BLOWFISH_FLAGS =
#endif

#if WANT_ENCRYPTION
#  define CONDOR_ENCRYPTION YES
  ENCRYPTION_FLAGS = -DCONDOR_ENCRYPTION $(3DES_FLAGS) $(BLOWFISH_FLAGS)
  ENCRYPTION_LIB =
#else
  ENCRYPTION_FLAGS =
  ENCRYPTION_LIB =
#endif

#if WANT_MD && HAS_OPENSSL
#  define NEEDS_OPENSSL YES
#  define CONDOR_MD YES
  MD_FLAGS = -DCONDOR_MD
  MD_LIB =
#else
  MD_FLAGS = 
  MD_LIB =
#endif


/* This is an ugly hack to get NMI R5 released on AIX 5.1 with no lead
time.  this should all be cleaned up ASAP!  apparently, if we don't
manually enable static linking on the link line around these two
libraries, they end up being dynamically linked in and the resulting
binaries only run on the machine where they were built.  somehow, it's
only happening to the globus libraries and only on AIX.  go figure.
NOTE: we also need the same crap for libpcre.a...
*/
#if IS_AIX5
  PRE_EXT_LIBS = -Wl,-bstatic
  POST_EXT_LIBS = -Wl,-bdynamic
#else
  PRE_EXT_LIBS =
  POST_EXT_LIBS =
#endif


#if NEEDS_GSI && HAS_GSI
  /* Make sure that USE_GLOBUS_OPENSSL is set */
#  define NEEDS_OPENSSL YES
  GSI_FLAGS = -DCONDOR_GSI $(GSI_AUTH_FLAGS)
  GSI_LIB   = \
	      $(GLOBUS_DIR)/lib/libglobus_gss_assist_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_gsi_cert_utils_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_proxy_ssl_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_gssapi_gsi_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_gsi_proxy_core_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_gsi_credential_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_gsi_callback_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libssl_$(GlobusFlavor).a \
   	      $(GLOBUS_DIR)/lib/libglobus_gsi_sysconfig_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_openssl_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_openssl_error_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_oldgaa_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_callout_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libglobus_common_$(GlobusFlavor).a \
	      $(GLOBUS_DIR)/lib/libltdl_$(GlobusFlavor).a
#else
  GSI_FLAGS =
  GSI_LIB   =
#endif

#if NEEDS_OPENSSL && HAS_OPENSSL

#  if USE_GLOBUS_OPENSSL
    OPENSSL_FLAGS = -I$(OPENSSL_DIR)/include/$(GlobusFlavor) -DSSL_AUTHENTICATION
    OPENSSL_LIB = $(PRE_GLOBUS_LIBS) \
		  $(OPENSSL_DIR)/lib/libssl_$(GlobusFlavor).a \
		  $(OPENSSL_DIR)/lib/libcrypto_$(GlobusFlavor).a \
		  $(POST_GLOBUS_LIBS)
    OPENSSL_MD_LIB = $(OPENSSL_DIR)/lib/libcrypto_$(GlobusFlavor).a 
#  else
    OPENSSL_FLAGS = -I$(OPENSSL_DIR)/include -DSSL_AUTHENTICATION
    OPENSSL_LIB = $(OPENSSL_DIR)/lib/libssl.a $(OPENSSL_DIR)/lib/libcrypto.a
    OPENSSL_MD_LIB = $(OPENSSL_DIR)/lib/libcrypto.a 
#  endif
#else
  OPENSSL_FLAGS =
  OPENSSL_LIB =
  OPENSSL_MD_LIB =
#endif

#if WANT_SOAP_SSL
    GSOAP_CFLAGS = -DWITH_OPENSSL -DCOMPILE_SOAP_SSL
#endif

/* Collect all the security-related variables into a single variable */
SECURITY_FLAGS = $(KERBEROS_FLAG) $(ENCRYPTION_FLAGS) \
		 $(MD_FLAGS) $(GSI_FLAGS) $(OPENSSL_FLAGS)
SECURITY_LIB   = $(KERBEROS_LIB) $(ENCRYPTION_LIB) \
		 $(MD_LIB) $(GSI_LIB) $(OPENSSL_LIB)

#if WANT_NETMAN
NETMAN_LIB = ../condor_netman/libnetman.a
NETMAN_FLAGS = -DWANT_NETMAN
#else
NETMAN_LIB =
NETMAN_FLAGS =
#endif

#if WANT_COREDUMPER
COREDUMPER_FLAGS = -I$(COREDUMPER_INC)
COREDUMPER_LINK_LIB = $(COREDUMPER_LIB)/libcoredumper.a
#else
COREDUMPER_FLAGS =
COREDUMPER_LINK_LIB =
#endif

/* PCRE is sorta required everywhere at the moment */
PCRE_FLAGS = -I$(PCRE_INC)
PCRE_LIB = $(PCRE_DIR)/lib/libpcre.a

#if WANT_TT
TT_LIB = $(POSTGRESQL_LIB)/libpq.a ../condor_quill/libquill.a -L/usr/lib/oracle/xe/app/oracle/product/10.2.0/server/lib/ -locci -lclntsh -lnnz10
TT_INC = -I$(POSTGRESQL_INC) -I/usr/lib/oracle/xe/app/oracle/product/10.2.0/server/rdbms/public
TT_FLAGS = -DWANT_TT 
#else
TT_LIB =
TT_INC =
TT_FLAGS =
#endif

#if WANT_QUILL
QUILL_LIB = $(POSTGRESQL_LIB)/libpq.a 
QUILL_INC = -I$(POSTGRESQL_INC) 
QUILL_FLAGS = -DWANT_QUILL 
#else
QUILL_LIB =
QUILL_INC =
QUILL_FLAGS =
#endif


#if HAVE_EXT_GCB
#  if ! HAVE_GNU_LD
#    error GCB ENABLED BUT WE DO NOT HAVE GNU LD
#  endif
WRAP_LDFLAGS = -Wl,--wrap,socket -Wl,--wrap,bind -Wl,--wrap,listen -Wl,--wrap,connect -Wl,--wrap,accept -Wl,--wrap,select -Wl,--wrap,recv -Wl,--wrap,read -Wl,--wrap,recvfrom -Wl,--wrap,send -Wl,--wrap,sendto -Wl,--wrap,write -Wl,--wrap,close -Wl,--wrap,dup -Wl,--wrap,dup2 -Wl,--wrap,getsockname -Wl,--wrap,getsockaddr -Wl,--wrap,getsockopt -Wl,--wrap,execv -Wl,--wrap,execve -Wl,--wrap,execl
GCB_FLAGS = -I$(GCB_INC)
#endif


/********************************************
 end of externals-specific settings and flags
********************************************/

VENDOR_C_FLAGS = CFlags -I.. -I../.. -I$(INCLUDE_DIR) -I$(NEW_INCLUDE_DIR) \
		 -I$(C_PLUS_INCLUDE) -I$(DAEMONCLIENT_INCLUDE) \
		 $(CONFIGURE_DEFS) -D$(ARCH_FLAG)=$(ARCH_FLAG) \
		 -D$(OS_FLAG)=$(OS_FLAG) $(SITE_C_FLAGS) $(CONDOR_G_FLAGS) \
		 $(SECURITY_FLAGS) $(NETMAN_FLAGS) $(SNPRINTF_FLAGS) \
		 $(QUILL_FLAGS) $(TT_FLAGS) $(GCB_FLAGS)


#ifdef IS_C_COMP_MAJOR_GCC_3
GPP_VERS_FLAGS = -Wno-deprecated
#else
GPP_VERS_FLAGS =
#endif
GPP_SHARED_FLAGS = -fno-implicit-templates $(GPP_VERS_FLAGS)

STD_C_FLAGS = $(VENDOR_C_FLAGS) $(DEBUG_FLAG) $(CC_PIC_FLAG) PlatformFlags PlatformGccFlags $(CCOMPILER_ID) $(GSOAP_CFLAGS) $(PCRE_FLAGS) $(COREDUMPER_FLAGS)
STD_C_PLUS_FLAGS = $(STD_C_FLAGS) $(GPP_SHARED_FLAGS) PlatformGppFlags
/* We basically want INST_C_PLUS_FLAGS to be equal to STD_C_PLUS_FLAGS,
	but make sure there isn't -fno-implicit-templates in it
	since we want any templates which need to be created to be created in 
	template instantiation files. */
INST_C_PLUS_FLAGS = $(STD_C_FLAGS) $(GPP_VERS_FLAGS) PlatformGppFlags

TESTSUITE_FLAGS_GCC =  $(STD_C_FLAGS)
TESTSUITE_FLAGS_GPP = $(STD_C_PLUS_FLAGS)
TESTSUITE_FLAGS_G77 =  $(STD_C_FLAGS)
TESTSUITE_FLAGS_CC = -g $(VENDOR_C_FLAGS) VendorCTestFlags PlatformFlags
TESTSUITE_FLAGS_CPP = -g $(VENDOR_C_FLAGS) VendorCPPTestFlags PlatformFlags
TESTSUITE_FLAGS_F77 = -g $(VENDOR_C_FLAGS) VendorFTestFlags PlatformFlags


CKPT_SERV_LIB = ../condor_ckpt_server/ckpt_server_api.a
QMGMT_LIB = ../condor_schedd.V6/libqmgmt.a
CLASSAD_LIB = ../condor_classad/libclassad.a
IO_LIB = ../condor_io/libcedar.a
CUTIL_LIB = ../condor_util_lib/util_lib.a
CPLUS_LIB = ../condor_c++_util/cplus_lib.a
PROCAPI_LIB = ../condor_procapi/libprocapi.a
SYSAPI_LIB = ../condor_sysapi/libsysapi.a
ACCT_LIB    = ../condor_accountant.V6/libacct.a
DAEMONCORE_LIB = ../condor_daemon_core.V6/daemon_core.a $(COREDUMPER_LINK_LIB)


/* common ld flags which should be first in the list */
COM_LDFLAGS_F = $(GCC_RDYNAMIC_FLAG) -lm $(LDFLAGS) $(CONFIGURE_LIBS)

/* common ld flags which should be last in the list */
COM_LDFLAGS_L = 

/* The various lists of needed ldflags for differing contexts */
NOWRAP_LDFLAGS = $(COM_LDFLAGS_F) $(PLATFORM_LDFLAGS) $(COM_LDFLAGS_L)
ALL_LDFLAGS = $(NOWRAP_LDFLAGS) $(WRAP_LDFLAGS)
TEST_LDFLAGS = $(COM_LDFLAGS_F) $(TEST_PLATFORM_LDFLAGS) $(COM_LDFLAGS_L)
PURIFY_LDFLAGS = $(COM_LDFLAGS_F) $(PURIFY_PLATFORM_LDFLAGS) $(COM_LDFLAGS_L) $(WRAP_LDFLAGS)


STD_LIBS = \
  $(CUTIL_LIB) \
  $(CPLUS_LIB) \
  $(CKPT_SERV_LIB) \
  $(QMGMT_LIB) \
  $(ACCT_LIB) \
  $(PROCAPI_LIB) \
  $(SYSAPI_LIB) \
  $(CPLUS_LIB) \
  $(CLASSAD_LIB) \
  $(IO_LIB) \
  $(CPLUS_LIB) \
  $(CUTIL_LIB) \
  $(SYSAPI_LIB) \
  $(CPLUS_LIB) \
  $(CUTIL_LIB) \
  $(SYSAPI_LIB) \
  $(CLASSAD_LIB) \
  $(IO_LIB) \
  $(CPLUS_LIB) \
  $(IO_LIB) \
  $(CPLUS_LIB) \
  $(CUTIL_LIB) \
  $(PRE_EXT_LIBS) \
  $(SECURITY_LIB) \
  $(PCRE_LIB) \
  $(GCB_LIB) \
  $(POST_EXT_LIBS)
