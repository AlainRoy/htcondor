/************************************************************************** 
** There shouldn't be any platform-specific info in this.  By now, all
** the platform, version and OS specific files have been included.
**************************************************************************/

LIBC = LibC
SIMPLE_LIBC = SimpleLibC
EGCS_LIBC = EgcsLibc
CRT0 = Crt0

TOP = Top
TMP_DIR = TmpDir
PLATFORM = Platform

PLATFORM_DIR	=	$(TOP)/$(PLATFORM)
RELEASE_DIR	=	../release_dir
STRIP_DIR	=	../strip_dir
STRIP_CONTRIB	=	../strip_contrib
STATIC_DIR	=	../static_dir
STATIC_CONTRIB	=	../static_contrib
PURE_DIR	=	pure_bin

LIB_DIR =		$(RELEASE_DIR)/lib
CONFIG_DIR =		$(TOP)/config
SRC_TREE =		$(TOP)/src
DOC_TREE =		$(TOP)/doc
INCLUDE_DIR =		../h
NEW_INCLUDE_DIR =	../condor_includes
C_PLUS_INCLUDE =	../condor_c++_util
#ifdef X11Include
X11_INCLUDE = X11Include
#else
X11_INCLUDE =           /usr/X11R6/include	
#endif

#if !defined( CLinker )
#define CLinker CCompiler
#endif

#if !defined( CPlusLinker )
#define CPlusLinker CPlusCompiler
#endif

#if !defined(PlatformGccFlags)
#define PlatformGccFlags
#endif

#if !defined(PlatformLdFlags)
#define PlatformLdFlags
#endif

#if !defined(TestPlatformLdFlags)
#define TestPlatformLdFlags
#endif

#if !defined(Strip)
#define Strip strip
#endif

/*
   These next few lines are not supposed to be pre-processor
   directives, but GNU-make understood directives.  They don't want a
   # in front of them.  If you're having problems at these lines,
   you're probably not using gmake.  -peter keller 9/8/2000
*/
ifdef DEBUG_BUILD
CC =  $(DEBUG_BUILD) CCompiler
CPlusPlus = $(DEBUG_BUILD) CPlusCompiler
C_LINK = $(DEBUG_BUILD) CLinker
CC_LINK = $(DEBUG_BUILD) CPlusLinker
else
CC = CCompiler
CPlusPlus = CPlusCompiler
C_LINK = CLinker
CC_LINK = CPlusLinker
endif

LIBX = XLibPath
LIBXEXT = XExtLibPath
STRIP = Strip
STATIC	= StaticFlag
MKDEPEND = MkDepend
STAR	= *

PLATFORM_LDFLAGS = PlatformLdFlags
TEST_PLATFORM_LDFLAGS = TestPlatformLdFlags

/*
   These next few lines are not supposed to be pre-processor
   directives, but GNU-make understood directives.  They don't want a
   # in front of them.  If you're having problems at these lines,
   you're probably not using gmake.  -Derek Wright 6/16/99
*/
ifdef SMP_NUM_JOBS
SMP_FLAGS = -j $(SMP_NUM_JOBS)
else
SMP_FLAGS =
endif

#define UNIX_RT0	$(CRT0)
#define UNIX_LIBC	$(LIBC)
#define CKPT_RT0	$(RELEASE_DIR)/lib/condor_rt0.o
#define CONDOR_RT0	$(RELEASE_DIR)/lib/condor_rt0.o
#define CKPT_LIBC	$(RELEASE_DIR)/lib/libckpt.a
#define CONDOR_LIBC	$(RELEASE_DIR)/lib/libcondor.a

#define AR_DELETE(libname,objects) ar d libname objects
#define AR_EXTRACT(libname,objects) ar x libname objects

#if HAS_AR_S_OPTION
#define AR_REPLACE(libname,objects) ar vrs libname objects
#else
#define AR_REPLACE(libname,objects) \
	ar vr libname objects @@\
	ranlib libname
#endif


#if HAS_CP_PRESERVE			/* cp lib w/o changing modify time - don't ranlib */
#	define COPY_LIBRARY(src,dst) cp -p src dst
#	define RANLIB_TOUCH(lib)	/**/
#else
#	if HAS_RANLIB_TOUCH		/* cp lib changes modify time - ranlib -t */
#		define COPY_LIBRARY(src,dst) cp src dst
#		define RANLIB_TOUCH(libname) ranlib -t libname
#	else						/* dumb cp and ranlib - do it the hard way */
#		define COPY_LIBRARY(src,dst) cp src dst
#		define RANLIB_TOUCH(libname) ranlib libname
#	endif
#endif

#ifndef IS_CLIPPED
#  define IS_CLIPPED NO
#endif
#if IS_CLIPPED
#  undef DOES_CHECKPOINTING
#  define DOES_CHECKPOINTING NO
#  undef DOES_COMPRESS_CKPT
#  define DOES_COMPRESS_CKPT NO
#  undef DOES_REMOTE_SYSCALLS
#  define DOES_REMOTE_SYSCALLS NO
#endif /* IS_CLIPPED */

#ifdef XIncludeFlag
#define XInclude XIncludeFlag
#else
#define XInclude
#endif

#ifndef FORTRAN_HAS_RECURSION
#define FORTRAN_HAS_RECURSION NO
#endif

#ifndef HAS_INET_NTOA
#define HAS_INET_NTOA YES
#endif

#ifndef NEEDS_SPECIAL_STATIC_BUILD
#define NEEDS_SPECIAL_STATIC_BUILD NO
#endif

OS_FLAG = OperatingSystem
ARCH_FLAG = Architecture

#if !defined( DebugFlag )
#define DebugFlag -g
#endif

DEBUG_FLAG = DebugFlag

#if !defined( IS_EGCS_BUILD )
#define IS_EGCS_BUILD NO
#endif

#if !defined( YACC )
#define YACC yacc
#endif

#if !defined( PlatformFlags ) 
#define PlatformFlags
#endif

#if !defined( ImakeArchFlag )
#define ImakeArchFlag
#endif

#if !defined( ImakeOpsysFlag )
#define ImakeOpsysFlag
#endif

#if !defined( ImakeOtherFlag )
#define ImakeOtherFlag
#endif

#if !defined( VendorCTestFlags )
#define VendorCTestFlags
#endif

#if !defined( VendorCPPTestFlags )
#define VendorCPPTestFlags
#endif

#if !defined( VendorFTestFlags )
#define VendorFTestFlags
#endif

#if WANT_GLOBUS && HAS_GLOBUS

# define GLOBUS_SUPPORT 1

  /* GLOBUS_SUPPORT includes GSS_AUTHENTICATION as well */
# undef GSS_AUTHENTICATION
# define GSS_AUTHENTICATION 1

  GLOBUS_DIR = /p/condor/workspaces/globus
  LDAP_DIR = /p/condor/workspaces/ldap

  GLOBUS_FLAGS = -DGLOBUS_SUPPORT -DLDAP_DEBUG -DLDAP_REFERRALS \
    -I$(GLOBUS_DIR)/include -I$(LDAP_DIR)/include

  GLOBUS_LIB = $(GLOBUS_DIR)/lib/libglobus_rsl_assist.a \
    $(GLOBUS_DIR)/lib/libglobus_rsl.a \
    $(GLOBUS_DIR)/lib/libglobus_gram_client.a \
    $(GLOBUS_DIR)/lib/libglobus_gass_server_ez.a \
    $(GLOBUS_DIR)/lib/libglobus_gass_transfer.a \
    $(GLOBUS_DIR)/lib/libglobus_io.a \
    $(GLOBUS_DIR)/lib/libglobus_common.a \
    $(LDAP_DIR)/lib/libldap.a \
    $(LDAP_DIR)/lib/liblber.a

# define IsCondorG -DCONDOR_G
#else
# define IsCondorG 
#endif /*HasGlobus && WantsGlobus */

#if defined( GSS_AUTHENTICATION )

#  define GssAuthFlags -DGSS_AUTHENTICATION -DNO_GSSAPI_CONFIG_H \
          -I$(GLOBUS_DIR)/include -I$(SSL_DIR)/include
#  define ImakeGssFlag -DGSS_AUTHENTICATION

  SSL_DIR = /p/condor/workspaces/ssl
  AUTH2_LIB = $(GLOBUS_DIR)/lib/libglobus_gss_assist.a \
    $(GLOBUS_DIR)/lib/libglobus_gss.a \
    $(GLOBUS_DIR)/lib/libglobus_gaa.a \
    $(SSL_DIR)/lib/libssl.a $(SSL_DIR)/lib/libcrypto.a

#else

#  define GssAuthFlags
#  define ImakeGssFlag

#endif /* !defined( GSS_AUTHENTICATION ) */

AUTH_FLAGS = GssAuthFlags

#if WANT_NETMAN
NETMAN_LIB = ../condor_netman/libnetman.a
NETMAN_FLAGS = -DWANT_NETMAN
#else
NETMAN_LIB =
NETMAN_FLAGS =
#endif

#define ImakeFlags ImakeArchFlag ImakeOpsysFlag ImakeOtherFlag ImakeGssFlag
#define IMAKE_FLAGS ImakeFlags -I../../config -s Makefile

VENDOR_C_FLAGS = CFlags -I$(INCLUDE_DIR) -I$(NEW_INCLUDE_DIR) \
		 -I$(C_PLUS_INCLUDE) XInclude -D$(ARCH_FLAG)=$(ARCH_FLAG) \
		 -D$(OS_FLAG)=$(OS_FLAG) \
		 $(SITE_C_FLAGS) $(AUTH_FLAGS) $(GLOBUS_FLAGS) $(NETMAN_FLAGS)

/*
Generally, compile with -fPIC for position-independent code.
However, leave it as a separate Make variable so that particular
modules that cannot use it (i.e. checkpointing) can turn it off.

This is commented out by default.
This will only be activated for special builds done by hand to
make the SDK.
*/

/* CC_PIC_FLAG = -fPIC */

STD_C_FLAGS = $(VENDOR_C_FLAGS) $(DEBUG_FLAG) $(CC_PIC_FLAG) PlatformFlags PlatformGccFlags
STD_C_PLUS_FLAGS = $(STD_C_FLAGS) -fno-implicit-templates
INST_C_PLUS_FLAGS = $(STD_C_FLAGS)

TESTSUITE_FLAGS_GCC =  $(STD_C_FLAGS)
TESTSUITE_FLAGS_GPP = $(STD_C_PLUS_FLAGS)
TESTSUITE_FLAGS_G77 =  $(STD_C_FLAGS)
TESTSUITE_FLAGS_CC = -g $(VENDOR_C_FLAGS) VendorCTestFlags PlatformFlags
TESTSUITE_FLAGS_CPP = -g $(VENDOR_C_FLAGS) VendorCPPTestFlags PlatformFlags
TESTSUITE_FLAGS_F77 = -g $(VENDOR_C_FLAGS) VendorFTestFlags PlatformFlags


CKPT_SERV_LIB = ../condor_ckpt_server/ckpt_server_api.a
QMGMT_LIB = ../condor_schedd.V6/libqmgmt.a
CLASSAD_LIB = ../condor_classad/libclassad.a
IO_LIB = ../condor_io/libcedar.a
CUTIL_LIB = ../condor_util_lib/util_lib.a
CPLUS_LIB = ../condor_c++_util/cplus_lib.a
PROCAPI_LIB = ../condor_procapi/libprocapi.a
SYSAPI_LIB = ../condor_sysapi/libsysapi.a
ACCT_LIB    = ../condor_accountant.V6/libacct.a
DAEMONCORE_LIB = ../condor_daemon_core.V6/daemon_core.a

ALL_LDFLAGS = -lm $(LDFLAGS) $(PLATFORM_LDFLAGS) $(SITE_LDFLAGS)
TEST_LDFLAGS = -lm $(LDFLAGS) $(TEST_PLATFORM_LDFLAGS) $(SITE_LDFLAGS)

STD_LIBS = \
  $(CUTIL_LIB) \
  $(CPLUS_LIB) \
  $(CKPT_SERV_LIB) \
  $(QMGMT_LIB) \
  $(ACCT_LIB) \
  $(PROCAPI_LIB) \
  $(SYSAPI_LIB) \
  $(CPLUS_LIB) \
  $(CLASSAD_LIB) \
  $(IO_LIB) \
  $(CPLUS_LIB) \
  $(CUTIL_LIB) \
  $(GLOBUS_LIB) \
  $(AUTH2_LIB) \
  $(SYSAPI_LIB) \
  $(CPLUS_LIB) \
  $(CUTIL_LIB) \
  $(SYSAPI_LIB) \
  $(CLASSAD_LIB) \
  $(IO_LIB) \
  $(CPLUS_LIB) \
  $(IO_LIB) \
  $(CPLUS_LIB) \
  $(CUTIL_LIB)

