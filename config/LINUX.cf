/**************************************************************************
** These are all the definitions that are shared between all versions of 
** Linux, including i386 vs Alpha, and glibc vs. libc5
**
** At the end of this file, we include the arch/version-specific
** config files as needed.   
**************************************************************************/

/**************************************************************************
** Shared Linux Settings
**************************************************************************/

#define HAS_DAGMAN_HELPER YES

#if defined( IS_GLIBC )
#  if defined( IS_GLIBC22 )
#    define GlibCFlag		-DGLIBC=GLIBC -DGLIBC22=GLIBC22
#  elif defined( IS_GLIBC23 )
#    define GlibCFlag		-DGLIBC=GLIBC -DGLIBC23=GLIBC23
#  endif
#else /* Non IS_GLIBC */
#  define GlibCFlag
#  define HAS_DAGMAN_HELPER NO
#endif

#define PlatformFlags		ArchOptimizeFlag GlibCFlag

#define PlatformLdFlags		-lresolv -ldl

#if IS_CLIPPED
/* This is sort of odd, since we never use this defined when in clipped mode,
	but just in case, we'll give it a reasonable value */
#define SimpleLibC /usr/lib/libc.a
#else
	/* It used to be the case, before this checkin, that we would
		extract needed .o files from /usr/lib/libc.a and the link
		them against the glibc that we manually create which has
		nss statically linked in. However, on redhat 9, the rpm
		build of the static nss glibc differed from the system
		glibc in that they seemingly had different feature sets.
		The system glibc had run time signals, the hand built
		one did not, and no deciphering of the build arguments
		could determine what the incantation was to make the
		feature sets be identical.  Since variables came and
		went in certain .o files based upon this real time signal
		stuff, the extracted system .o could be using an undefined
		variable that the hand built glibc now never defines. Or
		vice versa.  This would cause .o files to be brought in
		multiple times from either libc as the two versions of
		the .o file fought over who defined what and where.

		A long time ago, we wondered if the extracting libc should
		be the same libc that we link a standard universe
		job against. The answer as of this checkin is now
		"yes". --psilord 12/09/03 */

#define SimpleLibC $(GLIBC_DIR)/libc.a
#endif

#define LibC SimpleLibC

#define IS_V5				YES
#define DOES_CHECKPOINTING		YES
#define DOES_COMPRESS_CKPT		YES
#define DOES_REMOTE_SYSCALLS		YES
#define DOES_SAVE_SIGSTATE		YES
#define DO_BENCHMARKING			YES
#define HAS_DYNAMIC_USER_JOBS		NO

#define NEEDS_KBDD			NO	
#define HAS_NDBM			YES
#define HAS_FSTATFS			YES
#define NEEDS_XDR_FLOAT			NO
#define NEEDS_GROW_STACK		NO
#define NEEDS_SPECIAL_SIGVEC		NO
#define NEEDS_FAKE_GETMNT		YES
#define HAS_VOID_SIGNAL_RETURN		YES
#define HAS_AR_S_OPTION			YES
#define HAS_RANLIB_TOUCH		NO
/*?????*/
#define HAS_CP_PRESERVE			NO
#define NEEDS_SPECIAL_SETJMP		NO
#ifndef FORTRAN_HAS_RECURSION
#  define FORTRAN_HAS_RECURSION		NO
#endif
#define HAS_FLOCK			NO
#define HAS_ADJTIME			YES
#define HAS_GETDTABLESIZE		YES
#define HAS_GETHOSTNAME			YES
#define HAS__UTSSYS			NO
#define HAS_GETPAGESIZE			YES
#define HAS_GETPGRP			YES
#define HAS_GETPGRP2			NO
#define HAS_KILLPG			YES
#define HAS_SETHOSTNAME			YES
#define HAS_UTIMES			YES
#define HAS_UTIME			YES
#define HAS_VHANGUP			YES
#define HAS_SETEGID			YES
#define HAS_SETEUID			YES
#define HAS_GETWD			YES
#define HAS_INSQUE			YES
#define HAS_SETLINEBUF			YES
#define MALLOC_DEBUG			NO
#define HAS_DLOPEN			YES
#define HAS_RPM				YES

#define WANT_SOAP			YES

/**************************************************************************
** Include Arch-specific config files
**************************************************************************/

#ifdef ArchIncludeFile
#include ArchIncludeFile
#endif

